
lab9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c8c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001d98  08001d98  00011d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001db8  08001db8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001db8  08001db8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001db8  08001db8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001db8  08001db8  00011db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001dbc  08001dbc  00011dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  08001dcc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08001dcc  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000519c  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011c7  00000000  00000000  000251d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005b8  00000000  00000000  00026398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000520  00000000  00000000  00026950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015928  00000000  00000000  00026e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000620b  00000000  00000000  0003c798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b3f4  00000000  00000000  000429a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bdd97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015b8  00000000  00000000  000bddec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001d80 	.word	0x08001d80

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001d80 	.word	0x08001d80

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f9be 	bl	80004d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f836 	bl	80001c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8a6 	bl	80002a8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800015c:	f000 f86e 	bl	800023c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(SS_74HC165_GPIO_Port, SS_74HC165_Pin, GPIO_PIN_SET);
 8000160:	2201      	movs	r2, #1
 8000162:	2102      	movs	r1, #2
 8000164:	4814      	ldr	r0, [pc, #80]	; (80001b8 <main+0x6c>)
 8000166:	f000 fc73 	bl	8000a50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SS_74HC595_GPIO_Port, SS_74HC595_Pin, GPIO_PIN_SET);
 800016a:	2201      	movs	r2, #1
 800016c:	2104      	movs	r1, #4
 800016e:	4812      	ldr	r0, [pc, #72]	; (80001b8 <main+0x6c>)
 8000170:	f000 fc6e 	bl	8000a50 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(SS_74HC165_GPIO_Port, SS_74HC165_Pin, GPIO_PIN_RESET); //SPI chip select
 8000174:	2200      	movs	r2, #0
 8000176:	2102      	movs	r1, #2
 8000178:	480f      	ldr	r0, [pc, #60]	; (80001b8 <main+0x6c>)
 800017a:	f000 fc69 	bl	8000a50 <HAL_GPIO_WritePin>
	    //HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 1, 100);
	    HAL_GPIO_WritePin(SS_74HC165_GPIO_Port, SS_74HC165_Pin, GPIO_PIN_SET); //SPI chip deselecet
 800017e:	2201      	movs	r2, #1
 8000180:	2102      	movs	r1, #2
 8000182:	480d      	ldr	r0, [pc, #52]	; (80001b8 <main+0x6c>)
 8000184:	f000 fc64 	bl	8000a50 <HAL_GPIO_WritePin>
	    HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 2, 100);
 8000188:	2364      	movs	r3, #100	; 0x64
 800018a:	2202      	movs	r2, #2
 800018c:	490b      	ldr	r1, [pc, #44]	; (80001bc <main+0x70>)
 800018e:	480c      	ldr	r0, [pc, #48]	; (80001c0 <main+0x74>)
 8000190:	f001 fa1e 	bl	80015d0 <HAL_SPI_Receive>

	    HAL_GPIO_WritePin(SS_74HC595_GPIO_Port, SS_74HC595_Pin, GPIO_PIN_RESET); //SPI chip select
 8000194:	2200      	movs	r2, #0
 8000196:	2104      	movs	r1, #4
 8000198:	4807      	ldr	r0, [pc, #28]	; (80001b8 <main+0x6c>)
 800019a:	f000 fc59 	bl	8000a50 <HAL_GPIO_WritePin>
	    HAL_SPI_Transmit(&hspi1, (uint8_t *)spi_buf, 2, 100);
 800019e:	2364      	movs	r3, #100	; 0x64
 80001a0:	2202      	movs	r2, #2
 80001a2:	4906      	ldr	r1, [pc, #24]	; (80001bc <main+0x70>)
 80001a4:	4806      	ldr	r0, [pc, #24]	; (80001c0 <main+0x74>)
 80001a6:	f001 f8d7 	bl	8001358 <HAL_SPI_Transmit>
	    HAL_GPIO_WritePin(SS_74HC595_GPIO_Port, SS_74HC595_Pin, GPIO_PIN_SET); //SPI chip deselecet
 80001aa:	2201      	movs	r2, #1
 80001ac:	2104      	movs	r1, #4
 80001ae:	4802      	ldr	r0, [pc, #8]	; (80001b8 <main+0x6c>)
 80001b0:	f000 fc4e 	bl	8000a50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SS_74HC165_GPIO_Port, SS_74HC165_Pin, GPIO_PIN_RESET); //SPI chip select
 80001b4:	e7de      	b.n	8000174 <main+0x28>
 80001b6:	bf00      	nop
 80001b8:	40010c00 	.word	0x40010c00
 80001bc:	20000028 	.word	0x20000028
 80001c0:	2000002c 	.word	0x2000002c

080001c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b090      	sub	sp, #64	; 0x40
 80001c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ca:	f107 0318 	add.w	r3, r7, #24
 80001ce:	2228      	movs	r2, #40	; 0x28
 80001d0:	2100      	movs	r1, #0
 80001d2:	4618      	mov	r0, r3
 80001d4:	f001 fdcc 	bl	8001d70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	2200      	movs	r2, #0
 80001dc:	601a      	str	r2, [r3, #0]
 80001de:	605a      	str	r2, [r3, #4]
 80001e0:	609a      	str	r2, [r3, #8]
 80001e2:	60da      	str	r2, [r3, #12]
 80001e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001e6:	2302      	movs	r3, #2
 80001e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ea:	2301      	movs	r3, #1
 80001ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ee:	2310      	movs	r3, #16
 80001f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001f2:	2300      	movs	r3, #0
 80001f4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f6:	f107 0318 	add.w	r3, r7, #24
 80001fa:	4618      	mov	r0, r3
 80001fc:	f000 fc40 	bl	8000a80 <HAL_RCC_OscConfig>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d001      	beq.n	800020a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000206:	f000 f88d 	bl	8000324 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800020a:	230f      	movs	r3, #15
 800020c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800020e:	2300      	movs	r3, #0
 8000210:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000212:	2300      	movs	r3, #0
 8000214:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000216:	2300      	movs	r3, #0
 8000218:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800021a:	2300      	movs	r3, #0
 800021c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f000 feac 	bl	8000f80 <HAL_RCC_ClockConfig>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800022e:	f000 f879 	bl	8000324 <Error_Handler>
  }
}
 8000232:	bf00      	nop
 8000234:	3740      	adds	r7, #64	; 0x40
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
	...

0800023c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000240:	4b17      	ldr	r3, [pc, #92]	; (80002a0 <MX_SPI1_Init+0x64>)
 8000242:	4a18      	ldr	r2, [pc, #96]	; (80002a4 <MX_SPI1_Init+0x68>)
 8000244:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000246:	4b16      	ldr	r3, [pc, #88]	; (80002a0 <MX_SPI1_Init+0x64>)
 8000248:	f44f 7282 	mov.w	r2, #260	; 0x104
 800024c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800024e:	4b14      	ldr	r3, [pc, #80]	; (80002a0 <MX_SPI1_Init+0x64>)
 8000250:	2200      	movs	r2, #0
 8000252:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000254:	4b12      	ldr	r3, [pc, #72]	; (80002a0 <MX_SPI1_Init+0x64>)
 8000256:	2200      	movs	r2, #0
 8000258:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800025a:	4b11      	ldr	r3, [pc, #68]	; (80002a0 <MX_SPI1_Init+0x64>)
 800025c:	2200      	movs	r2, #0
 800025e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000260:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <MX_SPI1_Init+0x64>)
 8000262:	2200      	movs	r2, #0
 8000264:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000266:	4b0e      	ldr	r3, [pc, #56]	; (80002a0 <MX_SPI1_Init+0x64>)
 8000268:	f44f 7200 	mov.w	r2, #512	; 0x200
 800026c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800026e:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <MX_SPI1_Init+0x64>)
 8000270:	2200      	movs	r2, #0
 8000272:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000274:	4b0a      	ldr	r3, [pc, #40]	; (80002a0 <MX_SPI1_Init+0x64>)
 8000276:	2200      	movs	r2, #0
 8000278:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800027a:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <MX_SPI1_Init+0x64>)
 800027c:	2200      	movs	r2, #0
 800027e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000280:	4b07      	ldr	r3, [pc, #28]	; (80002a0 <MX_SPI1_Init+0x64>)
 8000282:	2200      	movs	r2, #0
 8000284:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <MX_SPI1_Init+0x64>)
 8000288:	220a      	movs	r2, #10
 800028a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800028c:	4804      	ldr	r0, [pc, #16]	; (80002a0 <MX_SPI1_Init+0x64>)
 800028e:	f000 ffdf 	bl	8001250 <HAL_SPI_Init>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000298:	f000 f844 	bl	8000324 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	2000002c 	.word	0x2000002c
 80002a4:	40013000 	.word	0x40013000

080002a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ae:	f107 0308 	add.w	r3, r7, #8
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002bc:	4b17      	ldr	r3, [pc, #92]	; (800031c <MX_GPIO_Init+0x74>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	4a16      	ldr	r2, [pc, #88]	; (800031c <MX_GPIO_Init+0x74>)
 80002c2:	f043 0304 	orr.w	r3, r3, #4
 80002c6:	6193      	str	r3, [r2, #24]
 80002c8:	4b14      	ldr	r3, [pc, #80]	; (800031c <MX_GPIO_Init+0x74>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	f003 0304 	and.w	r3, r3, #4
 80002d0:	607b      	str	r3, [r7, #4]
 80002d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002d4:	4b11      	ldr	r3, [pc, #68]	; (800031c <MX_GPIO_Init+0x74>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a10      	ldr	r2, [pc, #64]	; (800031c <MX_GPIO_Init+0x74>)
 80002da:	f043 0308 	orr.w	r3, r3, #8
 80002de:	6193      	str	r3, [r2, #24]
 80002e0:	4b0e      	ldr	r3, [pc, #56]	; (800031c <MX_GPIO_Init+0x74>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	f003 0308 	and.w	r3, r3, #8
 80002e8:	603b      	str	r3, [r7, #0]
 80002ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS_74HC165_Pin|SS_74HC595_Pin, GPIO_PIN_RESET);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2106      	movs	r1, #6
 80002f0:	480b      	ldr	r0, [pc, #44]	; (8000320 <MX_GPIO_Init+0x78>)
 80002f2:	f000 fbad 	bl	8000a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SS_74HC165_Pin SS_74HC595_Pin */
  GPIO_InitStruct.Pin = SS_74HC165_Pin|SS_74HC595_Pin;
 80002f6:	2306      	movs	r3, #6
 80002f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002fa:	2301      	movs	r3, #1
 80002fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fe:	2300      	movs	r3, #0
 8000300:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000302:	2302      	movs	r3, #2
 8000304:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000306:	f107 0308 	add.w	r3, r7, #8
 800030a:	4619      	mov	r1, r3
 800030c:	4804      	ldr	r0, [pc, #16]	; (8000320 <MX_GPIO_Init+0x78>)
 800030e:	f000 fa25 	bl	800075c <HAL_GPIO_Init>

}
 8000312:	bf00      	nop
 8000314:	3718      	adds	r7, #24
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40021000 	.word	0x40021000
 8000320:	40010c00 	.word	0x40010c00

08000324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000328:	b672      	cpsid	i
}
 800032a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800032c:	e7fe      	b.n	800032c <Error_Handler+0x8>
	...

08000330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000330:	b480      	push	{r7}
 8000332:	b085      	sub	sp, #20
 8000334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000336:	4b15      	ldr	r3, [pc, #84]	; (800038c <HAL_MspInit+0x5c>)
 8000338:	699b      	ldr	r3, [r3, #24]
 800033a:	4a14      	ldr	r2, [pc, #80]	; (800038c <HAL_MspInit+0x5c>)
 800033c:	f043 0301 	orr.w	r3, r3, #1
 8000340:	6193      	str	r3, [r2, #24]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <HAL_MspInit+0x5c>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	f003 0301 	and.w	r3, r3, #1
 800034a:	60bb      	str	r3, [r7, #8]
 800034c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800034e:	4b0f      	ldr	r3, [pc, #60]	; (800038c <HAL_MspInit+0x5c>)
 8000350:	69db      	ldr	r3, [r3, #28]
 8000352:	4a0e      	ldr	r2, [pc, #56]	; (800038c <HAL_MspInit+0x5c>)
 8000354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000358:	61d3      	str	r3, [r2, #28]
 800035a:	4b0c      	ldr	r3, [pc, #48]	; (800038c <HAL_MspInit+0x5c>)
 800035c:	69db      	ldr	r3, [r3, #28]
 800035e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000366:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <HAL_MspInit+0x60>)
 8000368:	685b      	ldr	r3, [r3, #4]
 800036a:	60fb      	str	r3, [r7, #12]
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000372:	60fb      	str	r3, [r7, #12]
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800037a:	60fb      	str	r3, [r7, #12]
 800037c:	4a04      	ldr	r2, [pc, #16]	; (8000390 <HAL_MspInit+0x60>)
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000382:	bf00      	nop
 8000384:	3714      	adds	r7, #20
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr
 800038c:	40021000 	.word	0x40021000
 8000390:	40010000 	.word	0x40010000

08000394 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b088      	sub	sp, #32
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039c:	f107 0310 	add.w	r3, r7, #16
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	605a      	str	r2, [r3, #4]
 80003a6:	609a      	str	r2, [r3, #8]
 80003a8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4a1b      	ldr	r2, [pc, #108]	; (800041c <HAL_SPI_MspInit+0x88>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d12f      	bne.n	8000414 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80003b4:	4b1a      	ldr	r3, [pc, #104]	; (8000420 <HAL_SPI_MspInit+0x8c>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a19      	ldr	r2, [pc, #100]	; (8000420 <HAL_SPI_MspInit+0x8c>)
 80003ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b17      	ldr	r3, [pc, #92]	; (8000420 <HAL_SPI_MspInit+0x8c>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80003c8:	60fb      	str	r3, [r7, #12]
 80003ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003cc:	4b14      	ldr	r3, [pc, #80]	; (8000420 <HAL_SPI_MspInit+0x8c>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a13      	ldr	r2, [pc, #76]	; (8000420 <HAL_SPI_MspInit+0x8c>)
 80003d2:	f043 0304 	orr.w	r3, r3, #4
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b11      	ldr	r3, [pc, #68]	; (8000420 <HAL_SPI_MspInit+0x8c>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0304 	and.w	r3, r3, #4
 80003e0:	60bb      	str	r3, [r7, #8]
 80003e2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80003e4:	23a0      	movs	r3, #160	; 0xa0
 80003e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003e8:	2302      	movs	r3, #2
 80003ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003ec:	2303      	movs	r3, #3
 80003ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f0:	f107 0310 	add.w	r3, r7, #16
 80003f4:	4619      	mov	r1, r3
 80003f6:	480b      	ldr	r0, [pc, #44]	; (8000424 <HAL_SPI_MspInit+0x90>)
 80003f8:	f000 f9b0 	bl	800075c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80003fc:	2340      	movs	r3, #64	; 0x40
 80003fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000400:	2300      	movs	r3, #0
 8000402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000404:	2300      	movs	r3, #0
 8000406:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000408:	f107 0310 	add.w	r3, r7, #16
 800040c:	4619      	mov	r1, r3
 800040e:	4805      	ldr	r0, [pc, #20]	; (8000424 <HAL_SPI_MspInit+0x90>)
 8000410:	f000 f9a4 	bl	800075c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000414:	bf00      	nop
 8000416:	3720      	adds	r7, #32
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40013000 	.word	0x40013000
 8000420:	40021000 	.word	0x40021000
 8000424:	40010800 	.word	0x40010800

08000428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800042c:	e7fe      	b.n	800042c <NMI_Handler+0x4>

0800042e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000432:	e7fe      	b.n	8000432 <HardFault_Handler+0x4>

08000434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000438:	e7fe      	b.n	8000438 <MemManage_Handler+0x4>

0800043a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800043e:	e7fe      	b.n	800043e <BusFault_Handler+0x4>

08000440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000444:	e7fe      	b.n	8000444 <UsageFault_Handler+0x4>

08000446 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800044a:	bf00      	nop
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr

08000452 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000456:	bf00      	nop
 8000458:	46bd      	mov	sp, r7
 800045a:	bc80      	pop	{r7}
 800045c:	4770      	bx	lr

0800045e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800045e:	b480      	push	{r7}
 8000460:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000462:	bf00      	nop
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr

0800046a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800046a:	b580      	push	{r7, lr}
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800046e:	f000 f875 	bl	800055c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}

08000476 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800047a:	bf00      	nop
 800047c:	46bd      	mov	sp, r7
 800047e:	bc80      	pop	{r7}
 8000480:	4770      	bx	lr
	...

08000484 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000484:	480c      	ldr	r0, [pc, #48]	; (80004b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000486:	490d      	ldr	r1, [pc, #52]	; (80004bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000488:	4a0d      	ldr	r2, [pc, #52]	; (80004c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800048a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800048c:	e002      	b.n	8000494 <LoopCopyDataInit>

0800048e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800048e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000492:	3304      	adds	r3, #4

08000494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000498:	d3f9      	bcc.n	800048e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800049a:	4a0a      	ldr	r2, [pc, #40]	; (80004c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800049c:	4c0a      	ldr	r4, [pc, #40]	; (80004c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800049e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004a0:	e001      	b.n	80004a6 <LoopFillZerobss>

080004a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004a4:	3204      	adds	r2, #4

080004a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004a8:	d3fb      	bcc.n	80004a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004aa:	f7ff ffe4 	bl	8000476 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004ae:	f001 fc3b 	bl	8001d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004b2:	f7ff fe4b 	bl	800014c <main>
  bx lr
 80004b6:	4770      	bx	lr
  ldr r0, =_sdata
 80004b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004c0:	08001dc0 	.word	0x08001dc0
  ldr r2, =_sbss
 80004c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004c8:	20000088 	.word	0x20000088

080004cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004cc:	e7fe      	b.n	80004cc <ADC1_2_IRQHandler>
	...

080004d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <HAL_Init+0x28>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a07      	ldr	r2, [pc, #28]	; (80004f8 <HAL_Init+0x28>)
 80004da:	f043 0310 	orr.w	r3, r3, #16
 80004de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004e0:	2003      	movs	r0, #3
 80004e2:	f000 f907 	bl	80006f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004e6:	200f      	movs	r0, #15
 80004e8:	f000 f808 	bl	80004fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004ec:	f7ff ff20 	bl	8000330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004f0:	2300      	movs	r3, #0
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40022000 	.word	0x40022000

080004fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000504:	4b12      	ldr	r3, [pc, #72]	; (8000550 <HAL_InitTick+0x54>)
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	4b12      	ldr	r3, [pc, #72]	; (8000554 <HAL_InitTick+0x58>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	4619      	mov	r1, r3
 800050e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000512:	fbb3 f3f1 	udiv	r3, r3, r1
 8000516:	fbb2 f3f3 	udiv	r3, r2, r3
 800051a:	4618      	mov	r0, r3
 800051c:	f000 f911 	bl	8000742 <HAL_SYSTICK_Config>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000526:	2301      	movs	r3, #1
 8000528:	e00e      	b.n	8000548 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2b0f      	cmp	r3, #15
 800052e:	d80a      	bhi.n	8000546 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000530:	2200      	movs	r2, #0
 8000532:	6879      	ldr	r1, [r7, #4]
 8000534:	f04f 30ff 	mov.w	r0, #4294967295
 8000538:	f000 f8e7 	bl	800070a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <HAL_InitTick+0x5c>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000542:	2300      	movs	r3, #0
 8000544:	e000      	b.n	8000548 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000546:	2301      	movs	r3, #1
}
 8000548:	4618      	mov	r0, r3
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000000 	.word	0x20000000
 8000554:	20000008 	.word	0x20000008
 8000558:	20000004 	.word	0x20000004

0800055c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <HAL_IncTick+0x1c>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	461a      	mov	r2, r3
 8000566:	4b05      	ldr	r3, [pc, #20]	; (800057c <HAL_IncTick+0x20>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4413      	add	r3, r2
 800056c:	4a03      	ldr	r2, [pc, #12]	; (800057c <HAL_IncTick+0x20>)
 800056e:	6013      	str	r3, [r2, #0]
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	20000008 	.word	0x20000008
 800057c:	20000084 	.word	0x20000084

08000580 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  return uwTick;
 8000584:	4b02      	ldr	r3, [pc, #8]	; (8000590 <HAL_GetTick+0x10>)
 8000586:	681b      	ldr	r3, [r3, #0]
}
 8000588:	4618      	mov	r0, r3
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr
 8000590:	20000084 	.word	0x20000084

08000594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f003 0307 	and.w	r3, r3, #7
 80005a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <__NVIC_SetPriorityGrouping+0x44>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005aa:	68ba      	ldr	r2, [r7, #8]
 80005ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005b0:	4013      	ands	r3, r2
 80005b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005c6:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <__NVIC_SetPriorityGrouping+0x44>)
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	60d3      	str	r3, [r2, #12]
}
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	e000ed00 	.word	0xe000ed00

080005dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005e0:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <__NVIC_GetPriorityGrouping+0x18>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	0a1b      	lsrs	r3, r3, #8
 80005e6:	f003 0307 	and.w	r3, r3, #7
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc80      	pop	{r7}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	e000ed00 	.word	0xe000ed00

080005f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	6039      	str	r1, [r7, #0]
 8000602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000608:	2b00      	cmp	r3, #0
 800060a:	db0a      	blt.n	8000622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	b2da      	uxtb	r2, r3
 8000610:	490c      	ldr	r1, [pc, #48]	; (8000644 <__NVIC_SetPriority+0x4c>)
 8000612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000616:	0112      	lsls	r2, r2, #4
 8000618:	b2d2      	uxtb	r2, r2
 800061a:	440b      	add	r3, r1
 800061c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000620:	e00a      	b.n	8000638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	b2da      	uxtb	r2, r3
 8000626:	4908      	ldr	r1, [pc, #32]	; (8000648 <__NVIC_SetPriority+0x50>)
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	f003 030f 	and.w	r3, r3, #15
 800062e:	3b04      	subs	r3, #4
 8000630:	0112      	lsls	r2, r2, #4
 8000632:	b2d2      	uxtb	r2, r2
 8000634:	440b      	add	r3, r1
 8000636:	761a      	strb	r2, [r3, #24]
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	e000e100 	.word	0xe000e100
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800064c:	b480      	push	{r7}
 800064e:	b089      	sub	sp, #36	; 0x24
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	f003 0307 	and.w	r3, r3, #7
 800065e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000660:	69fb      	ldr	r3, [r7, #28]
 8000662:	f1c3 0307 	rsb	r3, r3, #7
 8000666:	2b04      	cmp	r3, #4
 8000668:	bf28      	it	cs
 800066a:	2304      	movcs	r3, #4
 800066c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800066e:	69fb      	ldr	r3, [r7, #28]
 8000670:	3304      	adds	r3, #4
 8000672:	2b06      	cmp	r3, #6
 8000674:	d902      	bls.n	800067c <NVIC_EncodePriority+0x30>
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	3b03      	subs	r3, #3
 800067a:	e000      	b.n	800067e <NVIC_EncodePriority+0x32>
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000680:	f04f 32ff 	mov.w	r2, #4294967295
 8000684:	69bb      	ldr	r3, [r7, #24]
 8000686:	fa02 f303 	lsl.w	r3, r2, r3
 800068a:	43da      	mvns	r2, r3
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	401a      	ands	r2, r3
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000694:	f04f 31ff 	mov.w	r1, #4294967295
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	fa01 f303 	lsl.w	r3, r1, r3
 800069e:	43d9      	mvns	r1, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a4:	4313      	orrs	r3, r2
         );
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3724      	adds	r7, #36	; 0x24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr

080006b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	3b01      	subs	r3, #1
 80006bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006c0:	d301      	bcc.n	80006c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006c2:	2301      	movs	r3, #1
 80006c4:	e00f      	b.n	80006e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006c6:	4a0a      	ldr	r2, [pc, #40]	; (80006f0 <SysTick_Config+0x40>)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	3b01      	subs	r3, #1
 80006cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006ce:	210f      	movs	r1, #15
 80006d0:	f04f 30ff 	mov.w	r0, #4294967295
 80006d4:	f7ff ff90 	bl	80005f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <SysTick_Config+0x40>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006de:	4b04      	ldr	r3, [pc, #16]	; (80006f0 <SysTick_Config+0x40>)
 80006e0:	2207      	movs	r2, #7
 80006e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	e000e010 	.word	0xe000e010

080006f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f7ff ff49 	bl	8000594 <__NVIC_SetPriorityGrouping>
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800070a:	b580      	push	{r7, lr}
 800070c:	b086      	sub	sp, #24
 800070e:	af00      	add	r7, sp, #0
 8000710:	4603      	mov	r3, r0
 8000712:	60b9      	str	r1, [r7, #8]
 8000714:	607a      	str	r2, [r7, #4]
 8000716:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800071c:	f7ff ff5e 	bl	80005dc <__NVIC_GetPriorityGrouping>
 8000720:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	68b9      	ldr	r1, [r7, #8]
 8000726:	6978      	ldr	r0, [r7, #20]
 8000728:	f7ff ff90 	bl	800064c <NVIC_EncodePriority>
 800072c:	4602      	mov	r2, r0
 800072e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000732:	4611      	mov	r1, r2
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff ff5f 	bl	80005f8 <__NVIC_SetPriority>
}
 800073a:	bf00      	nop
 800073c:	3718      	adds	r7, #24
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000742:	b580      	push	{r7, lr}
 8000744:	b082      	sub	sp, #8
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f7ff ffb0 	bl	80006b0 <SysTick_Config>
 8000750:	4603      	mov	r3, r0
}
 8000752:	4618      	mov	r0, r3
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800075c:	b480      	push	{r7}
 800075e:	b08b      	sub	sp, #44	; 0x2c
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000766:	2300      	movs	r3, #0
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800076a:	2300      	movs	r3, #0
 800076c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800076e:	e148      	b.n	8000a02 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000770:	2201      	movs	r2, #1
 8000772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000774:	fa02 f303 	lsl.w	r3, r2, r3
 8000778:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	69fa      	ldr	r2, [r7, #28]
 8000780:	4013      	ands	r3, r2
 8000782:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000784:	69ba      	ldr	r2, [r7, #24]
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	429a      	cmp	r2, r3
 800078a:	f040 8137 	bne.w	80009fc <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	4aa3      	ldr	r2, [pc, #652]	; (8000a20 <HAL_GPIO_Init+0x2c4>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d05e      	beq.n	8000856 <HAL_GPIO_Init+0xfa>
 8000798:	4aa1      	ldr	r2, [pc, #644]	; (8000a20 <HAL_GPIO_Init+0x2c4>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d875      	bhi.n	800088a <HAL_GPIO_Init+0x12e>
 800079e:	4aa1      	ldr	r2, [pc, #644]	; (8000a24 <HAL_GPIO_Init+0x2c8>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d058      	beq.n	8000856 <HAL_GPIO_Init+0xfa>
 80007a4:	4a9f      	ldr	r2, [pc, #636]	; (8000a24 <HAL_GPIO_Init+0x2c8>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d86f      	bhi.n	800088a <HAL_GPIO_Init+0x12e>
 80007aa:	4a9f      	ldr	r2, [pc, #636]	; (8000a28 <HAL_GPIO_Init+0x2cc>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d052      	beq.n	8000856 <HAL_GPIO_Init+0xfa>
 80007b0:	4a9d      	ldr	r2, [pc, #628]	; (8000a28 <HAL_GPIO_Init+0x2cc>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d869      	bhi.n	800088a <HAL_GPIO_Init+0x12e>
 80007b6:	4a9d      	ldr	r2, [pc, #628]	; (8000a2c <HAL_GPIO_Init+0x2d0>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d04c      	beq.n	8000856 <HAL_GPIO_Init+0xfa>
 80007bc:	4a9b      	ldr	r2, [pc, #620]	; (8000a2c <HAL_GPIO_Init+0x2d0>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d863      	bhi.n	800088a <HAL_GPIO_Init+0x12e>
 80007c2:	4a9b      	ldr	r2, [pc, #620]	; (8000a30 <HAL_GPIO_Init+0x2d4>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d046      	beq.n	8000856 <HAL_GPIO_Init+0xfa>
 80007c8:	4a99      	ldr	r2, [pc, #612]	; (8000a30 <HAL_GPIO_Init+0x2d4>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d85d      	bhi.n	800088a <HAL_GPIO_Init+0x12e>
 80007ce:	2b12      	cmp	r3, #18
 80007d0:	d82a      	bhi.n	8000828 <HAL_GPIO_Init+0xcc>
 80007d2:	2b12      	cmp	r3, #18
 80007d4:	d859      	bhi.n	800088a <HAL_GPIO_Init+0x12e>
 80007d6:	a201      	add	r2, pc, #4	; (adr r2, 80007dc <HAL_GPIO_Init+0x80>)
 80007d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007dc:	08000857 	.word	0x08000857
 80007e0:	08000831 	.word	0x08000831
 80007e4:	08000843 	.word	0x08000843
 80007e8:	08000885 	.word	0x08000885
 80007ec:	0800088b 	.word	0x0800088b
 80007f0:	0800088b 	.word	0x0800088b
 80007f4:	0800088b 	.word	0x0800088b
 80007f8:	0800088b 	.word	0x0800088b
 80007fc:	0800088b 	.word	0x0800088b
 8000800:	0800088b 	.word	0x0800088b
 8000804:	0800088b 	.word	0x0800088b
 8000808:	0800088b 	.word	0x0800088b
 800080c:	0800088b 	.word	0x0800088b
 8000810:	0800088b 	.word	0x0800088b
 8000814:	0800088b 	.word	0x0800088b
 8000818:	0800088b 	.word	0x0800088b
 800081c:	0800088b 	.word	0x0800088b
 8000820:	08000839 	.word	0x08000839
 8000824:	0800084d 	.word	0x0800084d
 8000828:	4a82      	ldr	r2, [pc, #520]	; (8000a34 <HAL_GPIO_Init+0x2d8>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d013      	beq.n	8000856 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800082e:	e02c      	b.n	800088a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	623b      	str	r3, [r7, #32]
          break;
 8000836:	e029      	b.n	800088c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	3304      	adds	r3, #4
 800083e:	623b      	str	r3, [r7, #32]
          break;
 8000840:	e024      	b.n	800088c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	68db      	ldr	r3, [r3, #12]
 8000846:	3308      	adds	r3, #8
 8000848:	623b      	str	r3, [r7, #32]
          break;
 800084a:	e01f      	b.n	800088c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	330c      	adds	r3, #12
 8000852:	623b      	str	r3, [r7, #32]
          break;
 8000854:	e01a      	b.n	800088c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d102      	bne.n	8000864 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800085e:	2304      	movs	r3, #4
 8000860:	623b      	str	r3, [r7, #32]
          break;
 8000862:	e013      	b.n	800088c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d105      	bne.n	8000878 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800086c:	2308      	movs	r3, #8
 800086e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	69fa      	ldr	r2, [r7, #28]
 8000874:	611a      	str	r2, [r3, #16]
          break;
 8000876:	e009      	b.n	800088c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000878:	2308      	movs	r3, #8
 800087a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	69fa      	ldr	r2, [r7, #28]
 8000880:	615a      	str	r2, [r3, #20]
          break;
 8000882:	e003      	b.n	800088c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]
          break;
 8000888:	e000      	b.n	800088c <HAL_GPIO_Init+0x130>
          break;
 800088a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	2bff      	cmp	r3, #255	; 0xff
 8000890:	d801      	bhi.n	8000896 <HAL_GPIO_Init+0x13a>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	e001      	b.n	800089a <HAL_GPIO_Init+0x13e>
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	3304      	adds	r3, #4
 800089a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	2bff      	cmp	r3, #255	; 0xff
 80008a0:	d802      	bhi.n	80008a8 <HAL_GPIO_Init+0x14c>
 80008a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	e002      	b.n	80008ae <HAL_GPIO_Init+0x152>
 80008a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008aa:	3b08      	subs	r3, #8
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	210f      	movs	r1, #15
 80008b6:	693b      	ldr	r3, [r7, #16]
 80008b8:	fa01 f303 	lsl.w	r3, r1, r3
 80008bc:	43db      	mvns	r3, r3
 80008be:	401a      	ands	r2, r3
 80008c0:	6a39      	ldr	r1, [r7, #32]
 80008c2:	693b      	ldr	r3, [r7, #16]
 80008c4:	fa01 f303 	lsl.w	r3, r1, r3
 80008c8:	431a      	orrs	r2, r3
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	f000 8090 	beq.w	80009fc <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008dc:	4b56      	ldr	r3, [pc, #344]	; (8000a38 <HAL_GPIO_Init+0x2dc>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	4a55      	ldr	r2, [pc, #340]	; (8000a38 <HAL_GPIO_Init+0x2dc>)
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	6193      	str	r3, [r2, #24]
 80008e8:	4b53      	ldr	r3, [pc, #332]	; (8000a38 <HAL_GPIO_Init+0x2dc>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80008f4:	4a51      	ldr	r2, [pc, #324]	; (8000a3c <HAL_GPIO_Init+0x2e0>)
 80008f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f8:	089b      	lsrs	r3, r3, #2
 80008fa:	3302      	adds	r3, #2
 80008fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000900:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000904:	f003 0303 	and.w	r3, r3, #3
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	220f      	movs	r2, #15
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	43db      	mvns	r3, r3
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	4013      	ands	r3, r2
 8000916:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a49      	ldr	r2, [pc, #292]	; (8000a40 <HAL_GPIO_Init+0x2e4>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d00d      	beq.n	800093c <HAL_GPIO_Init+0x1e0>
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4a48      	ldr	r2, [pc, #288]	; (8000a44 <HAL_GPIO_Init+0x2e8>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d007      	beq.n	8000938 <HAL_GPIO_Init+0x1dc>
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a47      	ldr	r2, [pc, #284]	; (8000a48 <HAL_GPIO_Init+0x2ec>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d101      	bne.n	8000934 <HAL_GPIO_Init+0x1d8>
 8000930:	2302      	movs	r3, #2
 8000932:	e004      	b.n	800093e <HAL_GPIO_Init+0x1e2>
 8000934:	2303      	movs	r3, #3
 8000936:	e002      	b.n	800093e <HAL_GPIO_Init+0x1e2>
 8000938:	2301      	movs	r3, #1
 800093a:	e000      	b.n	800093e <HAL_GPIO_Init+0x1e2>
 800093c:	2300      	movs	r3, #0
 800093e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000940:	f002 0203 	and.w	r2, r2, #3
 8000944:	0092      	lsls	r2, r2, #2
 8000946:	4093      	lsls	r3, r2
 8000948:	68fa      	ldr	r2, [r7, #12]
 800094a:	4313      	orrs	r3, r2
 800094c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800094e:	493b      	ldr	r1, [pc, #236]	; (8000a3c <HAL_GPIO_Init+0x2e0>)
 8000950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000952:	089b      	lsrs	r3, r3, #2
 8000954:	3302      	adds	r3, #2
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000964:	2b00      	cmp	r3, #0
 8000966:	d006      	beq.n	8000976 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000968:	4b38      	ldr	r3, [pc, #224]	; (8000a4c <HAL_GPIO_Init+0x2f0>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	4937      	ldr	r1, [pc, #220]	; (8000a4c <HAL_GPIO_Init+0x2f0>)
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	4313      	orrs	r3, r2
 8000972:	600b      	str	r3, [r1, #0]
 8000974:	e006      	b.n	8000984 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000976:	4b35      	ldr	r3, [pc, #212]	; (8000a4c <HAL_GPIO_Init+0x2f0>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	69bb      	ldr	r3, [r7, #24]
 800097c:	43db      	mvns	r3, r3
 800097e:	4933      	ldr	r1, [pc, #204]	; (8000a4c <HAL_GPIO_Init+0x2f0>)
 8000980:	4013      	ands	r3, r2
 8000982:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800098c:	2b00      	cmp	r3, #0
 800098e:	d006      	beq.n	800099e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000990:	4b2e      	ldr	r3, [pc, #184]	; (8000a4c <HAL_GPIO_Init+0x2f0>)
 8000992:	685a      	ldr	r2, [r3, #4]
 8000994:	492d      	ldr	r1, [pc, #180]	; (8000a4c <HAL_GPIO_Init+0x2f0>)
 8000996:	69bb      	ldr	r3, [r7, #24]
 8000998:	4313      	orrs	r3, r2
 800099a:	604b      	str	r3, [r1, #4]
 800099c:	e006      	b.n	80009ac <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800099e:	4b2b      	ldr	r3, [pc, #172]	; (8000a4c <HAL_GPIO_Init+0x2f0>)
 80009a0:	685a      	ldr	r2, [r3, #4]
 80009a2:	69bb      	ldr	r3, [r7, #24]
 80009a4:	43db      	mvns	r3, r3
 80009a6:	4929      	ldr	r1, [pc, #164]	; (8000a4c <HAL_GPIO_Init+0x2f0>)
 80009a8:	4013      	ands	r3, r2
 80009aa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d006      	beq.n	80009c6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009b8:	4b24      	ldr	r3, [pc, #144]	; (8000a4c <HAL_GPIO_Init+0x2f0>)
 80009ba:	689a      	ldr	r2, [r3, #8]
 80009bc:	4923      	ldr	r1, [pc, #140]	; (8000a4c <HAL_GPIO_Init+0x2f0>)
 80009be:	69bb      	ldr	r3, [r7, #24]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	608b      	str	r3, [r1, #8]
 80009c4:	e006      	b.n	80009d4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009c6:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <HAL_GPIO_Init+0x2f0>)
 80009c8:	689a      	ldr	r2, [r3, #8]
 80009ca:	69bb      	ldr	r3, [r7, #24]
 80009cc:	43db      	mvns	r3, r3
 80009ce:	491f      	ldr	r1, [pc, #124]	; (8000a4c <HAL_GPIO_Init+0x2f0>)
 80009d0:	4013      	ands	r3, r2
 80009d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d006      	beq.n	80009ee <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80009e0:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <HAL_GPIO_Init+0x2f0>)
 80009e2:	68da      	ldr	r2, [r3, #12]
 80009e4:	4919      	ldr	r1, [pc, #100]	; (8000a4c <HAL_GPIO_Init+0x2f0>)
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	60cb      	str	r3, [r1, #12]
 80009ec:	e006      	b.n	80009fc <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <HAL_GPIO_Init+0x2f0>)
 80009f0:	68da      	ldr	r2, [r3, #12]
 80009f2:	69bb      	ldr	r3, [r7, #24]
 80009f4:	43db      	mvns	r3, r3
 80009f6:	4915      	ldr	r1, [pc, #84]	; (8000a4c <HAL_GPIO_Init+0x2f0>)
 80009f8:	4013      	ands	r3, r2
 80009fa:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80009fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fe:	3301      	adds	r3, #1
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a08:	fa22 f303 	lsr.w	r3, r2, r3
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	f47f aeaf 	bne.w	8000770 <HAL_GPIO_Init+0x14>
  }
}
 8000a12:	bf00      	nop
 8000a14:	bf00      	nop
 8000a16:	372c      	adds	r7, #44	; 0x2c
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	10320000 	.word	0x10320000
 8000a24:	10310000 	.word	0x10310000
 8000a28:	10220000 	.word	0x10220000
 8000a2c:	10210000 	.word	0x10210000
 8000a30:	10120000 	.word	0x10120000
 8000a34:	10110000 	.word	0x10110000
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40010000 	.word	0x40010000
 8000a40:	40010800 	.word	0x40010800
 8000a44:	40010c00 	.word	0x40010c00
 8000a48:	40011000 	.word	0x40011000
 8000a4c:	40010400 	.word	0x40010400

08000a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	460b      	mov	r3, r1
 8000a5a:	807b      	strh	r3, [r7, #2]
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a60:	787b      	ldrb	r3, [r7, #1]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d003      	beq.n	8000a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a66:	887a      	ldrh	r2, [r7, #2]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000a6c:	e003      	b.n	8000a76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a6e:	887b      	ldrh	r3, [r7, #2]
 8000a70:	041a      	lsls	r2, r3, #16
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	611a      	str	r2, [r3, #16]
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr

08000a80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d101      	bne.n	8000a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e26c      	b.n	8000f6c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	f000 8087 	beq.w	8000bae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000aa0:	4b92      	ldr	r3, [pc, #584]	; (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f003 030c 	and.w	r3, r3, #12
 8000aa8:	2b04      	cmp	r3, #4
 8000aaa:	d00c      	beq.n	8000ac6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000aac:	4b8f      	ldr	r3, [pc, #572]	; (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f003 030c 	and.w	r3, r3, #12
 8000ab4:	2b08      	cmp	r3, #8
 8000ab6:	d112      	bne.n	8000ade <HAL_RCC_OscConfig+0x5e>
 8000ab8:	4b8c      	ldr	r3, [pc, #560]	; (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ac4:	d10b      	bne.n	8000ade <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ac6:	4b89      	ldr	r3, [pc, #548]	; (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d06c      	beq.n	8000bac <HAL_RCC_OscConfig+0x12c>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d168      	bne.n	8000bac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e246      	b.n	8000f6c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ae6:	d106      	bne.n	8000af6 <HAL_RCC_OscConfig+0x76>
 8000ae8:	4b80      	ldr	r3, [pc, #512]	; (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a7f      	ldr	r2, [pc, #508]	; (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000af2:	6013      	str	r3, [r2, #0]
 8000af4:	e02e      	b.n	8000b54 <HAL_RCC_OscConfig+0xd4>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d10c      	bne.n	8000b18 <HAL_RCC_OscConfig+0x98>
 8000afe:	4b7b      	ldr	r3, [pc, #492]	; (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a7a      	ldr	r2, [pc, #488]	; (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b08:	6013      	str	r3, [r2, #0]
 8000b0a:	4b78      	ldr	r3, [pc, #480]	; (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a77      	ldr	r2, [pc, #476]	; (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000b10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b14:	6013      	str	r3, [r2, #0]
 8000b16:	e01d      	b.n	8000b54 <HAL_RCC_OscConfig+0xd4>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b20:	d10c      	bne.n	8000b3c <HAL_RCC_OscConfig+0xbc>
 8000b22:	4b72      	ldr	r3, [pc, #456]	; (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a71      	ldr	r2, [pc, #452]	; (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000b28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b2c:	6013      	str	r3, [r2, #0]
 8000b2e:	4b6f      	ldr	r3, [pc, #444]	; (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a6e      	ldr	r2, [pc, #440]	; (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b38:	6013      	str	r3, [r2, #0]
 8000b3a:	e00b      	b.n	8000b54 <HAL_RCC_OscConfig+0xd4>
 8000b3c:	4b6b      	ldr	r3, [pc, #428]	; (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a6a      	ldr	r2, [pc, #424]	; (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b46:	6013      	str	r3, [r2, #0]
 8000b48:	4b68      	ldr	r3, [pc, #416]	; (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a67      	ldr	r2, [pc, #412]	; (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000b4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d013      	beq.n	8000b84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b5c:	f7ff fd10 	bl	8000580 <HAL_GetTick>
 8000b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b62:	e008      	b.n	8000b76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b64:	f7ff fd0c 	bl	8000580 <HAL_GetTick>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	2b64      	cmp	r3, #100	; 0x64
 8000b70:	d901      	bls.n	8000b76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000b72:	2303      	movs	r3, #3
 8000b74:	e1fa      	b.n	8000f6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b76:	4b5d      	ldr	r3, [pc, #372]	; (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d0f0      	beq.n	8000b64 <HAL_RCC_OscConfig+0xe4>
 8000b82:	e014      	b.n	8000bae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b84:	f7ff fcfc 	bl	8000580 <HAL_GetTick>
 8000b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b8a:	e008      	b.n	8000b9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b8c:	f7ff fcf8 	bl	8000580 <HAL_GetTick>
 8000b90:	4602      	mov	r2, r0
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	2b64      	cmp	r3, #100	; 0x64
 8000b98:	d901      	bls.n	8000b9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	e1e6      	b.n	8000f6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b9e:	4b53      	ldr	r3, [pc, #332]	; (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d1f0      	bne.n	8000b8c <HAL_RCC_OscConfig+0x10c>
 8000baa:	e000      	b.n	8000bae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d063      	beq.n	8000c82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000bba:	4b4c      	ldr	r3, [pc, #304]	; (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f003 030c 	and.w	r3, r3, #12
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d00b      	beq.n	8000bde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000bc6:	4b49      	ldr	r3, [pc, #292]	; (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f003 030c 	and.w	r3, r3, #12
 8000bce:	2b08      	cmp	r3, #8
 8000bd0:	d11c      	bne.n	8000c0c <HAL_RCC_OscConfig+0x18c>
 8000bd2:	4b46      	ldr	r3, [pc, #280]	; (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d116      	bne.n	8000c0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bde:	4b43      	ldr	r3, [pc, #268]	; (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d005      	beq.n	8000bf6 <HAL_RCC_OscConfig+0x176>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	691b      	ldr	r3, [r3, #16]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d001      	beq.n	8000bf6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e1ba      	b.n	8000f6c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bf6:	4b3d      	ldr	r3, [pc, #244]	; (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	4939      	ldr	r1, [pc, #228]	; (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000c06:	4313      	orrs	r3, r2
 8000c08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c0a:	e03a      	b.n	8000c82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	691b      	ldr	r3, [r3, #16]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d020      	beq.n	8000c56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c14:	4b36      	ldr	r3, [pc, #216]	; (8000cf0 <HAL_RCC_OscConfig+0x270>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c1a:	f7ff fcb1 	bl	8000580 <HAL_GetTick>
 8000c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c20:	e008      	b.n	8000c34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c22:	f7ff fcad 	bl	8000580 <HAL_GetTick>
 8000c26:	4602      	mov	r2, r0
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d901      	bls.n	8000c34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000c30:	2303      	movs	r3, #3
 8000c32:	e19b      	b.n	8000f6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c34:	4b2d      	ldr	r3, [pc, #180]	; (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f003 0302 	and.w	r3, r3, #2
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d0f0      	beq.n	8000c22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c40:	4b2a      	ldr	r3, [pc, #168]	; (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	695b      	ldr	r3, [r3, #20]
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	4927      	ldr	r1, [pc, #156]	; (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000c50:	4313      	orrs	r3, r2
 8000c52:	600b      	str	r3, [r1, #0]
 8000c54:	e015      	b.n	8000c82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c56:	4b26      	ldr	r3, [pc, #152]	; (8000cf0 <HAL_RCC_OscConfig+0x270>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c5c:	f7ff fc90 	bl	8000580 <HAL_GetTick>
 8000c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c62:	e008      	b.n	8000c76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c64:	f7ff fc8c 	bl	8000580 <HAL_GetTick>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d901      	bls.n	8000c76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000c72:	2303      	movs	r3, #3
 8000c74:	e17a      	b.n	8000f6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c76:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d1f0      	bne.n	8000c64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f003 0308 	and.w	r3, r3, #8
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d03a      	beq.n	8000d04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d019      	beq.n	8000cca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c96:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <HAL_RCC_OscConfig+0x274>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c9c:	f7ff fc70 	bl	8000580 <HAL_GetTick>
 8000ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ca2:	e008      	b.n	8000cb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ca4:	f7ff fc6c 	bl	8000580 <HAL_GetTick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d901      	bls.n	8000cb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e15a      	b.n	8000f6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d0f0      	beq.n	8000ca4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f000 faa6 	bl	8001214 <RCC_Delay>
 8000cc8:	e01c      	b.n	8000d04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cca:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <HAL_RCC_OscConfig+0x274>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cd0:	f7ff fc56 	bl	8000580 <HAL_GetTick>
 8000cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cd6:	e00f      	b.n	8000cf8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cd8:	f7ff fc52 	bl	8000580 <HAL_GetTick>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d908      	bls.n	8000cf8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	e140      	b.n	8000f6c <HAL_RCC_OscConfig+0x4ec>
 8000cea:	bf00      	nop
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	42420000 	.word	0x42420000
 8000cf4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cf8:	4b9e      	ldr	r3, [pc, #632]	; (8000f74 <HAL_RCC_OscConfig+0x4f4>)
 8000cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cfc:	f003 0302 	and.w	r3, r3, #2
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d1e9      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f003 0304 	and.w	r3, r3, #4
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	f000 80a6 	beq.w	8000e5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d12:	2300      	movs	r3, #0
 8000d14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d16:	4b97      	ldr	r3, [pc, #604]	; (8000f74 <HAL_RCC_OscConfig+0x4f4>)
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d10d      	bne.n	8000d3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d22:	4b94      	ldr	r3, [pc, #592]	; (8000f74 <HAL_RCC_OscConfig+0x4f4>)
 8000d24:	69db      	ldr	r3, [r3, #28]
 8000d26:	4a93      	ldr	r2, [pc, #588]	; (8000f74 <HAL_RCC_OscConfig+0x4f4>)
 8000d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d2c:	61d3      	str	r3, [r2, #28]
 8000d2e:	4b91      	ldr	r3, [pc, #580]	; (8000f74 <HAL_RCC_OscConfig+0x4f4>)
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d3e:	4b8e      	ldr	r3, [pc, #568]	; (8000f78 <HAL_RCC_OscConfig+0x4f8>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d118      	bne.n	8000d7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d4a:	4b8b      	ldr	r3, [pc, #556]	; (8000f78 <HAL_RCC_OscConfig+0x4f8>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a8a      	ldr	r2, [pc, #552]	; (8000f78 <HAL_RCC_OscConfig+0x4f8>)
 8000d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d56:	f7ff fc13 	bl	8000580 <HAL_GetTick>
 8000d5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d5c:	e008      	b.n	8000d70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d5e:	f7ff fc0f 	bl	8000580 <HAL_GetTick>
 8000d62:	4602      	mov	r2, r0
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	2b64      	cmp	r3, #100	; 0x64
 8000d6a:	d901      	bls.n	8000d70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	e0fd      	b.n	8000f6c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d70:	4b81      	ldr	r3, [pc, #516]	; (8000f78 <HAL_RCC_OscConfig+0x4f8>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d0f0      	beq.n	8000d5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d106      	bne.n	8000d92 <HAL_RCC_OscConfig+0x312>
 8000d84:	4b7b      	ldr	r3, [pc, #492]	; (8000f74 <HAL_RCC_OscConfig+0x4f4>)
 8000d86:	6a1b      	ldr	r3, [r3, #32]
 8000d88:	4a7a      	ldr	r2, [pc, #488]	; (8000f74 <HAL_RCC_OscConfig+0x4f4>)
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	6213      	str	r3, [r2, #32]
 8000d90:	e02d      	b.n	8000dee <HAL_RCC_OscConfig+0x36e>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d10c      	bne.n	8000db4 <HAL_RCC_OscConfig+0x334>
 8000d9a:	4b76      	ldr	r3, [pc, #472]	; (8000f74 <HAL_RCC_OscConfig+0x4f4>)
 8000d9c:	6a1b      	ldr	r3, [r3, #32]
 8000d9e:	4a75      	ldr	r2, [pc, #468]	; (8000f74 <HAL_RCC_OscConfig+0x4f4>)
 8000da0:	f023 0301 	bic.w	r3, r3, #1
 8000da4:	6213      	str	r3, [r2, #32]
 8000da6:	4b73      	ldr	r3, [pc, #460]	; (8000f74 <HAL_RCC_OscConfig+0x4f4>)
 8000da8:	6a1b      	ldr	r3, [r3, #32]
 8000daa:	4a72      	ldr	r2, [pc, #456]	; (8000f74 <HAL_RCC_OscConfig+0x4f4>)
 8000dac:	f023 0304 	bic.w	r3, r3, #4
 8000db0:	6213      	str	r3, [r2, #32]
 8000db2:	e01c      	b.n	8000dee <HAL_RCC_OscConfig+0x36e>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	2b05      	cmp	r3, #5
 8000dba:	d10c      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x356>
 8000dbc:	4b6d      	ldr	r3, [pc, #436]	; (8000f74 <HAL_RCC_OscConfig+0x4f4>)
 8000dbe:	6a1b      	ldr	r3, [r3, #32]
 8000dc0:	4a6c      	ldr	r2, [pc, #432]	; (8000f74 <HAL_RCC_OscConfig+0x4f4>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	6213      	str	r3, [r2, #32]
 8000dc8:	4b6a      	ldr	r3, [pc, #424]	; (8000f74 <HAL_RCC_OscConfig+0x4f4>)
 8000dca:	6a1b      	ldr	r3, [r3, #32]
 8000dcc:	4a69      	ldr	r2, [pc, #420]	; (8000f74 <HAL_RCC_OscConfig+0x4f4>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	6213      	str	r3, [r2, #32]
 8000dd4:	e00b      	b.n	8000dee <HAL_RCC_OscConfig+0x36e>
 8000dd6:	4b67      	ldr	r3, [pc, #412]	; (8000f74 <HAL_RCC_OscConfig+0x4f4>)
 8000dd8:	6a1b      	ldr	r3, [r3, #32]
 8000dda:	4a66      	ldr	r2, [pc, #408]	; (8000f74 <HAL_RCC_OscConfig+0x4f4>)
 8000ddc:	f023 0301 	bic.w	r3, r3, #1
 8000de0:	6213      	str	r3, [r2, #32]
 8000de2:	4b64      	ldr	r3, [pc, #400]	; (8000f74 <HAL_RCC_OscConfig+0x4f4>)
 8000de4:	6a1b      	ldr	r3, [r3, #32]
 8000de6:	4a63      	ldr	r2, [pc, #396]	; (8000f74 <HAL_RCC_OscConfig+0x4f4>)
 8000de8:	f023 0304 	bic.w	r3, r3, #4
 8000dec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d015      	beq.n	8000e22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000df6:	f7ff fbc3 	bl	8000580 <HAL_GetTick>
 8000dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dfc:	e00a      	b.n	8000e14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dfe:	f7ff fbbf 	bl	8000580 <HAL_GetTick>
 8000e02:	4602      	mov	r2, r0
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d901      	bls.n	8000e14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e10:	2303      	movs	r3, #3
 8000e12:	e0ab      	b.n	8000f6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e14:	4b57      	ldr	r3, [pc, #348]	; (8000f74 <HAL_RCC_OscConfig+0x4f4>)
 8000e16:	6a1b      	ldr	r3, [r3, #32]
 8000e18:	f003 0302 	and.w	r3, r3, #2
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d0ee      	beq.n	8000dfe <HAL_RCC_OscConfig+0x37e>
 8000e20:	e014      	b.n	8000e4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e22:	f7ff fbad 	bl	8000580 <HAL_GetTick>
 8000e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e28:	e00a      	b.n	8000e40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e2a:	f7ff fba9 	bl	8000580 <HAL_GetTick>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d901      	bls.n	8000e40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	e095      	b.n	8000f6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e40:	4b4c      	ldr	r3, [pc, #304]	; (8000f74 <HAL_RCC_OscConfig+0x4f4>)
 8000e42:	6a1b      	ldr	r3, [r3, #32]
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d1ee      	bne.n	8000e2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000e4c:	7dfb      	ldrb	r3, [r7, #23]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d105      	bne.n	8000e5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e52:	4b48      	ldr	r3, [pc, #288]	; (8000f74 <HAL_RCC_OscConfig+0x4f4>)
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	4a47      	ldr	r2, [pc, #284]	; (8000f74 <HAL_RCC_OscConfig+0x4f4>)
 8000e58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f000 8081 	beq.w	8000f6a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e68:	4b42      	ldr	r3, [pc, #264]	; (8000f74 <HAL_RCC_OscConfig+0x4f4>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 030c 	and.w	r3, r3, #12
 8000e70:	2b08      	cmp	r3, #8
 8000e72:	d061      	beq.n	8000f38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	69db      	ldr	r3, [r3, #28]
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d146      	bne.n	8000f0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e7c:	4b3f      	ldr	r3, [pc, #252]	; (8000f7c <HAL_RCC_OscConfig+0x4fc>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e82:	f7ff fb7d 	bl	8000580 <HAL_GetTick>
 8000e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e88:	e008      	b.n	8000e9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e8a:	f7ff fb79 	bl	8000580 <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d901      	bls.n	8000e9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e067      	b.n	8000f6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e9c:	4b35      	ldr	r3, [pc, #212]	; (8000f74 <HAL_RCC_OscConfig+0x4f4>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d1f0      	bne.n	8000e8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a1b      	ldr	r3, [r3, #32]
 8000eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eb0:	d108      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000eb2:	4b30      	ldr	r3, [pc, #192]	; (8000f74 <HAL_RCC_OscConfig+0x4f4>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	492d      	ldr	r1, [pc, #180]	; (8000f74 <HAL_RCC_OscConfig+0x4f4>)
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ec4:	4b2b      	ldr	r3, [pc, #172]	; (8000f74 <HAL_RCC_OscConfig+0x4f4>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6a19      	ldr	r1, [r3, #32]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed4:	430b      	orrs	r3, r1
 8000ed6:	4927      	ldr	r1, [pc, #156]	; (8000f74 <HAL_RCC_OscConfig+0x4f4>)
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000edc:	4b27      	ldr	r3, [pc, #156]	; (8000f7c <HAL_RCC_OscConfig+0x4fc>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee2:	f7ff fb4d 	bl	8000580 <HAL_GetTick>
 8000ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ee8:	e008      	b.n	8000efc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000eea:	f7ff fb49 	bl	8000580 <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d901      	bls.n	8000efc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e037      	b.n	8000f6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000efc:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <HAL_RCC_OscConfig+0x4f4>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d0f0      	beq.n	8000eea <HAL_RCC_OscConfig+0x46a>
 8000f08:	e02f      	b.n	8000f6a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f0a:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <HAL_RCC_OscConfig+0x4fc>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f10:	f7ff fb36 	bl	8000580 <HAL_GetTick>
 8000f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f16:	e008      	b.n	8000f2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f18:	f7ff fb32 	bl	8000580 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e020      	b.n	8000f6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f2a:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_RCC_OscConfig+0x4f4>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1f0      	bne.n	8000f18 <HAL_RCC_OscConfig+0x498>
 8000f36:	e018      	b.n	8000f6a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69db      	ldr	r3, [r3, #28]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d101      	bne.n	8000f44 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e013      	b.n	8000f6c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f44:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <HAL_RCC_OscConfig+0x4f4>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a1b      	ldr	r3, [r3, #32]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d106      	bne.n	8000f66 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d001      	beq.n	8000f6a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e000      	b.n	8000f6c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40007000 	.word	0x40007000
 8000f7c:	42420060 	.word	0x42420060

08000f80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e0d0      	b.n	8001136 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f94:	4b6a      	ldr	r3, [pc, #424]	; (8001140 <HAL_RCC_ClockConfig+0x1c0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0307 	and.w	r3, r3, #7
 8000f9c:	683a      	ldr	r2, [r7, #0]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d910      	bls.n	8000fc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fa2:	4b67      	ldr	r3, [pc, #412]	; (8001140 <HAL_RCC_ClockConfig+0x1c0>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f023 0207 	bic.w	r2, r3, #7
 8000faa:	4965      	ldr	r1, [pc, #404]	; (8001140 <HAL_RCC_ClockConfig+0x1c0>)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fb2:	4b63      	ldr	r3, [pc, #396]	; (8001140 <HAL_RCC_ClockConfig+0x1c0>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	683a      	ldr	r2, [r7, #0]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d001      	beq.n	8000fc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e0b8      	b.n	8001136 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d020      	beq.n	8001012 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0304 	and.w	r3, r3, #4
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d005      	beq.n	8000fe8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fdc:	4b59      	ldr	r3, [pc, #356]	; (8001144 <HAL_RCC_ClockConfig+0x1c4>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	4a58      	ldr	r2, [pc, #352]	; (8001144 <HAL_RCC_ClockConfig+0x1c4>)
 8000fe2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000fe6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 0308 	and.w	r3, r3, #8
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d005      	beq.n	8001000 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ff4:	4b53      	ldr	r3, [pc, #332]	; (8001144 <HAL_RCC_ClockConfig+0x1c4>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	4a52      	ldr	r2, [pc, #328]	; (8001144 <HAL_RCC_ClockConfig+0x1c4>)
 8000ffa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000ffe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001000:	4b50      	ldr	r3, [pc, #320]	; (8001144 <HAL_RCC_ClockConfig+0x1c4>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	494d      	ldr	r1, [pc, #308]	; (8001144 <HAL_RCC_ClockConfig+0x1c4>)
 800100e:	4313      	orrs	r3, r2
 8001010:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	2b00      	cmp	r3, #0
 800101c:	d040      	beq.n	80010a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d107      	bne.n	8001036 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001026:	4b47      	ldr	r3, [pc, #284]	; (8001144 <HAL_RCC_ClockConfig+0x1c4>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d115      	bne.n	800105e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e07f      	b.n	8001136 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	2b02      	cmp	r3, #2
 800103c:	d107      	bne.n	800104e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800103e:	4b41      	ldr	r3, [pc, #260]	; (8001144 <HAL_RCC_ClockConfig+0x1c4>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d109      	bne.n	800105e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e073      	b.n	8001136 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800104e:	4b3d      	ldr	r3, [pc, #244]	; (8001144 <HAL_RCC_ClockConfig+0x1c4>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e06b      	b.n	8001136 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800105e:	4b39      	ldr	r3, [pc, #228]	; (8001144 <HAL_RCC_ClockConfig+0x1c4>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f023 0203 	bic.w	r2, r3, #3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	4936      	ldr	r1, [pc, #216]	; (8001144 <HAL_RCC_ClockConfig+0x1c4>)
 800106c:	4313      	orrs	r3, r2
 800106e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001070:	f7ff fa86 	bl	8000580 <HAL_GetTick>
 8001074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001076:	e00a      	b.n	800108e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001078:	f7ff fa82 	bl	8000580 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	f241 3288 	movw	r2, #5000	; 0x1388
 8001086:	4293      	cmp	r3, r2
 8001088:	d901      	bls.n	800108e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e053      	b.n	8001136 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800108e:	4b2d      	ldr	r3, [pc, #180]	; (8001144 <HAL_RCC_ClockConfig+0x1c4>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 020c 	and.w	r2, r3, #12
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	429a      	cmp	r2, r3
 800109e:	d1eb      	bne.n	8001078 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80010a0:	4b27      	ldr	r3, [pc, #156]	; (8001140 <HAL_RCC_ClockConfig+0x1c0>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0307 	and.w	r3, r3, #7
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d210      	bcs.n	80010d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ae:	4b24      	ldr	r3, [pc, #144]	; (8001140 <HAL_RCC_ClockConfig+0x1c0>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f023 0207 	bic.w	r2, r3, #7
 80010b6:	4922      	ldr	r1, [pc, #136]	; (8001140 <HAL_RCC_ClockConfig+0x1c0>)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010be:	4b20      	ldr	r3, [pc, #128]	; (8001140 <HAL_RCC_ClockConfig+0x1c0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	683a      	ldr	r2, [r7, #0]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d001      	beq.n	80010d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e032      	b.n	8001136 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0304 	and.w	r3, r3, #4
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d008      	beq.n	80010ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010dc:	4b19      	ldr	r3, [pc, #100]	; (8001144 <HAL_RCC_ClockConfig+0x1c4>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	4916      	ldr	r1, [pc, #88]	; (8001144 <HAL_RCC_ClockConfig+0x1c4>)
 80010ea:	4313      	orrs	r3, r2
 80010ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0308 	and.w	r3, r3, #8
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d009      	beq.n	800110e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80010fa:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_RCC_ClockConfig+0x1c4>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	691b      	ldr	r3, [r3, #16]
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	490e      	ldr	r1, [pc, #56]	; (8001144 <HAL_RCC_ClockConfig+0x1c4>)
 800110a:	4313      	orrs	r3, r2
 800110c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800110e:	f000 f821 	bl	8001154 <HAL_RCC_GetSysClockFreq>
 8001112:	4602      	mov	r2, r0
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <HAL_RCC_ClockConfig+0x1c4>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	091b      	lsrs	r3, r3, #4
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	490a      	ldr	r1, [pc, #40]	; (8001148 <HAL_RCC_ClockConfig+0x1c8>)
 8001120:	5ccb      	ldrb	r3, [r1, r3]
 8001122:	fa22 f303 	lsr.w	r3, r2, r3
 8001126:	4a09      	ldr	r2, [pc, #36]	; (800114c <HAL_RCC_ClockConfig+0x1cc>)
 8001128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <HAL_RCC_ClockConfig+0x1d0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff f9e4 	bl	80004fc <HAL_InitTick>

  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40022000 	.word	0x40022000
 8001144:	40021000 	.word	0x40021000
 8001148:	08001da8 	.word	0x08001da8
 800114c:	20000000 	.word	0x20000000
 8001150:	20000004 	.word	0x20000004

08001154 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001154:	b490      	push	{r4, r7}
 8001156:	b08a      	sub	sp, #40	; 0x28
 8001158:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800115a:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <HAL_RCC_GetSysClockFreq+0xb0>)
 800115c:	1d3c      	adds	r4, r7, #4
 800115e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001160:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001164:	f240 2301 	movw	r3, #513	; 0x201
 8001168:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
 800116e:	2300      	movs	r3, #0
 8001170:	61bb      	str	r3, [r7, #24]
 8001172:	2300      	movs	r3, #0
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800117e:	4b22      	ldr	r3, [pc, #136]	; (8001208 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f003 030c 	and.w	r3, r3, #12
 800118a:	2b04      	cmp	r3, #4
 800118c:	d002      	beq.n	8001194 <HAL_RCC_GetSysClockFreq+0x40>
 800118e:	2b08      	cmp	r3, #8
 8001190:	d003      	beq.n	800119a <HAL_RCC_GetSysClockFreq+0x46>
 8001192:	e02d      	b.n	80011f0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001194:	4b1d      	ldr	r3, [pc, #116]	; (800120c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001196:	623b      	str	r3, [r7, #32]
      break;
 8001198:	e02d      	b.n	80011f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	0c9b      	lsrs	r3, r3, #18
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80011a6:	4413      	add	r3, r2
 80011a8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011ac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d013      	beq.n	80011e0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <HAL_RCC_GetSysClockFreq+0xb4>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	0c5b      	lsrs	r3, r3, #17
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80011c6:	4413      	add	r3, r2
 80011c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80011cc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	4a0e      	ldr	r2, [pc, #56]	; (800120c <HAL_RCC_GetSysClockFreq+0xb8>)
 80011d2:	fb02 f203 	mul.w	r2, r2, r3
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
 80011de:	e004      	b.n	80011ea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <HAL_RCC_GetSysClockFreq+0xbc>)
 80011e4:	fb02 f303 	mul.w	r3, r2, r3
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80011ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ec:	623b      	str	r3, [r7, #32]
      break;
 80011ee:	e002      	b.n	80011f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_RCC_GetSysClockFreq+0xb8>)
 80011f2:	623b      	str	r3, [r7, #32]
      break;
 80011f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80011f6:	6a3b      	ldr	r3, [r7, #32]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3728      	adds	r7, #40	; 0x28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc90      	pop	{r4, r7}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	08001d98 	.word	0x08001d98
 8001208:	40021000 	.word	0x40021000
 800120c:	007a1200 	.word	0x007a1200
 8001210:	003d0900 	.word	0x003d0900

08001214 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <RCC_Delay+0x34>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0a      	ldr	r2, [pc, #40]	; (800124c <RCC_Delay+0x38>)
 8001222:	fba2 2303 	umull	r2, r3, r2, r3
 8001226:	0a5b      	lsrs	r3, r3, #9
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	fb02 f303 	mul.w	r3, r2, r3
 800122e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001230:	bf00      	nop
  }
  while (Delay --);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	1e5a      	subs	r2, r3, #1
 8001236:	60fa      	str	r2, [r7, #12]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1f9      	bne.n	8001230 <RCC_Delay+0x1c>
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr
 8001248:	20000000 	.word	0x20000000
 800124c:	10624dd3 	.word	0x10624dd3

08001250 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e076      	b.n	8001350 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001266:	2b00      	cmp	r3, #0
 8001268:	d108      	bne.n	800127c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001272:	d009      	beq.n	8001288 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
 800127a:	e005      	b.n	8001288 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d106      	bne.n	80012a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff f876 	bl	8000394 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2202      	movs	r2, #2
 80012ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80012d0:	431a      	orrs	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012da:	431a      	orrs	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	431a      	orrs	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	431a      	orrs	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012f8:	431a      	orrs	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001302:	431a      	orrs	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a1b      	ldr	r3, [r3, #32]
 8001308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800130c:	ea42 0103 	orr.w	r1, r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001314:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	430a      	orrs	r2, r1
 800131e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	0c1a      	lsrs	r2, r3, #16
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f002 0204 	and.w	r2, r2, #4
 800132e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	69da      	ldr	r2, [r3, #28]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800133e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	4613      	mov	r3, r2
 8001366:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001368:	2300      	movs	r3, #0
 800136a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001372:	2b01      	cmp	r3, #1
 8001374:	d101      	bne.n	800137a <HAL_SPI_Transmit+0x22>
 8001376:	2302      	movs	r3, #2
 8001378:	e126      	b.n	80015c8 <HAL_SPI_Transmit+0x270>
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001382:	f7ff f8fd 	bl	8000580 <HAL_GetTick>
 8001386:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2b01      	cmp	r3, #1
 8001396:	d002      	beq.n	800139e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001398:	2302      	movs	r3, #2
 800139a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800139c:	e10b      	b.n	80015b6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d002      	beq.n	80013aa <HAL_SPI_Transmit+0x52>
 80013a4:	88fb      	ldrh	r3, [r7, #6]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d102      	bne.n	80013b0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80013ae:	e102      	b.n	80015b6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2203      	movs	r2, #3
 80013b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2200      	movs	r2, #0
 80013bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	88fa      	ldrh	r2, [r7, #6]
 80013c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	88fa      	ldrh	r2, [r7, #6]
 80013ce:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2200      	movs	r2, #0
 80013d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2200      	movs	r2, #0
 80013da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2200      	movs	r2, #0
 80013e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2200      	movs	r2, #0
 80013e6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2200      	movs	r2, #0
 80013ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013f6:	d10f      	bne.n	8001418 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001406:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001416:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001422:	2b40      	cmp	r3, #64	; 0x40
 8001424:	d007      	beq.n	8001436 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001434:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800143e:	d14b      	bne.n	80014d8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d002      	beq.n	800144e <HAL_SPI_Transmit+0xf6>
 8001448:	8afb      	ldrh	r3, [r7, #22]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d13e      	bne.n	80014cc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	881a      	ldrh	r2, [r3, #0]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	1c9a      	adds	r2, r3, #2
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001468:	b29b      	uxth	r3, r3
 800146a:	3b01      	subs	r3, #1
 800146c:	b29a      	uxth	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001472:	e02b      	b.n	80014cc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b02      	cmp	r3, #2
 8001480:	d112      	bne.n	80014a8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	881a      	ldrh	r2, [r3, #0]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	1c9a      	adds	r2, r3, #2
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800149c:	b29b      	uxth	r3, r3
 800149e:	3b01      	subs	r3, #1
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80014a6:	e011      	b.n	80014cc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80014a8:	f7ff f86a 	bl	8000580 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d803      	bhi.n	80014c0 <HAL_SPI_Transmit+0x168>
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014be:	d102      	bne.n	80014c6 <HAL_SPI_Transmit+0x16e>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d102      	bne.n	80014cc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80014ca:	e074      	b.n	80015b6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1ce      	bne.n	8001474 <HAL_SPI_Transmit+0x11c>
 80014d6:	e04c      	b.n	8001572 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d002      	beq.n	80014e6 <HAL_SPI_Transmit+0x18e>
 80014e0:	8afb      	ldrh	r3, [r7, #22]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d140      	bne.n	8001568 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	330c      	adds	r3, #12
 80014f0:	7812      	ldrb	r2, [r2, #0]
 80014f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f8:	1c5a      	adds	r2, r3, #1
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001502:	b29b      	uxth	r3, r3
 8001504:	3b01      	subs	r3, #1
 8001506:	b29a      	uxth	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800150c:	e02c      	b.n	8001568 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b02      	cmp	r3, #2
 800151a:	d113      	bne.n	8001544 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	330c      	adds	r3, #12
 8001526:	7812      	ldrb	r2, [r2, #0]
 8001528:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	1c5a      	adds	r2, r3, #1
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001538:	b29b      	uxth	r3, r3
 800153a:	3b01      	subs	r3, #1
 800153c:	b29a      	uxth	r2, r3
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	86da      	strh	r2, [r3, #54]	; 0x36
 8001542:	e011      	b.n	8001568 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001544:	f7ff f81c 	bl	8000580 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d803      	bhi.n	800155c <HAL_SPI_Transmit+0x204>
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800155a:	d102      	bne.n	8001562 <HAL_SPI_Transmit+0x20a>
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d102      	bne.n	8001568 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001566:	e026      	b.n	80015b6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800156c:	b29b      	uxth	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1cd      	bne.n	800150e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	6839      	ldr	r1, [r7, #0]
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f000 fbb8 	bl	8001cec <SPI_EndRxTxTransaction>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d002      	beq.n	8001588 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2220      	movs	r2, #32
 8001586:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d10a      	bne.n	80015a6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001590:	2300      	movs	r3, #0
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d002      	beq.n	80015b4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	77fb      	strb	r3, [r7, #31]
 80015b2:	e000      	b.n	80015b6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80015b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80015c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3720      	adds	r7, #32
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af02      	add	r7, sp, #8
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	4613      	mov	r3, r2
 80015de:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80015ec:	d112      	bne.n	8001614 <HAL_SPI_Receive+0x44>
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10e      	bne.n	8001614 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2204      	movs	r2, #4
 80015fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80015fe:	88fa      	ldrh	r2, [r7, #6]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	4613      	mov	r3, r2
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	68b9      	ldr	r1, [r7, #8]
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f000 f8f1 	bl	80017f2 <HAL_SPI_TransmitReceive>
 8001610:	4603      	mov	r3, r0
 8001612:	e0ea      	b.n	80017ea <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800161a:	2b01      	cmp	r3, #1
 800161c:	d101      	bne.n	8001622 <HAL_SPI_Receive+0x52>
 800161e:	2302      	movs	r3, #2
 8001620:	e0e3      	b.n	80017ea <HAL_SPI_Receive+0x21a>
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2201      	movs	r2, #1
 8001626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800162a:	f7fe ffa9 	bl	8000580 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b01      	cmp	r3, #1
 800163a:	d002      	beq.n	8001642 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800163c:	2302      	movs	r3, #2
 800163e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001640:	e0ca      	b.n	80017d8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d002      	beq.n	800164e <HAL_SPI_Receive+0x7e>
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d102      	bne.n	8001654 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001652:	e0c1      	b.n	80017d8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2204      	movs	r2, #4
 8001658:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2200      	movs	r2, #0
 8001660:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	88fa      	ldrh	r2, [r7, #6]
 800166c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	88fa      	ldrh	r2, [r7, #6]
 8001672:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2200      	movs	r2, #0
 8001678:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2200      	movs	r2, #0
 800167e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2200      	movs	r2, #0
 8001684:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2200      	movs	r2, #0
 800168a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2200      	movs	r2, #0
 8001690:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800169a:	d10f      	bne.n	80016bc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80016ba:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016c6:	2b40      	cmp	r3, #64	; 0x40
 80016c8:	d007      	beq.n	80016da <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016d8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d162      	bne.n	80017a8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80016e2:	e02e      	b.n	8001742 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d115      	bne.n	800171e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f103 020c 	add.w	r2, r3, #12
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016fe:	7812      	ldrb	r2, [r2, #0]
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001708:	1c5a      	adds	r2, r3, #1
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001712:	b29b      	uxth	r3, r3
 8001714:	3b01      	subs	r3, #1
 8001716:	b29a      	uxth	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800171c:	e011      	b.n	8001742 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800171e:	f7fe ff2f 	bl	8000580 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d803      	bhi.n	8001736 <HAL_SPI_Receive+0x166>
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001734:	d102      	bne.n	800173c <HAL_SPI_Receive+0x16c>
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d102      	bne.n	8001742 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001740:	e04a      	b.n	80017d8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001746:	b29b      	uxth	r3, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1cb      	bne.n	80016e4 <HAL_SPI_Receive+0x114>
 800174c:	e031      	b.n	80017b2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	2b01      	cmp	r3, #1
 800175a:	d113      	bne.n	8001784 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68da      	ldr	r2, [r3, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001766:	b292      	uxth	r2, r2
 8001768:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800176e:	1c9a      	adds	r2, r3, #2
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001778:	b29b      	uxth	r3, r3
 800177a:	3b01      	subs	r3, #1
 800177c:	b29a      	uxth	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001782:	e011      	b.n	80017a8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001784:	f7fe fefc 	bl	8000580 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	429a      	cmp	r2, r3
 8001792:	d803      	bhi.n	800179c <HAL_SPI_Receive+0x1cc>
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179a:	d102      	bne.n	80017a2 <HAL_SPI_Receive+0x1d2>
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d102      	bne.n	80017a8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80017a6:	e017      	b.n	80017d8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1cd      	bne.n	800174e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	6839      	ldr	r1, [r7, #0]
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f000 fa46 	bl	8001c48 <SPI_EndRxTransaction>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d002      	beq.n	80017c8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2220      	movs	r2, #32
 80017c6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d002      	beq.n	80017d6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	75fb      	strb	r3, [r7, #23]
 80017d4:	e000      	b.n	80017d8 <HAL_SPI_Receive+0x208>
  }

error :
 80017d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80017e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b08c      	sub	sp, #48	; 0x30
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
 80017fe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001800:	2301      	movs	r3, #1
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001804:	2300      	movs	r3, #0
 8001806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001810:	2b01      	cmp	r3, #1
 8001812:	d101      	bne.n	8001818 <HAL_SPI_TransmitReceive+0x26>
 8001814:	2302      	movs	r3, #2
 8001816:	e18a      	b.n	8001b2e <HAL_SPI_TransmitReceive+0x33c>
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001820:	f7fe feae 	bl	8000580 <HAL_GetTick>
 8001824:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800182c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001836:	887b      	ldrh	r3, [r7, #2]
 8001838:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800183a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800183e:	2b01      	cmp	r3, #1
 8001840:	d00f      	beq.n	8001862 <HAL_SPI_TransmitReceive+0x70>
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001848:	d107      	bne.n	800185a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d103      	bne.n	800185a <HAL_SPI_TransmitReceive+0x68>
 8001852:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001856:	2b04      	cmp	r3, #4
 8001858:	d003      	beq.n	8001862 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800185a:	2302      	movs	r3, #2
 800185c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001860:	e15b      	b.n	8001b1a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d005      	beq.n	8001874 <HAL_SPI_TransmitReceive+0x82>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d002      	beq.n	8001874 <HAL_SPI_TransmitReceive+0x82>
 800186e:	887b      	ldrh	r3, [r7, #2]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d103      	bne.n	800187c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800187a:	e14e      	b.n	8001b1a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b04      	cmp	r3, #4
 8001886:	d003      	beq.n	8001890 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2205      	movs	r2, #5
 800188c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2200      	movs	r2, #0
 8001894:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	887a      	ldrh	r2, [r7, #2]
 80018a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	887a      	ldrh	r2, [r7, #2]
 80018a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	887a      	ldrh	r2, [r7, #2]
 80018b2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	887a      	ldrh	r2, [r7, #2]
 80018b8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2200      	movs	r2, #0
 80018be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d0:	2b40      	cmp	r3, #64	; 0x40
 80018d2:	d007      	beq.n	80018e4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018ec:	d178      	bne.n	80019e0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d002      	beq.n	80018fc <HAL_SPI_TransmitReceive+0x10a>
 80018f6:	8b7b      	ldrh	r3, [r7, #26]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d166      	bne.n	80019ca <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001900:	881a      	ldrh	r2, [r3, #0]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190c:	1c9a      	adds	r2, r3, #2
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001916:	b29b      	uxth	r3, r3
 8001918:	3b01      	subs	r3, #1
 800191a:	b29a      	uxth	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001920:	e053      	b.n	80019ca <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b02      	cmp	r3, #2
 800192e:	d11b      	bne.n	8001968 <HAL_SPI_TransmitReceive+0x176>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001934:	b29b      	uxth	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d016      	beq.n	8001968 <HAL_SPI_TransmitReceive+0x176>
 800193a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193c:	2b01      	cmp	r3, #1
 800193e:	d113      	bne.n	8001968 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001944:	881a      	ldrh	r2, [r3, #0]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001950:	1c9a      	adds	r2, r3, #2
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800195a:	b29b      	uxth	r3, r3
 800195c:	3b01      	subs	r3, #1
 800195e:	b29a      	uxth	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001964:	2300      	movs	r3, #0
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b01      	cmp	r3, #1
 8001974:	d119      	bne.n	80019aa <HAL_SPI_TransmitReceive+0x1b8>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800197a:	b29b      	uxth	r3, r3
 800197c:	2b00      	cmp	r3, #0
 800197e:	d014      	beq.n	80019aa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68da      	ldr	r2, [r3, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800198a:	b292      	uxth	r2, r2
 800198c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001992:	1c9a      	adds	r2, r3, #2
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800199c:	b29b      	uxth	r3, r3
 800199e:	3b01      	subs	r3, #1
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80019a6:	2301      	movs	r3, #1
 80019a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80019aa:	f7fe fde9 	bl	8000580 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d807      	bhi.n	80019ca <HAL_SPI_TransmitReceive+0x1d8>
 80019ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c0:	d003      	beq.n	80019ca <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80019c8:	e0a7      	b.n	8001b1a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1a6      	bne.n	8001922 <HAL_SPI_TransmitReceive+0x130>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019d8:	b29b      	uxth	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1a1      	bne.n	8001922 <HAL_SPI_TransmitReceive+0x130>
 80019de:	e07c      	b.n	8001ada <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d002      	beq.n	80019ee <HAL_SPI_TransmitReceive+0x1fc>
 80019e8:	8b7b      	ldrh	r3, [r7, #26]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d16b      	bne.n	8001ac6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	330c      	adds	r3, #12
 80019f8:	7812      	ldrb	r2, [r2, #0]
 80019fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a00:	1c5a      	adds	r2, r3, #1
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001a14:	e057      	b.n	8001ac6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d11c      	bne.n	8001a5e <HAL_SPI_TransmitReceive+0x26c>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d017      	beq.n	8001a5e <HAL_SPI_TransmitReceive+0x26c>
 8001a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d114      	bne.n	8001a5e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	330c      	adds	r3, #12
 8001a3e:	7812      	ldrb	r2, [r2, #0]
 8001a40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	3b01      	subs	r3, #1
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d119      	bne.n	8001aa0 <HAL_SPI_TransmitReceive+0x2ae>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d014      	beq.n	8001aa0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68da      	ldr	r2, [r3, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a88:	1c5a      	adds	r2, r3, #1
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	3b01      	subs	r3, #1
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001aa0:	f7fe fd6e 	bl	8000580 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d803      	bhi.n	8001ab8 <HAL_SPI_TransmitReceive+0x2c6>
 8001ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab6:	d102      	bne.n	8001abe <HAL_SPI_TransmitReceive+0x2cc>
 8001ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d103      	bne.n	8001ac6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001ac4:	e029      	b.n	8001b1a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1a2      	bne.n	8001a16 <HAL_SPI_TransmitReceive+0x224>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d19d      	bne.n	8001a16 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001adc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f000 f904 	bl	8001cec <SPI_EndRxTxTransaction>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d006      	beq.n	8001af8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2220      	movs	r2, #32
 8001af4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001af6:	e010      	b.n	8001b1a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d10b      	bne.n	8001b18 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	e000      	b.n	8001b1a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001b18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001b2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3730      	adds	r7, #48	; 0x30
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	4613      	mov	r3, r2
 8001b46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001b48:	f7fe fd1a 	bl	8000580 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b50:	1a9b      	subs	r3, r3, r2
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	4413      	add	r3, r2
 8001b56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001b58:	f7fe fd12 	bl	8000580 <HAL_GetTick>
 8001b5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001b5e:	4b39      	ldr	r3, [pc, #228]	; (8001c44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	015b      	lsls	r3, r3, #5
 8001b64:	0d1b      	lsrs	r3, r3, #20
 8001b66:	69fa      	ldr	r2, [r7, #28]
 8001b68:	fb02 f303 	mul.w	r3, r2, r3
 8001b6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001b6e:	e054      	b.n	8001c1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b76:	d050      	beq.n	8001c1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001b78:	f7fe fd02 	bl	8000580 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	69fa      	ldr	r2, [r7, #28]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d902      	bls.n	8001b8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d13d      	bne.n	8001c0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001b9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ba6:	d111      	bne.n	8001bcc <SPI_WaitFlagStateUntilTimeout+0x94>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bb0:	d004      	beq.n	8001bbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bba:	d107      	bne.n	8001bcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bd4:	d10f      	bne.n	8001bf6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bf4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e017      	b.n	8001c3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	4013      	ands	r3, r2
 8001c24:	68ba      	ldr	r2, [r7, #8]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	bf0c      	ite	eq
 8001c2a:	2301      	moveq	r3, #1
 8001c2c:	2300      	movne	r3, #0
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	461a      	mov	r2, r3
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d19b      	bne.n	8001b70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3720      	adds	r7, #32
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000000 	.word	0x20000000

08001c48 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c5c:	d111      	bne.n	8001c82 <SPI_EndRxTransaction+0x3a>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c66:	d004      	beq.n	8001c72 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c70:	d107      	bne.n	8001c82 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c80:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c8a:	d117      	bne.n	8001cbc <SPI_EndRxTransaction+0x74>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c94:	d112      	bne.n	8001cbc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	f7ff ff49 	bl	8001b38 <SPI_WaitFlagStateUntilTimeout>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d01a      	beq.n	8001ce2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb0:	f043 0220 	orr.w	r2, r3, #32
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e013      	b.n	8001ce4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2180      	movs	r1, #128	; 0x80
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f7ff ff36 	bl	8001b38 <SPI_WaitFlagStateUntilTimeout>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d007      	beq.n	8001ce2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd6:	f043 0220 	orr.w	r2, r3, #32
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e000      	b.n	8001ce4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af02      	add	r7, sp, #8
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2180      	movs	r1, #128	; 0x80
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f7ff ff18 	bl	8001b38 <SPI_WaitFlagStateUntilTimeout>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d007      	beq.n	8001d1e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d12:	f043 0220 	orr.w	r2, r3, #32
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e000      	b.n	8001d20 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <__libc_init_array>:
 8001d28:	b570      	push	{r4, r5, r6, lr}
 8001d2a:	2600      	movs	r6, #0
 8001d2c:	4d0c      	ldr	r5, [pc, #48]	; (8001d60 <__libc_init_array+0x38>)
 8001d2e:	4c0d      	ldr	r4, [pc, #52]	; (8001d64 <__libc_init_array+0x3c>)
 8001d30:	1b64      	subs	r4, r4, r5
 8001d32:	10a4      	asrs	r4, r4, #2
 8001d34:	42a6      	cmp	r6, r4
 8001d36:	d109      	bne.n	8001d4c <__libc_init_array+0x24>
 8001d38:	f000 f822 	bl	8001d80 <_init>
 8001d3c:	2600      	movs	r6, #0
 8001d3e:	4d0a      	ldr	r5, [pc, #40]	; (8001d68 <__libc_init_array+0x40>)
 8001d40:	4c0a      	ldr	r4, [pc, #40]	; (8001d6c <__libc_init_array+0x44>)
 8001d42:	1b64      	subs	r4, r4, r5
 8001d44:	10a4      	asrs	r4, r4, #2
 8001d46:	42a6      	cmp	r6, r4
 8001d48:	d105      	bne.n	8001d56 <__libc_init_array+0x2e>
 8001d4a:	bd70      	pop	{r4, r5, r6, pc}
 8001d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d50:	4798      	blx	r3
 8001d52:	3601      	adds	r6, #1
 8001d54:	e7ee      	b.n	8001d34 <__libc_init_array+0xc>
 8001d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d5a:	4798      	blx	r3
 8001d5c:	3601      	adds	r6, #1
 8001d5e:	e7f2      	b.n	8001d46 <__libc_init_array+0x1e>
 8001d60:	08001db8 	.word	0x08001db8
 8001d64:	08001db8 	.word	0x08001db8
 8001d68:	08001db8 	.word	0x08001db8
 8001d6c:	08001dbc 	.word	0x08001dbc

08001d70 <memset>:
 8001d70:	4603      	mov	r3, r0
 8001d72:	4402      	add	r2, r0
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d100      	bne.n	8001d7a <memset+0xa>
 8001d78:	4770      	bx	lr
 8001d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8001d7e:	e7f9      	b.n	8001d74 <memset+0x4>

08001d80 <_init>:
 8001d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d82:	bf00      	nop
 8001d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d86:	bc08      	pop	{r3}
 8001d88:	469e      	mov	lr, r3
 8001d8a:	4770      	bx	lr

08001d8c <_fini>:
 8001d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d8e:	bf00      	nop
 8001d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d92:	bc08      	pop	{r3}
 8001d94:	469e      	mov	lr, r3
 8001d96:	4770      	bx	lr
