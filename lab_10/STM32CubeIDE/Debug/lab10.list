
lab10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  080032e4  080032e4  000132e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035b8  080035b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080035b8  080035b8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035b8  080035b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035b8  080035b8  000135b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035bc  080035bc  000135bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080035c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000070  08003630  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08003630  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000083e3  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c0b  00000000  00000000  0002847c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f8  00000000  00000000  0002a088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000750  00000000  00000000  0002a880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d9d  00000000  00000000  0002afd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008bd7  00000000  00000000  00041d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080aea  00000000  00000000  0004a944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cb42e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002368  00000000  00000000  000cb484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080032cc 	.word	0x080032cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080032cc 	.word	0x080032cc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b5b0      	push	{r4, r5, r7, lr}
 800015e:	b09e      	sub	sp, #120	; 0x78
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fd7d 	bl	8000c60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f973 	bl	8000450 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
		MX_GPIO_Init();
 800016a:	f000 f9d7 	bl	800051c <MX_GPIO_Init>
		MX_USART1_UART_Init();
 800016e:	f000 f9ab 	bl	80004c8 <MX_USART1_UART_Init>
		/* USER CODE BEGIN 2 */
		uint32_t SIZE_ONE_PAGE = 0x400; // розмір сторінки 1 Кб, або 1024 байта
 8000172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000176:	677b      	str	r3, [r7, #116]	; 0x74
		  //uint32_t ADDR_FLASH_PAGE = 0x08000000 + 64 * SIZE_ONE_PAGE; // адреса 64 сторінки 0x0800FC00
		uint32_t ADDR_FLASH_PAGE = 0x08000000 + 31 * SIZE_ONE_PAGE; // адреса 31 сторінки 0x08007C00
 8000178:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800017a:	4613      	mov	r3, r2
 800017c:	015b      	lsls	r3, r3, #5
 800017e:	1a9b      	subs	r3, r3, r2
 8000180:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000184:	673b      	str	r3, [r7, #112]	; 0x70
		size_t SIZE_uint32 = sizeof(uint32_t); // 32 біта це 4 байти
 8000186:	2304      	movs	r3, #4
 8000188:	66fb      	str	r3, [r7, #108]	; 0x6c
		// в одну сторінку розміром 1Кб можна записати 1024/4=256 змінних розміром 4 байти

		uint32_t val_000 = 0x01234567;
 800018a:	4ba8      	ldr	r3, [pc, #672]	; (800042c <main+0x2d0>)
 800018c:	66bb      	str	r3, [r7, #104]	; 0x68
    	uint32_t val_004 = 0x89ABCDEF;
 800018e:	4ba8      	ldr	r3, [pc, #672]	; (8000430 <main+0x2d4>)
 8000190:	667b      	str	r3, [r7, #100]	; 0x64
    	uint32_t val_00C = 0x01020304;
 8000192:	4ba8      	ldr	r3, [pc, #672]	; (8000434 <main+0x2d8>)
 8000194:	663b      	str	r3, [r7, #96]	; 0x60
    	uint32_t val_3FC = 0x0000FFFF; //1024-4=1020 == 0x400-0x004=0x3FC
 8000196:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800019a:	65fb      	str	r3, [r7, #92]	; 0x5c

    	HAL_UART_Transmit(&huart1, (uint8_t*)"\n\n\r!!!Erase page 31!!!\n\r", sizeof("\n\n\r!!!Erase page 31!!!\n\r"), 100);
 800019c:	2364      	movs	r3, #100	; 0x64
 800019e:	2219      	movs	r2, #25
 80001a0:	49a5      	ldr	r1, [pc, #660]	; (8000438 <main+0x2dc>)
 80001a2:	48a6      	ldr	r0, [pc, #664]	; (800043c <main+0x2e0>)
 80001a4:	f001 ff67 	bl	8002076 <HAL_UART_Transmit>
    	Flash_Erase_One_Page(ADDR_FLASH_PAGE); // очищення 31 сторінки
 80001a8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80001aa:	f000 f9cd 	bl	8000548 <Flash_Erase_One_Page>

    	HAL_UART_Transmit(&huart1, (uint8_t*)"\n!!!Write!!!\n\r", sizeof("\n!!!Write!!!\n\r"), 100);
 80001ae:	2364      	movs	r3, #100	; 0x64
 80001b0:	220f      	movs	r2, #15
 80001b2:	49a3      	ldr	r1, [pc, #652]	; (8000440 <main+0x2e4>)
 80001b4:	48a1      	ldr	r0, [pc, #644]	; (800043c <main+0x2e0>)
 80001b6:	f001 ff5e 	bl	8002076 <HAL_UART_Transmit>
    	// запис значень на початку і в кінці 127 сторінки
    	Flash_Write_uint32(ADDR_FLASH_PAGE + 0 * SIZE_uint32, val_000);
 80001ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80001bc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80001be:	f000 fa21 	bl	8000604 <Flash_Write_uint32>
    	Flash_Write_uint32(ADDR_FLASH_PAGE + 1 * SIZE_uint32, val_004);
 80001c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80001c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80001c6:	4413      	add	r3, r2
 80001c8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80001ca:	4618      	mov	r0, r3
 80001cc:	f000 fa1a 	bl	8000604 <Flash_Write_uint32>
    	Flash_Write_uint32(ADDR_FLASH_PAGE + 3 * SIZE_uint32, val_00C);
 80001d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80001d2:	4613      	mov	r3, r2
 80001d4:	005b      	lsls	r3, r3, #1
 80001d6:	441a      	add	r2, r3
 80001d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80001da:	4413      	add	r3, r2
 80001dc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80001de:	4618      	mov	r0, r3
 80001e0:	f000 fa10 	bl	8000604 <Flash_Write_uint32>
    	Flash_Write_uint32(ADDR_FLASH_PAGE + 255 * SIZE_uint32, val_3FC);
 80001e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80001e6:	4613      	mov	r3, r2
 80001e8:	021b      	lsls	r3, r3, #8
 80001ea:	1a9a      	subs	r2, r3, r2
 80001ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80001ee:	4413      	add	r3, r2
 80001f0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80001f2:	4618      	mov	r0, r3
 80001f4:	f000 fa06 	bl	8000604 <Flash_Write_uint32>

    	HAL_UART_Transmit(&huart1, (uint8_t*)"\n!!!Erase page 30!!!\n\r", sizeof("\n!!!Erase page 30!!!\n\r"), 100);
 80001f8:	2364      	movs	r3, #100	; 0x64
 80001fa:	2217      	movs	r2, #23
 80001fc:	4991      	ldr	r1, [pc, #580]	; (8000444 <main+0x2e8>)
 80001fe:	488f      	ldr	r0, [pc, #572]	; (800043c <main+0x2e0>)
 8000200:	f001 ff39 	bl	8002076 <HAL_UART_Transmit>
    	Flash_Erase_One_Page(ADDR_FLASH_PAGE - SIZE_ONE_PAGE); // очищення 30 сторінки
 8000204:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000206:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000208:	1ad3      	subs	r3, r2, r3
 800020a:	4618      	mov	r0, r3
 800020c:	f000 f99c 	bl	8000548 <Flash_Erase_One_Page>

    	HAL_UART_Transmit(&huart1, (uint8_t*)"\n!!!Write!!!\n\r", sizeof("\n!!!Write!!!\n\r"), 100);
 8000210:	2364      	movs	r3, #100	; 0x64
 8000212:	220f      	movs	r2, #15
 8000214:	498a      	ldr	r1, [pc, #552]	; (8000440 <main+0x2e4>)
 8000216:	4889      	ldr	r0, [pc, #548]	; (800043c <main+0x2e0>)
 8000218:	f001 ff2d 	bl	8002076 <HAL_UART_Transmit>
    	// запис значень на початку і в кінці 126 сторінки
    	Flash_Write_uint32(ADDR_FLASH_PAGE - SIZE_ONE_PAGE + 0x000, val_000);
 800021c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800021e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000220:	1ad3      	subs	r3, r2, r3
 8000222:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000224:	4618      	mov	r0, r3
 8000226:	f000 f9ed 	bl	8000604 <Flash_Write_uint32>
    	Flash_Write_uint32(ADDR_FLASH_PAGE - SIZE_ONE_PAGE + 0x004, val_004);
 800022a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800022c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800022e:	1ad3      	subs	r3, r2, r3
 8000230:	3304      	adds	r3, #4
 8000232:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f9e5 	bl	8000604 <Flash_Write_uint32>
    	Flash_Write_uint32(ADDR_FLASH_PAGE - SIZE_ONE_PAGE + 0x00C, val_00C);
 800023a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800023c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800023e:	1ad3      	subs	r3, r2, r3
 8000240:	330c      	adds	r3, #12
 8000242:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000244:	4618      	mov	r0, r3
 8000246:	f000 f9dd 	bl	8000604 <Flash_Write_uint32>
    	Flash_Write_uint32(ADDR_FLASH_PAGE - SIZE_ONE_PAGE + 0x3FC, val_3FC);
 800024a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800024c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800024e:	1ad3      	subs	r3, r2, r3
 8000250:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8000254:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8000256:	4618      	mov	r0, r3
 8000258:	f000 f9d4 	bl	8000604 <Flash_Write_uint32>

    	HAL_UART_Transmit(&huart1, (uint8_t*)"\n!!!Read!!!\n\r", sizeof("\n!!!Read!!!\n\r"), 100);
 800025c:	2364      	movs	r3, #100	; 0x64
 800025e:	220e      	movs	r2, #14
 8000260:	4979      	ldr	r1, [pc, #484]	; (8000448 <main+0x2ec>)
 8000262:	4876      	ldr	r0, [pc, #472]	; (800043c <main+0x2e0>)
 8000264:	f001 ff07 	bl	8002076 <HAL_UART_Transmit>
    	// читання значень з 64 сторінки Flash-пам'яті
    	uint32_t a = Flash_Read_uint32(ADDR_FLASH_PAGE + 0 * SIZE_uint32);
 8000268:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800026a:	f000 fa21 	bl	80006b0 <Flash_Read_uint32>
 800026e:	65b8      	str	r0, [r7, #88]	; 0x58
    	uint32_t b = Flash_Read_uint32(ADDR_FLASH_PAGE + 1 * SIZE_uint32);
 8000270:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000274:	4413      	add	r3, r2
 8000276:	4618      	mov	r0, r3
 8000278:	f000 fa1a 	bl	80006b0 <Flash_Read_uint32>
 800027c:	6578      	str	r0, [r7, #84]	; 0x54
    	uint32_t c = Flash_Read_uint32(ADDR_FLASH_PAGE + 3 * SIZE_uint32);
 800027e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000280:	4613      	mov	r3, r2
 8000282:	005b      	lsls	r3, r3, #1
 8000284:	441a      	add	r2, r3
 8000286:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000288:	4413      	add	r3, r2
 800028a:	4618      	mov	r0, r3
 800028c:	f000 fa10 	bl	80006b0 <Flash_Read_uint32>
 8000290:	6538      	str	r0, [r7, #80]	; 0x50
    	uint32_t d = Flash_Read_uint32(ADDR_FLASH_PAGE + 255 * SIZE_uint32);
 8000292:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000294:	4613      	mov	r3, r2
 8000296:	021b      	lsls	r3, r3, #8
 8000298:	1a9a      	subs	r2, r3, r2
 800029a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800029c:	4413      	add	r3, r2
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 fa06 	bl	80006b0 <Flash_Read_uint32>
 80002a4:	64f8      	str	r0, [r7, #76]	; 0x4c



    	// uint16_t

		uint16_t val_1 = 0x4321;
 80002a6:	f244 3321 	movw	r3, #17185	; 0x4321
 80002aa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		uint16_t val_2 = 0x89AB;
 80002ae:	f648 13ab 	movw	r3, #35243	; 0x89ab
 80002b2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		uint16_t val_3 = 0x0102;
 80002b6:	f44f 7381 	mov.w	r3, #258	; 0x102
 80002ba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		uint16_t val_4 = 0x0435;
 80002be:	f240 4335 	movw	r3, #1077	; 0x435
 80002c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

		HAL_UART_Transmit(&huart1, (uint8_t*)"\n\n\r!!!Erase page 31!!!\n\r", sizeof("\n\n\r!!!Erase page 31!!!\n\r"), 100);
 80002c6:	2364      	movs	r3, #100	; 0x64
 80002c8:	2219      	movs	r2, #25
 80002ca:	495b      	ldr	r1, [pc, #364]	; (8000438 <main+0x2dc>)
 80002cc:	485b      	ldr	r0, [pc, #364]	; (800043c <main+0x2e0>)
 80002ce:	f001 fed2 	bl	8002076 <HAL_UART_Transmit>
		Flash_Erase_One_Page(ADDR_FLASH_PAGE); // очищення 31 сторінки
 80002d2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80002d4:	f000 f938 	bl	8000548 <Flash_Erase_One_Page>

		HAL_UART_Transmit(&huart1, (uint8_t*)"\n!!!Write!!!\n\r", sizeof("\n!!!Write!!!\n\r"), 100);
 80002d8:	2364      	movs	r3, #100	; 0x64
 80002da:	220f      	movs	r2, #15
 80002dc:	4958      	ldr	r1, [pc, #352]	; (8000440 <main+0x2e4>)
 80002de:	4857      	ldr	r0, [pc, #348]	; (800043c <main+0x2e0>)
 80002e0:	f001 fec9 	bl	8002076 <HAL_UART_Transmit>
		// запис значень на початку і в кінці 31 сторінки
  		Flash_Write_uint16(ADDR_FLASH_PAGE + 0 * SIZE_uint32, val_1);
 80002e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80002e8:	4619      	mov	r1, r3
 80002ea:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80002ec:	f000 fa26 	bl	800073c <Flash_Write_uint16>
  		Flash_Write_uint16(ADDR_FLASH_PAGE + 1 * SIZE_uint32, val_2);
 80002f0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80002f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80002f4:	4413      	add	r3, r2
 80002f6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80002fa:	4611      	mov	r1, r2
 80002fc:	4618      	mov	r0, r3
 80002fe:	f000 fa1d 	bl	800073c <Flash_Write_uint16>
  		Flash_Write_uint16(ADDR_FLASH_PAGE + 3 * SIZE_uint32, val_3);
 8000302:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000304:	4613      	mov	r3, r2
 8000306:	005b      	lsls	r3, r3, #1
 8000308:	441a      	add	r2, r3
 800030a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800030c:	4413      	add	r3, r2
 800030e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8000312:	4611      	mov	r1, r2
 8000314:	4618      	mov	r0, r3
 8000316:	f000 fa11 	bl	800073c <Flash_Write_uint16>
  		Flash_Write_uint16(ADDR_FLASH_PAGE + 255 * SIZE_uint32, val_4);
 800031a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800031c:	4613      	mov	r3, r2
 800031e:	021b      	lsls	r3, r3, #8
 8000320:	1a9a      	subs	r2, r3, r2
 8000322:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000324:	4413      	add	r3, r2
 8000326:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800032a:	4611      	mov	r1, r2
 800032c:	4618      	mov	r0, r3
 800032e:	f000 fa05 	bl	800073c <Flash_Write_uint16>

		HAL_UART_Transmit(&huart1, (uint8_t*)"\n!!!Erase page 30!!!\n\r", sizeof("\n!!!Erase page 30!!!\n\r"), 100);
 8000332:	2364      	movs	r3, #100	; 0x64
 8000334:	2217      	movs	r2, #23
 8000336:	4943      	ldr	r1, [pc, #268]	; (8000444 <main+0x2e8>)
 8000338:	4840      	ldr	r0, [pc, #256]	; (800043c <main+0x2e0>)
 800033a:	f001 fe9c 	bl	8002076 <HAL_UART_Transmit>
		Flash_Erase_One_Page(ADDR_FLASH_PAGE - SIZE_ONE_PAGE); // очищення 30 сторінки
 800033e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000340:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000342:	1ad3      	subs	r3, r2, r3
 8000344:	4618      	mov	r0, r3
 8000346:	f000 f8ff 	bl	8000548 <Flash_Erase_One_Page>

		HAL_UART_Transmit(&huart1, (uint8_t*)"\n!!!Write!!!\n\r", sizeof("\n!!!Write!!!\n\r"), 100);
 800034a:	2364      	movs	r3, #100	; 0x64
 800034c:	220f      	movs	r2, #15
 800034e:	493c      	ldr	r1, [pc, #240]	; (8000440 <main+0x2e4>)
 8000350:	483a      	ldr	r0, [pc, #232]	; (800043c <main+0x2e0>)
 8000352:	f001 fe90 	bl	8002076 <HAL_UART_Transmit>
		// запис значень на початку і в кінці 30 сторінки
  		Flash_Write_uint16(ADDR_FLASH_PAGE - SIZE_ONE_PAGE + 0x000, val_1);
 8000356:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000358:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800035a:	1ad3      	subs	r3, r2, r3
 800035c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8000360:	4611      	mov	r1, r2
 8000362:	4618      	mov	r0, r3
 8000364:	f000 f9ea 	bl	800073c <Flash_Write_uint16>
  		Flash_Write_uint16(ADDR_FLASH_PAGE - SIZE_ONE_PAGE + 0x004, val_2);
 8000368:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800036a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800036c:	1ad3      	subs	r3, r2, r3
 800036e:	3304      	adds	r3, #4
 8000370:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8000374:	4611      	mov	r1, r2
 8000376:	4618      	mov	r0, r3
 8000378:	f000 f9e0 	bl	800073c <Flash_Write_uint16>
  		Flash_Write_uint16(ADDR_FLASH_PAGE - SIZE_ONE_PAGE + 0x00C, val_3);
 800037c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800037e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000380:	1ad3      	subs	r3, r2, r3
 8000382:	330c      	adds	r3, #12
 8000384:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8000388:	4611      	mov	r1, r2
 800038a:	4618      	mov	r0, r3
 800038c:	f000 f9d6 	bl	800073c <Flash_Write_uint16>
  		Flash_Write_uint16(ADDR_FLASH_PAGE - SIZE_ONE_PAGE + 0x3FC, val_4);
 8000390:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000392:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000394:	1ad3      	subs	r3, r2, r3
 8000396:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 800039a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800039e:	4611      	mov	r1, r2
 80003a0:	4618      	mov	r0, r3
 80003a2:	f000 f9cb 	bl	800073c <Flash_Write_uint16>

		HAL_UART_Transmit(&huart1, (uint8_t*)"\n!!!Read!!!\n\r", sizeof("\n!!!Read!!!\n\r"), 100);
 80003a6:	2364      	movs	r3, #100	; 0x64
 80003a8:	220e      	movs	r2, #14
 80003aa:	4927      	ldr	r1, [pc, #156]	; (8000448 <main+0x2ec>)
 80003ac:	4823      	ldr	r0, [pc, #140]	; (800043c <main+0x2e0>)
 80003ae:	f001 fe62 	bl	8002076 <HAL_UART_Transmit>
		// читання значень з 30 сторінки Flash-пам'яті
  		uint16_t a2 = Flash_Read_uint16(ADDR_FLASH_PAGE + 0 * SIZE_uint32);
 80003b2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80003b4:	f000 fa18 	bl	80007e8 <Flash_Read_uint16>
 80003b8:	4603      	mov	r3, r0
 80003ba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  		uint16_t b2 = Flash_Read_uint16(ADDR_FLASH_PAGE + 1 * SIZE_uint32);
 80003be:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80003c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80003c2:	4413      	add	r3, r2
 80003c4:	4618      	mov	r0, r3
 80003c6:	f000 fa0f 	bl	80007e8 <Flash_Read_uint16>
 80003ca:	4603      	mov	r3, r0
 80003cc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  		uint16_t c2 = Flash_Read_uint16(ADDR_FLASH_PAGE + 3 * SIZE_uint32);
 80003d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80003d2:	4613      	mov	r3, r2
 80003d4:	005b      	lsls	r3, r3, #1
 80003d6:	441a      	add	r2, r3
 80003d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80003da:	4413      	add	r3, r2
 80003dc:	4618      	mov	r0, r3
 80003de:	f000 fa03 	bl	80007e8 <Flash_Read_uint16>
 80003e2:	4603      	mov	r3, r0
 80003e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  		uint16_t d2 = Flash_Read_uint16(ADDR_FLASH_PAGE + 255 * SIZE_uint32);
 80003e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80003e8:	4613      	mov	r3, r2
 80003ea:	021b      	lsls	r3, r3, #8
 80003ec:	1a9a      	subs	r2, r3, r2
 80003ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80003f0:	4413      	add	r3, r2
 80003f2:	4618      	mov	r0, r3
 80003f4:	f000 f9f8 	bl	80007e8 <Flash_Read_uint16>
 80003f8:	4603      	mov	r3, r0
 80003fa:	87bb      	strh	r3, [r7, #60]	; 0x3c


		uint8_t arr[] = "Lorem ipsum dolor sit amet, consectetur adipiscing elit.";
 80003fc:	4b13      	ldr	r3, [pc, #76]	; (800044c <main+0x2f0>)
 80003fe:	463c      	mov	r4, r7
 8000400:	461d      	mov	r5, r3
 8000402:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000404:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800040a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800040c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800040e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000412:	c403      	stmia	r4!, {r0, r1}
 8000414:	7022      	strb	r2, [r4, #0]
		Flash_Write_Byte_Array(arr, 56);
 8000416:	463b      	mov	r3, r7
 8000418:	2138      	movs	r1, #56	; 0x38
 800041a:	4618      	mov	r0, r3
 800041c:	f000 fa2e 	bl	800087c <Flash_Write_Byte_Array>
		Flash_Read_By_Byte(ADDR_FLASH_PAGE, 56);
 8000420:	2138      	movs	r1, #56	; 0x38
 8000422:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000424:	f000 fab8 	bl	8000998 <Flash_Read_By_Byte>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000428:	e7fe      	b.n	8000428 <main+0x2cc>
 800042a:	bf00      	nop
 800042c:	01234567 	.word	0x01234567
 8000430:	89abcdef 	.word	0x89abcdef
 8000434:	01020304 	.word	0x01020304
 8000438:	080032e4 	.word	0x080032e4
 800043c:	20000098 	.word	0x20000098
 8000440:	08003300 	.word	0x08003300
 8000444:	08003310 	.word	0x08003310
 8000448:	08003328 	.word	0x08003328
 800044c:	08003338 	.word	0x08003338

08000450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b090      	sub	sp, #64	; 0x40
 8000454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000456:	f107 0318 	add.w	r3, r7, #24
 800045a:	2228      	movs	r2, #40	; 0x28
 800045c:	2100      	movs	r1, #0
 800045e:	4618      	mov	r0, r3
 8000460:	f002 fabe 	bl	80029e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]
 8000470:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000472:	2302      	movs	r3, #2
 8000474:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000476:	2301      	movs	r3, #1
 8000478:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800047a:	2310      	movs	r3, #16
 800047c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800047e:	2300      	movs	r3, #0
 8000480:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000482:	f107 0318 	add.w	r3, r7, #24
 8000486:	4618      	mov	r0, r3
 8000488:	f001 f98e 	bl	80017a8 <HAL_RCC_OscConfig>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000492:	f000 fac5 	bl	8000a20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000496:	230f      	movs	r3, #15
 8000498:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800049a:	2300      	movs	r3, #0
 800049c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800049e:	2300      	movs	r3, #0
 80004a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004a2:	2300      	movs	r3, #0
 80004a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004a6:	2300      	movs	r3, #0
 80004a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	2100      	movs	r1, #0
 80004ae:	4618      	mov	r0, r3
 80004b0:	f001 fbfa 	bl	8001ca8 <HAL_RCC_ClockConfig>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004ba:	f000 fab1 	bl	8000a20 <Error_Handler>
  }
}
 80004be:	bf00      	nop
 80004c0:	3740      	adds	r7, #64	; 0x40
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
	...

080004c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004cc:	4b11      	ldr	r3, [pc, #68]	; (8000514 <MX_USART1_UART_Init+0x4c>)
 80004ce:	4a12      	ldr	r2, [pc, #72]	; (8000518 <MX_USART1_UART_Init+0x50>)
 80004d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80004d2:	4b10      	ldr	r3, [pc, #64]	; (8000514 <MX_USART1_UART_Init+0x4c>)
 80004d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004da:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <MX_USART1_UART_Init+0x4c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <MX_USART1_UART_Init+0x4c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004e6:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <MX_USART1_UART_Init+0x4c>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004ec:	4b09      	ldr	r3, [pc, #36]	; (8000514 <MX_USART1_UART_Init+0x4c>)
 80004ee:	220c      	movs	r2, #12
 80004f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004f2:	4b08      	ldr	r3, [pc, #32]	; (8000514 <MX_USART1_UART_Init+0x4c>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <MX_USART1_UART_Init+0x4c>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <MX_USART1_UART_Init+0x4c>)
 8000500:	f001 fd6c 	bl	8001fdc <HAL_UART_Init>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800050a:	f000 fa89 	bl	8000a20 <Error_Handler>
   *
   */

  /* USER CODE END USART1_Init 2 */

}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000098 	.word	0x20000098
 8000518:	40013800 	.word	0x40013800

0800051c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	4b08      	ldr	r3, [pc, #32]	; (8000544 <MX_GPIO_Init+0x28>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	4a07      	ldr	r2, [pc, #28]	; (8000544 <MX_GPIO_Init+0x28>)
 8000528:	f043 0304 	orr.w	r3, r3, #4
 800052c:	6193      	str	r3, [r2, #24]
 800052e:	4b05      	ldr	r3, [pc, #20]	; (8000544 <MX_GPIO_Init+0x28>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	f003 0304 	and.w	r3, r3, #4
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]

}
 800053a:	bf00      	nop
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr
 8000544:	40021000 	.word	0x40021000

08000548 <Flash_Erase_One_Page>:

/* USER CODE BEGIN 4 */
void Flash_Erase_One_Page(uint32_t MYADDR)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b09a      	sub	sp, #104	; 0x68
 800054c:	af02      	add	r7, sp, #8
 800054e:	6078      	str	r0, [r7, #4]
	FLASH_EraseInitTypeDef EraseInitStruct; // структура для очищення флеша

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; // очищення сторінками, FLASH_TYPEERASE_MASSERASE - очищення всього флеша
 8000550:	2300      	movs	r3, #0
 8000552:	64fb      	str	r3, [r7, #76]	; 0x4c
	EraseInitStruct.PageAddress = MYADDR; // адреса сторінки;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	657b      	str	r3, [r7, #84]	; 0x54
	EraseInitStruct.NbPages = 1;          // кількість сторінок для очищення
 8000558:	2301      	movs	r3, #1
 800055a:	65bb      	str	r3, [r7, #88]	; 0x58
	//EraseInitStruct.Banks = FLASH_BANK_1; // для більш потужник МК ніж STM32F103

	uint32_t page_error = 0; // змінна в яку запишеться адреса сторінки, при невдалому очищенні
 800055c:	2300      	movs	r3, #0
 800055e:	64bb      	str	r3, [r7, #72]	; 0x48

	char str[64] = { 0, };
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	223c      	movs	r2, #60	; 0x3c
 800056a:	2100      	movs	r1, #0
 800056c:	4618      	mov	r0, r3
 800056e:	f002 fa37 	bl	80029e0 <memset>

	//////// ОЧИЩЕННЯ Flash-пам'яті ////////
	HAL_FLASH_Unlock(); // розблокування Flash-пам'яті
 8000572:	f000 fe05 	bl	8001180 <HAL_FLASH_Unlock>

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &page_error) != HAL_OK)
 8000576:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800057a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800057e:	4611      	mov	r1, r2
 8000580:	4618      	mov	r0, r3
 8000582:	f000 feef 	bl	8001364 <HAL_FLASHEx_Erase>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d017      	beq.n	80005bc <Flash_Erase_One_Page+0x74>
	{
		// сталась помилка при очищенні сторінки
		uint32_t er = HAL_FLASH_GetError();
 800058c:	f000 fe2e 	bl	80011ec <HAL_FLASH_GetError>
 8000590:	65f8      	str	r0, [r7, #92]	; 0x5c
		snprintf(str, 64, "Error Flash_Erase(): %lu\n\r", er);
 8000592:	f107 0008 	add.w	r0, r7, #8
 8000596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000598:	4a17      	ldr	r2, [pc, #92]	; (80005f8 <Flash_Erase_One_Page+0xb0>)
 800059a:	2140      	movs	r1, #64	; 0x40
 800059c:	f002 fa28 	bl	80029f0 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 80005a0:	f107 0308 	add.w	r3, r7, #8
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff fdd1 	bl	800014c <strlen>
 80005aa:	4603      	mov	r3, r0
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	f107 0108 	add.w	r1, r7, #8
 80005b2:	2364      	movs	r3, #100	; 0x64
 80005b4:	4811      	ldr	r0, [pc, #68]	; (80005fc <Flash_Erase_One_Page+0xb4>)
 80005b6:	f001 fd5e 	bl	8002076 <HAL_UART_Transmit>
		while (1)
 80005ba:	e7fe      	b.n	80005ba <Flash_Erase_One_Page+0x72>
		{
		}
	}

	// очищення сторінки виконане успішно
	snprintf(str, 64, "Erase Flash from address 0x%08lX to address 0x%08lX OK\n\r", MYADDR, MYADDR+0x400-1);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80005c2:	f107 0008 	add.w	r0, r7, #8
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <Flash_Erase_One_Page+0xb8>)
 80005cc:	2140      	movs	r1, #64	; 0x40
 80005ce:	f002 fa0f 	bl	80029f0 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 80005d2:	f107 0308 	add.w	r3, r7, #8
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff fdb8 	bl	800014c <strlen>
 80005dc:	4603      	mov	r3, r0
 80005de:	b29a      	uxth	r2, r3
 80005e0:	f107 0108 	add.w	r1, r7, #8
 80005e4:	2364      	movs	r3, #100	; 0x64
 80005e6:	4805      	ldr	r0, [pc, #20]	; (80005fc <Flash_Erase_One_Page+0xb4>)
 80005e8:	f001 fd45 	bl	8002076 <HAL_UART_Transmit>

	HAL_FLASH_Lock(); // заблокування Flash-пам'яті
 80005ec:	f000 fdee 	bl	80011cc <HAL_FLASH_Lock>
}
 80005f0:	bf00      	nop
 80005f2:	3760      	adds	r7, #96	; 0x60
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	08003374 	.word	0x08003374
 80005fc:	20000098 	.word	0x20000098
 8000600:	08003390 	.word	0x08003390

08000604 <Flash_Write_uint32>:

void Flash_Write_uint32(uint32_t MYADDR, uint32_t val)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b096      	sub	sp, #88	; 0x58
 8000608:	af02      	add	r7, sp, #8
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
	char str[64] = { 0, };
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	223c      	movs	r2, #60	; 0x3c
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f002 f9e0 	bl	80029e0 <memset>

	///////////// ЗАПИС у Flash-пам'ять ///////////////
	HAL_FLASH_Unlock(); // розблокування Flash-пам'яті
 8000620:	f000 fdae 	bl	8001180 <HAL_FLASH_Unlock>

	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, MYADDR, val) != HAL_OK)
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	461a      	mov	r2, r3
 8000628:	f04f 0300 	mov.w	r3, #0
 800062c:	6879      	ldr	r1, [r7, #4]
 800062e:	2002      	movs	r0, #2
 8000630:	f000 fd36 	bl	80010a0 <HAL_FLASH_Program>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d017      	beq.n	800066a <Flash_Write_uint32+0x66>
	{
		uint32_t er = HAL_FLASH_GetError();
 800063a:	f000 fdd7 	bl	80011ec <HAL_FLASH_GetError>
 800063e:	64f8      	str	r0, [r7, #76]	; 0x4c
		snprintf(str, 64, "Error Flash_Write(): %lu\n\r", er);
 8000640:	f107 000c 	add.w	r0, r7, #12
 8000644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000646:	4a17      	ldr	r2, [pc, #92]	; (80006a4 <Flash_Write_uint32+0xa0>)
 8000648:	2140      	movs	r1, #64	; 0x40
 800064a:	f002 f9d1 	bl	80029f0 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 800064e:	f107 030c 	add.w	r3, r7, #12
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff fd7a 	bl	800014c <strlen>
 8000658:	4603      	mov	r3, r0
 800065a:	b29a      	uxth	r2, r3
 800065c:	f107 010c 	add.w	r1, r7, #12
 8000660:	2364      	movs	r3, #100	; 0x64
 8000662:	4811      	ldr	r0, [pc, #68]	; (80006a8 <Flash_Write_uint32+0xa4>)
 8000664:	f001 fd07 	bl	8002076 <HAL_UART_Transmit>
		while (1)
 8000668:	e7fe      	b.n	8000668 <Flash_Write_uint32+0x64>
		{
		}
	}

	snprintf(str, 64, "Write 32 bits (Hex: 0x%08lX) to address 0x%08lX OK\n\r", val, MYADDR);
 800066a:	f107 000c 	add.w	r0, r7, #12
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	4a0d      	ldr	r2, [pc, #52]	; (80006ac <Flash_Write_uint32+0xa8>)
 8000676:	2140      	movs	r1, #64	; 0x40
 8000678:	f002 f9ba 	bl	80029f0 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff fd63 	bl	800014c <strlen>
 8000686:	4603      	mov	r3, r0
 8000688:	b29a      	uxth	r2, r3
 800068a:	f107 010c 	add.w	r1, r7, #12
 800068e:	2364      	movs	r3, #100	; 0x64
 8000690:	4805      	ldr	r0, [pc, #20]	; (80006a8 <Flash_Write_uint32+0xa4>)
 8000692:	f001 fcf0 	bl	8002076 <HAL_UART_Transmit>

	HAL_FLASH_Lock(); // заблокування Flash-пам'яті
 8000696:	f000 fd99 	bl	80011cc <HAL_FLASH_Lock>
}
 800069a:	bf00      	nop
 800069c:	3750      	adds	r7, #80	; 0x50
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	080033cc 	.word	0x080033cc
 80006a8:	20000098 	.word	0x20000098
 80006ac:	080033e8 	.word	0x080033e8

080006b0 <Flash_Read_uint32>:

uint32_t Flash_Read_uint32(uint32_t MYADDR)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b096      	sub	sp, #88	; 0x58
 80006b4:	af02      	add	r7, sp, #8
 80006b6:	6078      	str	r0, [r7, #4]
	char str[64] = { 0, };
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	223c      	movs	r2, #60	; 0x3c
 80006c2:	2100      	movs	r1, #0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 f98b 	bl	80029e0 <memset>

	/////////////// ЧИТАЄМО Flash-пам'ять ///////////////////
	uint32_t dig32 = *(uint32_t*) MYADDR; // читання числа за його адресою
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	64fb      	str	r3, [r7, #76]	; 0x4c

	snprintf(str, 64, "Read 32 bits (Dec: %lu \tHex: 0x%08lX)", dig32, dig32);
 80006d0:	f107 000c 	add.w	r0, r7, #12
 80006d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006d6:	9300      	str	r3, [sp, #0]
 80006d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006da:	4a15      	ldr	r2, [pc, #84]	; (8000730 <Flash_Read_uint32+0x80>)
 80006dc:	2140      	movs	r1, #64	; 0x40
 80006de:	f002 f987 	bl	80029f0 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff fd30 	bl	800014c <strlen>
 80006ec:	4603      	mov	r3, r0
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	f107 010c 	add.w	r1, r7, #12
 80006f4:	2364      	movs	r3, #100	; 0x64
 80006f6:	480f      	ldr	r0, [pc, #60]	; (8000734 <Flash_Read_uint32+0x84>)
 80006f8:	f001 fcbd 	bl	8002076 <HAL_UART_Transmit>
	snprintf(str, 64, " from address 0x%08lX \n\r", MYADDR);
 80006fc:	f107 000c 	add.w	r0, r7, #12
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4a0d      	ldr	r2, [pc, #52]	; (8000738 <Flash_Read_uint32+0x88>)
 8000704:	2140      	movs	r1, #64	; 0x40
 8000706:	f002 f973 	bl	80029f0 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff fd1c 	bl	800014c <strlen>
 8000714:	4603      	mov	r3, r0
 8000716:	b29a      	uxth	r2, r3
 8000718:	f107 010c 	add.w	r1, r7, #12
 800071c:	2364      	movs	r3, #100	; 0x64
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <Flash_Read_uint32+0x84>)
 8000720:	f001 fca9 	bl	8002076 <HAL_UART_Transmit>

	return dig32;
 8000724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8000726:	4618      	mov	r0, r3
 8000728:	3750      	adds	r7, #80	; 0x50
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	08003420 	.word	0x08003420
 8000734:	20000098 	.word	0x20000098
 8000738:	08003448 	.word	0x08003448

0800073c <Flash_Write_uint16>:

void Flash_Write_uint16(uint32_t MYADDR, uint16_t val)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b096      	sub	sp, #88	; 0x58
 8000740:	af02      	add	r7, sp, #8
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	460b      	mov	r3, r1
 8000746:	807b      	strh	r3, [r7, #2]
	char str[64] = { 0, };
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	f107 0310 	add.w	r3, r7, #16
 8000750:	223c      	movs	r2, #60	; 0x3c
 8000752:	2100      	movs	r1, #0
 8000754:	4618      	mov	r0, r3
 8000756:	f002 f943 	bl	80029e0 <memset>

	///////////// ЗАПИС у Flash-пам'ять ///////////////
	HAL_FLASH_Unlock(); // розблокування Flash-пам'яті
 800075a:	f000 fd11 	bl	8001180 <HAL_FLASH_Unlock>

	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, MYADDR, val) != HAL_OK)
 800075e:	887a      	ldrh	r2, [r7, #2]
 8000760:	f04f 0300 	mov.w	r3, #0
 8000764:	6879      	ldr	r1, [r7, #4]
 8000766:	2001      	movs	r0, #1
 8000768:	f000 fc9a 	bl	80010a0 <HAL_FLASH_Program>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d017      	beq.n	80007a2 <Flash_Write_uint16+0x66>
	{
		uint32_t er = HAL_FLASH_GetError();
 8000772:	f000 fd3b 	bl	80011ec <HAL_FLASH_GetError>
 8000776:	64f8      	str	r0, [r7, #76]	; 0x4c
		snprintf(str, 64, "Error Flash_Write(): %lu\n\r", er);
 8000778:	f107 000c 	add.w	r0, r7, #12
 800077c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800077e:	4a17      	ldr	r2, [pc, #92]	; (80007dc <Flash_Write_uint16+0xa0>)
 8000780:	2140      	movs	r1, #64	; 0x40
 8000782:	f002 f935 	bl	80029f0 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff fcde 	bl	800014c <strlen>
 8000790:	4603      	mov	r3, r0
 8000792:	b29a      	uxth	r2, r3
 8000794:	f107 010c 	add.w	r1, r7, #12
 8000798:	2364      	movs	r3, #100	; 0x64
 800079a:	4811      	ldr	r0, [pc, #68]	; (80007e0 <Flash_Write_uint16+0xa4>)
 800079c:	f001 fc6b 	bl	8002076 <HAL_UART_Transmit>
		while (1)
 80007a0:	e7fe      	b.n	80007a0 <Flash_Write_uint16+0x64>
		{
		}
	}

	snprintf(str, 64, "Write 16 bits (Hex: 0x%08lX) to address 0x%08lX OK\n\r", val, MYADDR);
 80007a2:	887a      	ldrh	r2, [r7, #2]
 80007a4:	f107 000c 	add.w	r0, r7, #12
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	4613      	mov	r3, r2
 80007ae:	4a0d      	ldr	r2, [pc, #52]	; (80007e4 <Flash_Write_uint16+0xa8>)
 80007b0:	2140      	movs	r1, #64	; 0x40
 80007b2:	f002 f91d 	bl	80029f0 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fcc6 	bl	800014c <strlen>
 80007c0:	4603      	mov	r3, r0
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	f107 010c 	add.w	r1, r7, #12
 80007c8:	2364      	movs	r3, #100	; 0x64
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <Flash_Write_uint16+0xa4>)
 80007cc:	f001 fc53 	bl	8002076 <HAL_UART_Transmit>

	HAL_FLASH_Lock(); // заблокування Flash-пам'яті
 80007d0:	f000 fcfc 	bl	80011cc <HAL_FLASH_Lock>
}
 80007d4:	bf00      	nop
 80007d6:	3750      	adds	r7, #80	; 0x50
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	080033cc 	.word	0x080033cc
 80007e0:	20000098 	.word	0x20000098
 80007e4:	08003464 	.word	0x08003464

080007e8 <Flash_Read_uint16>:

uint16_t Flash_Read_uint16(uint32_t MYADDR)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b096      	sub	sp, #88	; 0x58
 80007ec:	af02      	add	r7, sp, #8
 80007ee:	6078      	str	r0, [r7, #4]
	char str[64] = { 0, };
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	223c      	movs	r2, #60	; 0x3c
 80007fa:	2100      	movs	r1, #0
 80007fc:	4618      	mov	r0, r3
 80007fe:	f002 f8ef 	bl	80029e0 <memset>

	/////////////// ЧИТАЄМО Flash-пам'ять ///////////////////
	uint16_t dig16 = *(uint16_t*) MYADDR; // читання числа за його адресою
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	snprintf(str, 64, "Read 16 bits (Dec: %lu \tHex: 0x%08lX)", dig16, dig16);
 800080a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800080e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000812:	f107 000c 	add.w	r0, r7, #12
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	4613      	mov	r3, r2
 800081a:	4a15      	ldr	r2, [pc, #84]	; (8000870 <Flash_Read_uint16+0x88>)
 800081c:	2140      	movs	r1, #64	; 0x40
 800081e:	f002 f8e7 	bl	80029f0 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fc90 	bl	800014c <strlen>
 800082c:	4603      	mov	r3, r0
 800082e:	b29a      	uxth	r2, r3
 8000830:	f107 010c 	add.w	r1, r7, #12
 8000834:	2364      	movs	r3, #100	; 0x64
 8000836:	480f      	ldr	r0, [pc, #60]	; (8000874 <Flash_Read_uint16+0x8c>)
 8000838:	f001 fc1d 	bl	8002076 <HAL_UART_Transmit>
	snprintf(str, 64, " from address 0x%08lX \n\r", MYADDR);
 800083c:	f107 000c 	add.w	r0, r7, #12
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <Flash_Read_uint16+0x90>)
 8000844:	2140      	movs	r1, #64	; 0x40
 8000846:	f002 f8d3 	bl	80029f0 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff fc7c 	bl	800014c <strlen>
 8000854:	4603      	mov	r3, r0
 8000856:	b29a      	uxth	r2, r3
 8000858:	f107 010c 	add.w	r1, r7, #12
 800085c:	2364      	movs	r3, #100	; 0x64
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <Flash_Read_uint16+0x8c>)
 8000860:	f001 fc09 	bl	8002076 <HAL_UART_Transmit>

	return dig16;
 8000864:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
}
 8000868:	4618      	mov	r0, r3
 800086a:	3750      	adds	r7, #80	; 0x50
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	0800349c 	.word	0x0800349c
 8000874:	20000098 	.word	0x20000098
 8000878:	08003448 	.word	0x08003448

0800087c <Flash_Write_Byte_Array>:
	return dig64;
}


void Flash_Write_Byte_Array(uint8_t phraze[], int byteCount)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b09a      	sub	sp, #104	; 0x68
 8000880:	af02      	add	r7, sp, #8
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
	size_t SIZE_uint32 = sizeof(uint32_t);
 8000886:	2304      	movs	r3, #4
 8000888:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t SIZE_ONE_PAGE = 0x400;
 800088a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800088e:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t ADDR_FLASH_PAGE = 0x08000000 + 31 * SIZE_ONE_PAGE;
 8000890:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000892:	4613      	mov	r3, r2
 8000894:	015b      	lsls	r3, r3, #5
 8000896:	1a9b      	subs	r3, r3, r2
 8000898:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800089c:	653b      	str	r3, [r7, #80]	; 0x50

	HAL_UART_Transmit(&huart1, (uint8_t*)"\n\n\r!!!Erase page 31!!!\n\r", sizeof("\n\n\r!!!Erase page 31!!!\n\r"), 100);
 800089e:	2364      	movs	r3, #100	; 0x64
 80008a0:	2219      	movs	r2, #25
 80008a2:	4938      	ldr	r1, [pc, #224]	; (8000984 <Flash_Write_Byte_Array+0x108>)
 80008a4:	4838      	ldr	r0, [pc, #224]	; (8000988 <Flash_Write_Byte_Array+0x10c>)
 80008a6:	f001 fbe6 	bl	8002076 <HAL_UART_Transmit>
	Flash_Erase_One_Page(ADDR_FLASH_PAGE);
 80008aa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80008ac:	f7ff fe4c 	bl	8000548 <Flash_Erase_One_Page>

	HAL_UART_Transmit(&huart1, (uint8_t*)"\n!!!Write!!!\n\r", sizeof("\n!!!Write!!!\n\r"), 100);
 80008b0:	2364      	movs	r3, #100	; 0x64
 80008b2:	220f      	movs	r2, #15
 80008b4:	4935      	ldr	r1, [pc, #212]	; (800098c <Flash_Write_Byte_Array+0x110>)
 80008b6:	4834      	ldr	r0, [pc, #208]	; (8000988 <Flash_Write_Byte_Array+0x10c>)
 80008b8:	f001 fbdd 	bl	8002076 <HAL_UART_Transmit>

	for(int i = 0; i < byteCount; i++)
 80008bc:	2300      	movs	r3, #0
 80008be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80008c0:	e057      	b.n	8000972 <Flash_Write_Byte_Array+0xf6>
	{
		char str[64] = { 0, };
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	f107 030c 	add.w	r3, r7, #12
 80008ca:	223c      	movs	r2, #60	; 0x3c
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f002 f886 	bl	80029e0 <memset>
		uint32_t currentAddress = ADDR_FLASH_PAGE + i * SIZE_uint32;
 80008d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80008d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80008d8:	fb02 f303 	mul.w	r3, r2, r3
 80008dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80008de:	4413      	add	r3, r2
 80008e0:	64fb      	str	r3, [r7, #76]	; 0x4c
		HAL_FLASH_Unlock();
 80008e2:	f000 fc4d 	bl	8001180 <HAL_FLASH_Unlock>

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAddress, phraze[i]) != HAL_OK)
 80008e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	4413      	add	r3, r2
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	f04f 0300 	mov.w	r3, #0
 80008f4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80008f6:	2001      	movs	r0, #1
 80008f8:	f000 fbd2 	bl	80010a0 <HAL_FLASH_Program>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d017      	beq.n	8000932 <Flash_Write_Byte_Array+0xb6>
		{
			uint32_t er = HAL_FLASH_GetError();
 8000902:	f000 fc73 	bl	80011ec <HAL_FLASH_GetError>
 8000906:	64b8      	str	r0, [r7, #72]	; 0x48
			snprintf(str, 64, "Error Flash_Write(): %lu\n\r", er);
 8000908:	f107 0008 	add.w	r0, r7, #8
 800090c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800090e:	4a20      	ldr	r2, [pc, #128]	; (8000990 <Flash_Write_Byte_Array+0x114>)
 8000910:	2140      	movs	r1, #64	; 0x40
 8000912:	f002 f86d 	bl	80029f0 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 8000916:	f107 0308 	add.w	r3, r7, #8
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fc16 	bl	800014c <strlen>
 8000920:	4603      	mov	r3, r0
 8000922:	b29a      	uxth	r2, r3
 8000924:	f107 0108 	add.w	r1, r7, #8
 8000928:	2364      	movs	r3, #100	; 0x64
 800092a:	4817      	ldr	r0, [pc, #92]	; (8000988 <Flash_Write_Byte_Array+0x10c>)
 800092c:	f001 fba3 	bl	8002076 <HAL_UART_Transmit>
			while (1) {}
 8000930:	e7fe      	b.n	8000930 <Flash_Write_Byte_Array+0xb4>
		}

		snprintf(str, 64, "Write char (Hex: 0x%08lX) to address 0x%08lX OK\n\r",  phraze[i], currentAddress);
 8000932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	4413      	add	r3, r2
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	461a      	mov	r2, r3
 800093c:	f107 0008 	add.w	r0, r7, #8
 8000940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	4613      	mov	r3, r2
 8000946:	4a13      	ldr	r2, [pc, #76]	; (8000994 <Flash_Write_Byte_Array+0x118>)
 8000948:	2140      	movs	r1, #64	; 0x40
 800094a:	f002 f851 	bl	80029f0 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 800094e:	f107 0308 	add.w	r3, r7, #8
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fbfa 	bl	800014c <strlen>
 8000958:	4603      	mov	r3, r0
 800095a:	b29a      	uxth	r2, r3
 800095c:	f107 0108 	add.w	r1, r7, #8
 8000960:	2364      	movs	r3, #100	; 0x64
 8000962:	4809      	ldr	r0, [pc, #36]	; (8000988 <Flash_Write_Byte_Array+0x10c>)
 8000964:	f001 fb87 	bl	8002076 <HAL_UART_Transmit>

		HAL_FLASH_Lock();
 8000968:	f000 fc30 	bl	80011cc <HAL_FLASH_Lock>
	for(int i = 0; i < byteCount; i++)
 800096c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800096e:	3301      	adds	r3, #1
 8000970:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000972:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	429a      	cmp	r2, r3
 8000978:	dba3      	blt.n	80008c2 <Flash_Write_Byte_Array+0x46>
	}
}
 800097a:	bf00      	nop
 800097c:	bf00      	nop
 800097e:	3760      	adds	r7, #96	; 0x60
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	080032e4 	.word	0x080032e4
 8000988:	20000098 	.word	0x20000098
 800098c:	08003300 	.word	0x08003300
 8000990:	080033cc 	.word	0x080033cc
 8000994:	08003524 	.word	0x08003524

08000998 <Flash_Read_By_Byte>:

void Flash_Read_By_Byte(uint32_t address, int byteCount)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b096      	sub	sp, #88	; 0x58
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
	size_t SIZE_uint32 = sizeof(uint32_t);
 80009a2:	2304      	movs	r3, #4
 80009a4:	653b      	str	r3, [r7, #80]	; 0x50
	char str[64] = { 0, };
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	f107 030c 	add.w	r3, r7, #12
 80009ae:	223c      	movs	r2, #60	; 0x3c
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f002 f814 	bl	80029e0 <memset>

	for(int i = 0; i < byteCount; i++)
 80009b8:	2300      	movs	r3, #0
 80009ba:	657b      	str	r3, [r7, #84]	; 0x54
 80009bc:	e022      	b.n	8000a04 <Flash_Read_By_Byte+0x6c>
	{
		uint32_t currentAddress = address + i * SIZE_uint32;
 80009be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80009c2:	fb02 f303 	mul.w	r3, r2, r3
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	4413      	add	r3, r2
 80009ca:	64fb      	str	r3, [r7, #76]	; 0x4c
		uint16_t value = *(uint16_t*) currentAddress;
 80009cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009ce:	881b      	ldrh	r3, [r3, #0]
 80009d0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

		sprintf(str, "%c", value);
 80009d4:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80009d8:	f107 0308 	add.w	r3, r7, #8
 80009dc:	490e      	ldr	r1, [pc, #56]	; (8000a18 <Flash_Read_By_Byte+0x80>)
 80009de:	4618      	mov	r0, r3
 80009e0:	f002 f83a 	bl	8002a58 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 80009e4:	f107 0308 	add.w	r3, r7, #8
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fbaf 	bl	800014c <strlen>
 80009ee:	4603      	mov	r3, r0
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	f107 0108 	add.w	r1, r7, #8
 80009f6:	2364      	movs	r3, #100	; 0x64
 80009f8:	4808      	ldr	r0, [pc, #32]	; (8000a1c <Flash_Read_By_Byte+0x84>)
 80009fa:	f001 fb3c 	bl	8002076 <HAL_UART_Transmit>
	for(int i = 0; i < byteCount; i++)
 80009fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a00:	3301      	adds	r3, #1
 8000a02:	657b      	str	r3, [r7, #84]	; 0x54
 8000a04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	dbd8      	blt.n	80009be <Flash_Read_By_Byte+0x26>
	}

}
 8000a0c:	bf00      	nop
 8000a0e:	bf00      	nop
 8000a10:	3758      	adds	r7, #88	; 0x58
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	08003558 	.word	0x08003558
 8000a1c:	20000098 	.word	0x20000098

08000a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a24:	b672      	cpsid	i
}
 8000a26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <Error_Handler+0x8>
	...

08000a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a32:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <HAL_MspInit+0x5c>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	4a14      	ldr	r2, [pc, #80]	; (8000a88 <HAL_MspInit+0x5c>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6193      	str	r3, [r2, #24]
 8000a3e:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_MspInit+0x5c>)
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <HAL_MspInit+0x5c>)
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <HAL_MspInit+0x5c>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a54:	61d3      	str	r3, [r2, #28]
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <HAL_MspInit+0x5c>)
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000a62:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <HAL_MspInit+0x60>)
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <HAL_MspInit+0x60>)
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	40010000 	.word	0x40010000

08000a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b088      	sub	sp, #32
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0310 	add.w	r3, r7, #16
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a20      	ldr	r2, [pc, #128]	; (8000b2c <HAL_UART_MspInit+0x9c>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d139      	bne.n	8000b24 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <HAL_UART_MspInit+0xa0>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	4a1e      	ldr	r2, [pc, #120]	; (8000b30 <HAL_UART_MspInit+0xa0>)
 8000ab6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aba:	6193      	str	r3, [r2, #24]
 8000abc:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <HAL_UART_MspInit+0xa0>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac8:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <HAL_UART_MspInit+0xa0>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	4a18      	ldr	r2, [pc, #96]	; (8000b30 <HAL_UART_MspInit+0xa0>)
 8000ace:	f043 0304 	orr.w	r3, r3, #4
 8000ad2:	6193      	str	r3, [r2, #24]
 8000ad4:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <HAL_UART_MspInit+0xa0>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	f003 0304 	and.w	r3, r3, #4
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ae4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aea:	2303      	movs	r3, #3
 8000aec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aee:	f107 0310 	add.w	r3, r7, #16
 8000af2:	4619      	mov	r1, r3
 8000af4:	480f      	ldr	r0, [pc, #60]	; (8000b34 <HAL_UART_MspInit+0xa4>)
 8000af6:	f000 fcdd 	bl	80014b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000afa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000afe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4809      	ldr	r0, [pc, #36]	; (8000b34 <HAL_UART_MspInit+0xa4>)
 8000b10:	f000 fcd0 	bl	80014b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2100      	movs	r1, #0
 8000b18:	2025      	movs	r0, #37	; 0x25
 8000b1a:	f000 f9da 	bl	8000ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b1e:	2025      	movs	r0, #37	; 0x25
 8000b20:	f000 f9f3 	bl	8000f0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b24:	bf00      	nop
 8000b26:	3720      	adds	r7, #32
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40013800 	.word	0x40013800
 8000b30:	40021000 	.word	0x40021000
 8000b34:	40010800 	.word	0x40010800

08000b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <NMI_Handler+0x4>

08000b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <HardFault_Handler+0x4>

08000b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <MemManage_Handler+0x4>

08000b4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <BusFault_Handler+0x4>

08000b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <UsageFault_Handler+0x4>

08000b56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr

08000b62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr

08000b6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr

08000b7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b7e:	f000 f8b5 	bl	8000cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b8c:	4802      	ldr	r0, [pc, #8]	; (8000b98 <USART1_IRQHandler+0x10>)
 8000b8e:	f001 fb05 	bl	800219c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000098 	.word	0x20000098

08000b9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba4:	4a14      	ldr	r2, [pc, #80]	; (8000bf8 <_sbrk+0x5c>)
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <_sbrk+0x60>)
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb0:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d102      	bne.n	8000bbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <_sbrk+0x64>)
 8000bba:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <_sbrk+0x68>)
 8000bbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <_sbrk+0x64>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d207      	bcs.n	8000bdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bcc:	f001 fede 	bl	800298c <__errno>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bda:	e009      	b.n	8000bf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be2:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <_sbrk+0x64>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	4a05      	ldr	r2, [pc, #20]	; (8000c00 <_sbrk+0x64>)
 8000bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bee:	68fb      	ldr	r3, [r7, #12]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20002800 	.word	0x20002800
 8000bfc:	00000400 	.word	0x00000400
 8000c00:	2000008c 	.word	0x2000008c
 8000c04:	20000110 	.word	0x20000110

08000c08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr

08000c14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c14:	480c      	ldr	r0, [pc, #48]	; (8000c48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c16:	490d      	ldr	r1, [pc, #52]	; (8000c4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c18:	4a0d      	ldr	r2, [pc, #52]	; (8000c50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c1c:	e002      	b.n	8000c24 <LoopCopyDataInit>

08000c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c22:	3304      	adds	r3, #4

08000c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c28:	d3f9      	bcc.n	8000c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c2c:	4c0a      	ldr	r4, [pc, #40]	; (8000c58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c30:	e001      	b.n	8000c36 <LoopFillZerobss>

08000c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c34:	3204      	adds	r2, #4

08000c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c38:	d3fb      	bcc.n	8000c32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c3a:	f7ff ffe5 	bl	8000c08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c3e:	f001 feab 	bl	8002998 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c42:	f7ff fa8b 	bl	800015c <main>
  bx lr
 8000c46:	4770      	bx	lr
  ldr r0, =_sdata
 8000c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c4c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c50:	080035c0 	.word	0x080035c0
  ldr r2, =_sbss
 8000c54:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c58:	20000110 	.word	0x20000110

08000c5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c5c:	e7fe      	b.n	8000c5c <ADC1_2_IRQHandler>
	...

08000c60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <HAL_Init+0x28>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a07      	ldr	r2, [pc, #28]	; (8000c88 <HAL_Init+0x28>)
 8000c6a:	f043 0310 	orr.w	r3, r3, #16
 8000c6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c70:	2003      	movs	r0, #3
 8000c72:	f000 f923 	bl	8000ebc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c76:	200f      	movs	r0, #15
 8000c78:	f000 f808 	bl	8000c8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c7c:	f7ff fed6 	bl	8000a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40022000 	.word	0x40022000

08000c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_InitTick+0x54>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_InitTick+0x58>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 f93b 	bl	8000f26 <HAL_SYSTICK_Config>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e00e      	b.n	8000cd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2b0f      	cmp	r3, #15
 8000cbe:	d80a      	bhi.n	8000cd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	f000 f903 	bl	8000ed2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ccc:	4a06      	ldr	r2, [pc, #24]	; (8000ce8 <HAL_InitTick+0x5c>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e000      	b.n	8000cd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	20000004 	.word	0x20000004

08000cec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <HAL_IncTick+0x1c>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <HAL_IncTick+0x20>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	4a03      	ldr	r2, [pc, #12]	; (8000d0c <HAL_IncTick+0x20>)
 8000cfe:	6013      	str	r3, [r2, #0]
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	200000dc 	.word	0x200000dc

08000d10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;
 8000d14:	4b02      	ldr	r3, [pc, #8]	; (8000d20 <HAL_GetTick+0x10>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr
 8000d20:	200000dc 	.word	0x200000dc

08000d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <__NVIC_SetPriorityGrouping+0x44>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d40:	4013      	ands	r3, r2
 8000d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d56:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <__NVIC_SetPriorityGrouping+0x44>)
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	60d3      	str	r3, [r2, #12]
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d70:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <__NVIC_GetPriorityGrouping+0x18>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	0a1b      	lsrs	r3, r3, #8
 8000d76:	f003 0307 	and.w	r3, r3, #7
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	db0b      	blt.n	8000db2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	f003 021f 	and.w	r2, r3, #31
 8000da0:	4906      	ldr	r1, [pc, #24]	; (8000dbc <__NVIC_EnableIRQ+0x34>)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	095b      	lsrs	r3, r3, #5
 8000da8:	2001      	movs	r0, #1
 8000daa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	e000e100 	.word	0xe000e100

08000dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	db0a      	blt.n	8000dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	490c      	ldr	r1, [pc, #48]	; (8000e0c <__NVIC_SetPriority+0x4c>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	0112      	lsls	r2, r2, #4
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	440b      	add	r3, r1
 8000de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de8:	e00a      	b.n	8000e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4908      	ldr	r1, [pc, #32]	; (8000e10 <__NVIC_SetPriority+0x50>)
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	3b04      	subs	r3, #4
 8000df8:	0112      	lsls	r2, r2, #4
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	761a      	strb	r2, [r3, #24]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000e100 	.word	0xe000e100
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	; 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f1c3 0307 	rsb	r3, r3, #7
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	bf28      	it	cs
 8000e32:	2304      	movcs	r3, #4
 8000e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d902      	bls.n	8000e44 <NVIC_EncodePriority+0x30>
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3b03      	subs	r3, #3
 8000e42:	e000      	b.n	8000e46 <NVIC_EncodePriority+0x32>
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	f04f 32ff 	mov.w	r2, #4294967295
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43da      	mvns	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	401a      	ands	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43d9      	mvns	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	4313      	orrs	r3, r2
         );
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3724      	adds	r7, #36	; 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e88:	d301      	bcc.n	8000e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00f      	b.n	8000eae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <SysTick_Config+0x40>)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e96:	210f      	movs	r1, #15
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9c:	f7ff ff90 	bl	8000dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <SysTick_Config+0x40>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea6:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <SysTick_Config+0x40>)
 8000ea8:	2207      	movs	r2, #7
 8000eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	e000e010 	.word	0xe000e010

08000ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff ff2d 	bl	8000d24 <__NVIC_SetPriorityGrouping>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	4603      	mov	r3, r0
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	607a      	str	r2, [r7, #4]
 8000ede:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee4:	f7ff ff42 	bl	8000d6c <__NVIC_GetPriorityGrouping>
 8000ee8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	68b9      	ldr	r1, [r7, #8]
 8000eee:	6978      	ldr	r0, [r7, #20]
 8000ef0:	f7ff ff90 	bl	8000e14 <NVIC_EncodePriority>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff5f 	bl	8000dc0 <__NVIC_SetPriority>
}
 8000f02:	bf00      	nop
 8000f04:	3718      	adds	r7, #24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4603      	mov	r3, r0
 8000f12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff35 	bl	8000d88 <__NVIC_EnableIRQ>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ffa2 	bl	8000e78 <SysTick_Config>
 8000f34:	4603      	mov	r3, r0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b085      	sub	sp, #20
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d008      	beq.n	8000f66 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2204      	movs	r2, #4
 8000f58:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e020      	b.n	8000fa8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f022 020e 	bic.w	r2, r2, #14
 8000f74:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f022 0201 	bic.w	r2, r2, #1
 8000f84:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f8e:	2101      	movs	r1, #1
 8000f90:	fa01 f202 	lsl.w	r2, r1, r2
 8000f94:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr
	...

08000fb4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d005      	beq.n	8000fd6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2204      	movs	r2, #4
 8000fce:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	73fb      	strb	r3, [r7, #15]
 8000fd4:	e051      	b.n	800107a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f022 020e 	bic.w	r2, r2, #14
 8000fe4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f022 0201 	bic.w	r2, r2, #1
 8000ff4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a22      	ldr	r2, [pc, #136]	; (8001084 <HAL_DMA_Abort_IT+0xd0>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d029      	beq.n	8001054 <HAL_DMA_Abort_IT+0xa0>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a20      	ldr	r2, [pc, #128]	; (8001088 <HAL_DMA_Abort_IT+0xd4>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d022      	beq.n	8001050 <HAL_DMA_Abort_IT+0x9c>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a1f      	ldr	r2, [pc, #124]	; (800108c <HAL_DMA_Abort_IT+0xd8>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d01a      	beq.n	800104a <HAL_DMA_Abort_IT+0x96>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a1d      	ldr	r2, [pc, #116]	; (8001090 <HAL_DMA_Abort_IT+0xdc>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d012      	beq.n	8001044 <HAL_DMA_Abort_IT+0x90>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a1c      	ldr	r2, [pc, #112]	; (8001094 <HAL_DMA_Abort_IT+0xe0>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d00a      	beq.n	800103e <HAL_DMA_Abort_IT+0x8a>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a1a      	ldr	r2, [pc, #104]	; (8001098 <HAL_DMA_Abort_IT+0xe4>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d102      	bne.n	8001038 <HAL_DMA_Abort_IT+0x84>
 8001032:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001036:	e00e      	b.n	8001056 <HAL_DMA_Abort_IT+0xa2>
 8001038:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800103c:	e00b      	b.n	8001056 <HAL_DMA_Abort_IT+0xa2>
 800103e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001042:	e008      	b.n	8001056 <HAL_DMA_Abort_IT+0xa2>
 8001044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001048:	e005      	b.n	8001056 <HAL_DMA_Abort_IT+0xa2>
 800104a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800104e:	e002      	b.n	8001056 <HAL_DMA_Abort_IT+0xa2>
 8001050:	2310      	movs	r3, #16
 8001052:	e000      	b.n	8001056 <HAL_DMA_Abort_IT+0xa2>
 8001054:	2301      	movs	r3, #1
 8001056:	4a11      	ldr	r2, [pc, #68]	; (800109c <HAL_DMA_Abort_IT+0xe8>)
 8001058:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2201      	movs	r2, #1
 800105e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	4798      	blx	r3
    } 
  }
  return status;
 800107a:	7bfb      	ldrb	r3, [r7, #15]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40020008 	.word	0x40020008
 8001088:	4002001c 	.word	0x4002001c
 800108c:	40020030 	.word	0x40020030
 8001090:	40020044 	.word	0x40020044
 8001094:	40020058 	.word	0x40020058
 8001098:	4002006c 	.word	0x4002006c
 800109c:	40020000 	.word	0x40020000

080010a0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80010a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010a2:	b087      	sub	sp, #28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80010ba:	4b2f      	ldr	r3, [pc, #188]	; (8001178 <HAL_FLASH_Program+0xd8>)
 80010bc:	7e1b      	ldrb	r3, [r3, #24]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d101      	bne.n	80010c6 <HAL_FLASH_Program+0x26>
 80010c2:	2302      	movs	r3, #2
 80010c4:	e054      	b.n	8001170 <HAL_FLASH_Program+0xd0>
 80010c6:	4b2c      	ldr	r3, [pc, #176]	; (8001178 <HAL_FLASH_Program+0xd8>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80010cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010d0:	f000 f8b2 	bl	8001238 <FLASH_WaitForLastOperation>
 80010d4:	4603      	mov	r3, r0
 80010d6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80010d8:	7dfb      	ldrb	r3, [r7, #23]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d144      	bne.n	8001168 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d102      	bne.n	80010ea <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80010e4:	2301      	movs	r3, #1
 80010e6:	757b      	strb	r3, [r7, #21]
 80010e8:	e007      	b.n	80010fa <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d102      	bne.n	80010f6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80010f0:	2302      	movs	r3, #2
 80010f2:	757b      	strb	r3, [r7, #21]
 80010f4:	e001      	b.n	80010fa <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80010f6:	2304      	movs	r3, #4
 80010f8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	75bb      	strb	r3, [r7, #22]
 80010fe:	e02d      	b.n	800115c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001100:	7dbb      	ldrb	r3, [r7, #22]
 8001102:	005a      	lsls	r2, r3, #1
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	eb02 0c03 	add.w	ip, r2, r3
 800110a:	7dbb      	ldrb	r3, [r7, #22]
 800110c:	0119      	lsls	r1, r3, #4
 800110e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001112:	f1c1 0620 	rsb	r6, r1, #32
 8001116:	f1a1 0020 	sub.w	r0, r1, #32
 800111a:	fa22 f401 	lsr.w	r4, r2, r1
 800111e:	fa03 f606 	lsl.w	r6, r3, r6
 8001122:	4334      	orrs	r4, r6
 8001124:	fa23 f000 	lsr.w	r0, r3, r0
 8001128:	4304      	orrs	r4, r0
 800112a:	fa23 f501 	lsr.w	r5, r3, r1
 800112e:	b2a3      	uxth	r3, r4
 8001130:	4619      	mov	r1, r3
 8001132:	4660      	mov	r0, ip
 8001134:	f000 f864 	bl	8001200 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001138:	f24c 3050 	movw	r0, #50000	; 0xc350
 800113c:	f000 f87c 	bl	8001238 <FLASH_WaitForLastOperation>
 8001140:	4603      	mov	r3, r0
 8001142:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001144:	4b0d      	ldr	r3, [pc, #52]	; (800117c <HAL_FLASH_Program+0xdc>)
 8001146:	691b      	ldr	r3, [r3, #16]
 8001148:	4a0c      	ldr	r2, [pc, #48]	; (800117c <HAL_FLASH_Program+0xdc>)
 800114a:	f023 0301 	bic.w	r3, r3, #1
 800114e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001150:	7dfb      	ldrb	r3, [r7, #23]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d107      	bne.n	8001166 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001156:	7dbb      	ldrb	r3, [r7, #22]
 8001158:	3301      	adds	r3, #1
 800115a:	75bb      	strb	r3, [r7, #22]
 800115c:	7dba      	ldrb	r2, [r7, #22]
 800115e:	7d7b      	ldrb	r3, [r7, #21]
 8001160:	429a      	cmp	r2, r3
 8001162:	d3cd      	bcc.n	8001100 <HAL_FLASH_Program+0x60>
 8001164:	e000      	b.n	8001168 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001166:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001168:	4b03      	ldr	r3, [pc, #12]	; (8001178 <HAL_FLASH_Program+0xd8>)
 800116a:	2200      	movs	r2, #0
 800116c:	761a      	strb	r2, [r3, #24]

  return status;
 800116e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001170:	4618      	mov	r0, r3
 8001172:	371c      	adds	r7, #28
 8001174:	46bd      	mov	sp, r7
 8001176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001178:	200000e0 	.word	0x200000e0
 800117c:	40022000 	.word	0x40022000

08001180 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800118a:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <HAL_FLASH_Unlock+0x40>)
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00d      	beq.n	80011b2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <HAL_FLASH_Unlock+0x40>)
 8001198:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <HAL_FLASH_Unlock+0x44>)
 800119a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <HAL_FLASH_Unlock+0x40>)
 800119e:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <HAL_FLASH_Unlock+0x48>)
 80011a0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <HAL_FLASH_Unlock+0x40>)
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80011b2:	79fb      	ldrb	r3, [r7, #7]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40022000 	.word	0x40022000
 80011c4:	45670123 	.word	0x45670123
 80011c8:	cdef89ab 	.word	0xcdef89ab

080011cc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <HAL_FLASH_Lock+0x1c>)
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <HAL_FLASH_Lock+0x1c>)
 80011d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011da:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40022000 	.word	0x40022000

080011ec <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80011f0:	4b02      	ldr	r3, [pc, #8]	; (80011fc <HAL_FLASH_GetError+0x10>)
 80011f2:	69db      	ldr	r3, [r3, #28]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr
 80011fc:	200000e0 	.word	0x200000e0

08001200 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <FLASH_Program_HalfWord+0x30>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <FLASH_Program_HalfWord+0x34>)
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	4a07      	ldr	r2, [pc, #28]	; (8001234 <FLASH_Program_HalfWord+0x34>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	887a      	ldrh	r2, [r7, #2]
 8001222:	801a      	strh	r2, [r3, #0]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	200000e0 	.word	0x200000e0
 8001234:	40022000 	.word	0x40022000

08001238 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001240:	f7ff fd66 	bl	8000d10 <HAL_GetTick>
 8001244:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001246:	e010      	b.n	800126a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800124e:	d00c      	beq.n	800126a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d007      	beq.n	8001266 <FLASH_WaitForLastOperation+0x2e>
 8001256:	f7ff fd5b 	bl	8000d10 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	429a      	cmp	r2, r3
 8001264:	d201      	bcs.n	800126a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e025      	b.n	80012b6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <FLASH_WaitForLastOperation+0x88>)
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1e8      	bne.n	8001248 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001276:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <FLASH_WaitForLastOperation+0x88>)
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	f003 0320 	and.w	r3, r3, #32
 800127e:	2b00      	cmp	r3, #0
 8001280:	d002      	beq.n	8001288 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001282:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <FLASH_WaitForLastOperation+0x88>)
 8001284:	2220      	movs	r2, #32
 8001286:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001288:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <FLASH_WaitForLastOperation+0x88>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	f003 0310 	and.w	r3, r3, #16
 8001290:	2b00      	cmp	r3, #0
 8001292:	d10b      	bne.n	80012ac <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001294:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <FLASH_WaitForLastOperation+0x88>)
 8001296:	69db      	ldr	r3, [r3, #28]
 8001298:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800129c:	2b00      	cmp	r3, #0
 800129e:	d105      	bne.n	80012ac <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <FLASH_WaitForLastOperation+0x88>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80012ac:	f000 f80a 	bl	80012c4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e000      	b.n	80012b6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40022000 	.word	0x40022000

080012c4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80012ce:	4b23      	ldr	r3, [pc, #140]	; (800135c <FLASH_SetErrorCode+0x98>)
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	f003 0310 	and.w	r3, r3, #16
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d009      	beq.n	80012ee <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80012da:	4b21      	ldr	r3, [pc, #132]	; (8001360 <FLASH_SetErrorCode+0x9c>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	f043 0302 	orr.w	r3, r3, #2
 80012e2:	4a1f      	ldr	r2, [pc, #124]	; (8001360 <FLASH_SetErrorCode+0x9c>)
 80012e4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f043 0310 	orr.w	r3, r3, #16
 80012ec:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80012ee:	4b1b      	ldr	r3, [pc, #108]	; (800135c <FLASH_SetErrorCode+0x98>)
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	f003 0304 	and.w	r3, r3, #4
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d009      	beq.n	800130e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80012fa:	4b19      	ldr	r3, [pc, #100]	; (8001360 <FLASH_SetErrorCode+0x9c>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	4a17      	ldr	r2, [pc, #92]	; (8001360 <FLASH_SetErrorCode+0x9c>)
 8001304:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f043 0304 	orr.w	r3, r3, #4
 800130c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800130e:	4b13      	ldr	r3, [pc, #76]	; (800135c <FLASH_SetErrorCode+0x98>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00b      	beq.n	8001332 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <FLASH_SetErrorCode+0x9c>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	f043 0304 	orr.w	r3, r3, #4
 8001322:	4a0f      	ldr	r2, [pc, #60]	; (8001360 <FLASH_SetErrorCode+0x9c>)
 8001324:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001326:	4b0d      	ldr	r3, [pc, #52]	; (800135c <FLASH_SetErrorCode+0x98>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	4a0c      	ldr	r2, [pc, #48]	; (800135c <FLASH_SetErrorCode+0x98>)
 800132c:	f023 0301 	bic.w	r3, r3, #1
 8001330:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f240 1201 	movw	r2, #257	; 0x101
 8001338:	4293      	cmp	r3, r2
 800133a:	d106      	bne.n	800134a <FLASH_SetErrorCode+0x86>
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <FLASH_SetErrorCode+0x98>)
 800133e:	69db      	ldr	r3, [r3, #28]
 8001340:	4a06      	ldr	r2, [pc, #24]	; (800135c <FLASH_SetErrorCode+0x98>)
 8001342:	f023 0301 	bic.w	r3, r3, #1
 8001346:	61d3      	str	r3, [r2, #28]
}  
 8001348:	e002      	b.n	8001350 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800134a:	4a04      	ldr	r2, [pc, #16]	; (800135c <FLASH_SetErrorCode+0x98>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	60d3      	str	r3, [r2, #12]
}  
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40022000 	.word	0x40022000
 8001360:	200000e0 	.word	0x200000e0

08001364 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001376:	4b2f      	ldr	r3, [pc, #188]	; (8001434 <HAL_FLASHEx_Erase+0xd0>)
 8001378:	7e1b      	ldrb	r3, [r3, #24]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d101      	bne.n	8001382 <HAL_FLASHEx_Erase+0x1e>
 800137e:	2302      	movs	r3, #2
 8001380:	e053      	b.n	800142a <HAL_FLASHEx_Erase+0xc6>
 8001382:	4b2c      	ldr	r3, [pc, #176]	; (8001434 <HAL_FLASHEx_Erase+0xd0>)
 8001384:	2201      	movs	r2, #1
 8001386:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b02      	cmp	r3, #2
 800138e:	d116      	bne.n	80013be <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001390:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001394:	f7ff ff50 	bl	8001238 <FLASH_WaitForLastOperation>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d141      	bne.n	8001422 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800139e:	2001      	movs	r0, #1
 80013a0:	f000 f84c 	bl	800143c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013a8:	f7ff ff46 	bl	8001238 <FLASH_WaitForLastOperation>
 80013ac:	4603      	mov	r3, r0
 80013ae:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80013b0:	4b21      	ldr	r3, [pc, #132]	; (8001438 <HAL_FLASHEx_Erase+0xd4>)
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	4a20      	ldr	r2, [pc, #128]	; (8001438 <HAL_FLASHEx_Erase+0xd4>)
 80013b6:	f023 0304 	bic.w	r3, r3, #4
 80013ba:	6113      	str	r3, [r2, #16]
 80013bc:	e031      	b.n	8001422 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80013be:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013c2:	f7ff ff39 	bl	8001238 <FLASH_WaitForLastOperation>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d12a      	bne.n	8001422 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	f04f 32ff 	mov.w	r2, #4294967295
 80013d2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	e019      	b.n	8001410 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80013dc:	68b8      	ldr	r0, [r7, #8]
 80013de:	f000 f849 	bl	8001474 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013e2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013e6:	f7ff ff27 	bl	8001238 <FLASH_WaitForLastOperation>
 80013ea:	4603      	mov	r3, r0
 80013ec:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80013ee:	4b12      	ldr	r3, [pc, #72]	; (8001438 <HAL_FLASHEx_Erase+0xd4>)
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	4a11      	ldr	r2, [pc, #68]	; (8001438 <HAL_FLASHEx_Erase+0xd4>)
 80013f4:	f023 0302 	bic.w	r3, r3, #2
 80013f8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	601a      	str	r2, [r3, #0]
            break;
 8001406:	e00c      	b.n	8001422 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800140e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	029a      	lsls	r2, r3, #10
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	429a      	cmp	r2, r3
 8001420:	d3dc      	bcc.n	80013dc <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001422:	4b04      	ldr	r3, [pc, #16]	; (8001434 <HAL_FLASHEx_Erase+0xd0>)
 8001424:	2200      	movs	r2, #0
 8001426:	761a      	strb	r2, [r3, #24]

  return status;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200000e0 	.word	0x200000e0
 8001438:	40022000 	.word	0x40022000

0800143c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <FLASH_MassErase+0x30>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <FLASH_MassErase+0x34>)
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	4a08      	ldr	r2, [pc, #32]	; (8001470 <FLASH_MassErase+0x34>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <FLASH_MassErase+0x34>)
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	4a05      	ldr	r2, [pc, #20]	; (8001470 <FLASH_MassErase+0x34>)
 800145c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001460:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	200000e0 	.word	0x200000e0
 8001470:	40022000 	.word	0x40022000

08001474 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800147c:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <FLASH_PageErase+0x38>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <FLASH_PageErase+0x3c>)
 8001484:	691b      	ldr	r3, [r3, #16]
 8001486:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <FLASH_PageErase+0x3c>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800148e:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <FLASH_PageErase+0x3c>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <FLASH_PageErase+0x3c>)
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <FLASH_PageErase+0x3c>)
 800149a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800149e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	200000e0 	.word	0x200000e0
 80014b0:	40022000 	.word	0x40022000

080014b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b08b      	sub	sp, #44	; 0x2c
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c6:	e148      	b.n	800175a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014c8:	2201      	movs	r2, #1
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	69fa      	ldr	r2, [r7, #28]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	f040 8137 	bne.w	8001754 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	4aa3      	ldr	r2, [pc, #652]	; (8001778 <HAL_GPIO_Init+0x2c4>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d05e      	beq.n	80015ae <HAL_GPIO_Init+0xfa>
 80014f0:	4aa1      	ldr	r2, [pc, #644]	; (8001778 <HAL_GPIO_Init+0x2c4>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d875      	bhi.n	80015e2 <HAL_GPIO_Init+0x12e>
 80014f6:	4aa1      	ldr	r2, [pc, #644]	; (800177c <HAL_GPIO_Init+0x2c8>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d058      	beq.n	80015ae <HAL_GPIO_Init+0xfa>
 80014fc:	4a9f      	ldr	r2, [pc, #636]	; (800177c <HAL_GPIO_Init+0x2c8>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d86f      	bhi.n	80015e2 <HAL_GPIO_Init+0x12e>
 8001502:	4a9f      	ldr	r2, [pc, #636]	; (8001780 <HAL_GPIO_Init+0x2cc>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d052      	beq.n	80015ae <HAL_GPIO_Init+0xfa>
 8001508:	4a9d      	ldr	r2, [pc, #628]	; (8001780 <HAL_GPIO_Init+0x2cc>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d869      	bhi.n	80015e2 <HAL_GPIO_Init+0x12e>
 800150e:	4a9d      	ldr	r2, [pc, #628]	; (8001784 <HAL_GPIO_Init+0x2d0>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d04c      	beq.n	80015ae <HAL_GPIO_Init+0xfa>
 8001514:	4a9b      	ldr	r2, [pc, #620]	; (8001784 <HAL_GPIO_Init+0x2d0>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d863      	bhi.n	80015e2 <HAL_GPIO_Init+0x12e>
 800151a:	4a9b      	ldr	r2, [pc, #620]	; (8001788 <HAL_GPIO_Init+0x2d4>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d046      	beq.n	80015ae <HAL_GPIO_Init+0xfa>
 8001520:	4a99      	ldr	r2, [pc, #612]	; (8001788 <HAL_GPIO_Init+0x2d4>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d85d      	bhi.n	80015e2 <HAL_GPIO_Init+0x12e>
 8001526:	2b12      	cmp	r3, #18
 8001528:	d82a      	bhi.n	8001580 <HAL_GPIO_Init+0xcc>
 800152a:	2b12      	cmp	r3, #18
 800152c:	d859      	bhi.n	80015e2 <HAL_GPIO_Init+0x12e>
 800152e:	a201      	add	r2, pc, #4	; (adr r2, 8001534 <HAL_GPIO_Init+0x80>)
 8001530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001534:	080015af 	.word	0x080015af
 8001538:	08001589 	.word	0x08001589
 800153c:	0800159b 	.word	0x0800159b
 8001540:	080015dd 	.word	0x080015dd
 8001544:	080015e3 	.word	0x080015e3
 8001548:	080015e3 	.word	0x080015e3
 800154c:	080015e3 	.word	0x080015e3
 8001550:	080015e3 	.word	0x080015e3
 8001554:	080015e3 	.word	0x080015e3
 8001558:	080015e3 	.word	0x080015e3
 800155c:	080015e3 	.word	0x080015e3
 8001560:	080015e3 	.word	0x080015e3
 8001564:	080015e3 	.word	0x080015e3
 8001568:	080015e3 	.word	0x080015e3
 800156c:	080015e3 	.word	0x080015e3
 8001570:	080015e3 	.word	0x080015e3
 8001574:	080015e3 	.word	0x080015e3
 8001578:	08001591 	.word	0x08001591
 800157c:	080015a5 	.word	0x080015a5
 8001580:	4a82      	ldr	r2, [pc, #520]	; (800178c <HAL_GPIO_Init+0x2d8>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d013      	beq.n	80015ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001586:	e02c      	b.n	80015e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	623b      	str	r3, [r7, #32]
          break;
 800158e:	e029      	b.n	80015e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	3304      	adds	r3, #4
 8001596:	623b      	str	r3, [r7, #32]
          break;
 8001598:	e024      	b.n	80015e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	3308      	adds	r3, #8
 80015a0:	623b      	str	r3, [r7, #32]
          break;
 80015a2:	e01f      	b.n	80015e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	330c      	adds	r3, #12
 80015aa:	623b      	str	r3, [r7, #32]
          break;
 80015ac:	e01a      	b.n	80015e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d102      	bne.n	80015bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015b6:	2304      	movs	r3, #4
 80015b8:	623b      	str	r3, [r7, #32]
          break;
 80015ba:	e013      	b.n	80015e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d105      	bne.n	80015d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015c4:	2308      	movs	r3, #8
 80015c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69fa      	ldr	r2, [r7, #28]
 80015cc:	611a      	str	r2, [r3, #16]
          break;
 80015ce:	e009      	b.n	80015e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015d0:	2308      	movs	r3, #8
 80015d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	615a      	str	r2, [r3, #20]
          break;
 80015da:	e003      	b.n	80015e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015dc:	2300      	movs	r3, #0
 80015de:	623b      	str	r3, [r7, #32]
          break;
 80015e0:	e000      	b.n	80015e4 <HAL_GPIO_Init+0x130>
          break;
 80015e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	2bff      	cmp	r3, #255	; 0xff
 80015e8:	d801      	bhi.n	80015ee <HAL_GPIO_Init+0x13a>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	e001      	b.n	80015f2 <HAL_GPIO_Init+0x13e>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3304      	adds	r3, #4
 80015f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	2bff      	cmp	r3, #255	; 0xff
 80015f8:	d802      	bhi.n	8001600 <HAL_GPIO_Init+0x14c>
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	e002      	b.n	8001606 <HAL_GPIO_Init+0x152>
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	3b08      	subs	r3, #8
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	210f      	movs	r1, #15
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	fa01 f303 	lsl.w	r3, r1, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	401a      	ands	r2, r3
 8001618:	6a39      	ldr	r1, [r7, #32]
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	fa01 f303 	lsl.w	r3, r1, r3
 8001620:	431a      	orrs	r2, r3
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 8090 	beq.w	8001754 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001634:	4b56      	ldr	r3, [pc, #344]	; (8001790 <HAL_GPIO_Init+0x2dc>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	4a55      	ldr	r2, [pc, #340]	; (8001790 <HAL_GPIO_Init+0x2dc>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6193      	str	r3, [r2, #24]
 8001640:	4b53      	ldr	r3, [pc, #332]	; (8001790 <HAL_GPIO_Init+0x2dc>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800164c:	4a51      	ldr	r2, [pc, #324]	; (8001794 <HAL_GPIO_Init+0x2e0>)
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	089b      	lsrs	r3, r3, #2
 8001652:	3302      	adds	r3, #2
 8001654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001658:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	220f      	movs	r2, #15
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	4013      	ands	r3, r2
 800166e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a49      	ldr	r2, [pc, #292]	; (8001798 <HAL_GPIO_Init+0x2e4>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d00d      	beq.n	8001694 <HAL_GPIO_Init+0x1e0>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a48      	ldr	r2, [pc, #288]	; (800179c <HAL_GPIO_Init+0x2e8>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d007      	beq.n	8001690 <HAL_GPIO_Init+0x1dc>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a47      	ldr	r2, [pc, #284]	; (80017a0 <HAL_GPIO_Init+0x2ec>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d101      	bne.n	800168c <HAL_GPIO_Init+0x1d8>
 8001688:	2302      	movs	r3, #2
 800168a:	e004      	b.n	8001696 <HAL_GPIO_Init+0x1e2>
 800168c:	2303      	movs	r3, #3
 800168e:	e002      	b.n	8001696 <HAL_GPIO_Init+0x1e2>
 8001690:	2301      	movs	r3, #1
 8001692:	e000      	b.n	8001696 <HAL_GPIO_Init+0x1e2>
 8001694:	2300      	movs	r3, #0
 8001696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001698:	f002 0203 	and.w	r2, r2, #3
 800169c:	0092      	lsls	r2, r2, #2
 800169e:	4093      	lsls	r3, r2
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016a6:	493b      	ldr	r1, [pc, #236]	; (8001794 <HAL_GPIO_Init+0x2e0>)
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	089b      	lsrs	r3, r3, #2
 80016ac:	3302      	adds	r3, #2
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d006      	beq.n	80016ce <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016c0:	4b38      	ldr	r3, [pc, #224]	; (80017a4 <HAL_GPIO_Init+0x2f0>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4937      	ldr	r1, [pc, #220]	; (80017a4 <HAL_GPIO_Init+0x2f0>)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	600b      	str	r3, [r1, #0]
 80016cc:	e006      	b.n	80016dc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016ce:	4b35      	ldr	r3, [pc, #212]	; (80017a4 <HAL_GPIO_Init+0x2f0>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	43db      	mvns	r3, r3
 80016d6:	4933      	ldr	r1, [pc, #204]	; (80017a4 <HAL_GPIO_Init+0x2f0>)
 80016d8:	4013      	ands	r3, r2
 80016da:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d006      	beq.n	80016f6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016e8:	4b2e      	ldr	r3, [pc, #184]	; (80017a4 <HAL_GPIO_Init+0x2f0>)
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	492d      	ldr	r1, [pc, #180]	; (80017a4 <HAL_GPIO_Init+0x2f0>)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	604b      	str	r3, [r1, #4]
 80016f4:	e006      	b.n	8001704 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016f6:	4b2b      	ldr	r3, [pc, #172]	; (80017a4 <HAL_GPIO_Init+0x2f0>)
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	4929      	ldr	r1, [pc, #164]	; (80017a4 <HAL_GPIO_Init+0x2f0>)
 8001700:	4013      	ands	r3, r2
 8001702:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d006      	beq.n	800171e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001710:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <HAL_GPIO_Init+0x2f0>)
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	4923      	ldr	r1, [pc, #140]	; (80017a4 <HAL_GPIO_Init+0x2f0>)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	4313      	orrs	r3, r2
 800171a:	608b      	str	r3, [r1, #8]
 800171c:	e006      	b.n	800172c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800171e:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <HAL_GPIO_Init+0x2f0>)
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	43db      	mvns	r3, r3
 8001726:	491f      	ldr	r1, [pc, #124]	; (80017a4 <HAL_GPIO_Init+0x2f0>)
 8001728:	4013      	ands	r3, r2
 800172a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d006      	beq.n	8001746 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001738:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <HAL_GPIO_Init+0x2f0>)
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	4919      	ldr	r1, [pc, #100]	; (80017a4 <HAL_GPIO_Init+0x2f0>)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	4313      	orrs	r3, r2
 8001742:	60cb      	str	r3, [r1, #12]
 8001744:	e006      	b.n	8001754 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001746:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <HAL_GPIO_Init+0x2f0>)
 8001748:	68da      	ldr	r2, [r3, #12]
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	43db      	mvns	r3, r3
 800174e:	4915      	ldr	r1, [pc, #84]	; (80017a4 <HAL_GPIO_Init+0x2f0>)
 8001750:	4013      	ands	r3, r2
 8001752:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	3301      	adds	r3, #1
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	fa22 f303 	lsr.w	r3, r2, r3
 8001764:	2b00      	cmp	r3, #0
 8001766:	f47f aeaf 	bne.w	80014c8 <HAL_GPIO_Init+0x14>
  }
}
 800176a:	bf00      	nop
 800176c:	bf00      	nop
 800176e:	372c      	adds	r7, #44	; 0x2c
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	10320000 	.word	0x10320000
 800177c:	10310000 	.word	0x10310000
 8001780:	10220000 	.word	0x10220000
 8001784:	10210000 	.word	0x10210000
 8001788:	10120000 	.word	0x10120000
 800178c:	10110000 	.word	0x10110000
 8001790:	40021000 	.word	0x40021000
 8001794:	40010000 	.word	0x40010000
 8001798:	40010800 	.word	0x40010800
 800179c:	40010c00 	.word	0x40010c00
 80017a0:	40011000 	.word	0x40011000
 80017a4:	40010400 	.word	0x40010400

080017a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e26c      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 8087 	beq.w	80018d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017c8:	4b92      	ldr	r3, [pc, #584]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 030c 	and.w	r3, r3, #12
 80017d0:	2b04      	cmp	r3, #4
 80017d2:	d00c      	beq.n	80017ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017d4:	4b8f      	ldr	r3, [pc, #572]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 030c 	and.w	r3, r3, #12
 80017dc:	2b08      	cmp	r3, #8
 80017de:	d112      	bne.n	8001806 <HAL_RCC_OscConfig+0x5e>
 80017e0:	4b8c      	ldr	r3, [pc, #560]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ec:	d10b      	bne.n	8001806 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ee:	4b89      	ldr	r3, [pc, #548]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d06c      	beq.n	80018d4 <HAL_RCC_OscConfig+0x12c>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d168      	bne.n	80018d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e246      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800180e:	d106      	bne.n	800181e <HAL_RCC_OscConfig+0x76>
 8001810:	4b80      	ldr	r3, [pc, #512]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a7f      	ldr	r2, [pc, #508]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	e02e      	b.n	800187c <HAL_RCC_OscConfig+0xd4>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10c      	bne.n	8001840 <HAL_RCC_OscConfig+0x98>
 8001826:	4b7b      	ldr	r3, [pc, #492]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a7a      	ldr	r2, [pc, #488]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 800182c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	4b78      	ldr	r3, [pc, #480]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a77      	ldr	r2, [pc, #476]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001838:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	e01d      	b.n	800187c <HAL_RCC_OscConfig+0xd4>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001848:	d10c      	bne.n	8001864 <HAL_RCC_OscConfig+0xbc>
 800184a:	4b72      	ldr	r3, [pc, #456]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a71      	ldr	r2, [pc, #452]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	4b6f      	ldr	r3, [pc, #444]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a6e      	ldr	r2, [pc, #440]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 800185c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	e00b      	b.n	800187c <HAL_RCC_OscConfig+0xd4>
 8001864:	4b6b      	ldr	r3, [pc, #428]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a6a      	ldr	r2, [pc, #424]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 800186a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	4b68      	ldr	r3, [pc, #416]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a67      	ldr	r2, [pc, #412]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800187a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d013      	beq.n	80018ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001884:	f7ff fa44 	bl	8000d10 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800188c:	f7ff fa40 	bl	8000d10 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b64      	cmp	r3, #100	; 0x64
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e1fa      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189e:	4b5d      	ldr	r3, [pc, #372]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0xe4>
 80018aa:	e014      	b.n	80018d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ac:	f7ff fa30 	bl	8000d10 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b4:	f7ff fa2c 	bl	8000d10 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b64      	cmp	r3, #100	; 0x64
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e1e6      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c6:	4b53      	ldr	r3, [pc, #332]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x10c>
 80018d2:	e000      	b.n	80018d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d063      	beq.n	80019aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018e2:	4b4c      	ldr	r3, [pc, #304]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 030c 	and.w	r3, r3, #12
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00b      	beq.n	8001906 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018ee:	4b49      	ldr	r3, [pc, #292]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 030c 	and.w	r3, r3, #12
 80018f6:	2b08      	cmp	r3, #8
 80018f8:	d11c      	bne.n	8001934 <HAL_RCC_OscConfig+0x18c>
 80018fa:	4b46      	ldr	r3, [pc, #280]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d116      	bne.n	8001934 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001906:	4b43      	ldr	r3, [pc, #268]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d005      	beq.n	800191e <HAL_RCC_OscConfig+0x176>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d001      	beq.n	800191e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e1ba      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191e:	4b3d      	ldr	r3, [pc, #244]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	4939      	ldr	r1, [pc, #228]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 800192e:	4313      	orrs	r3, r2
 8001930:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001932:	e03a      	b.n	80019aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d020      	beq.n	800197e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800193c:	4b36      	ldr	r3, [pc, #216]	; (8001a18 <HAL_RCC_OscConfig+0x270>)
 800193e:	2201      	movs	r2, #1
 8001940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001942:	f7ff f9e5 	bl	8000d10 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800194a:	f7ff f9e1 	bl	8000d10 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e19b      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195c:	4b2d      	ldr	r3, [pc, #180]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0f0      	beq.n	800194a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001968:	4b2a      	ldr	r3, [pc, #168]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	4927      	ldr	r1, [pc, #156]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001978:	4313      	orrs	r3, r2
 800197a:	600b      	str	r3, [r1, #0]
 800197c:	e015      	b.n	80019aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800197e:	4b26      	ldr	r3, [pc, #152]	; (8001a18 <HAL_RCC_OscConfig+0x270>)
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001984:	f7ff f9c4 	bl	8000d10 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800198c:	f7ff f9c0 	bl	8000d10 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e17a      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199e:	4b1d      	ldr	r3, [pc, #116]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d03a      	beq.n	8001a2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d019      	beq.n	80019f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019be:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c4:	f7ff f9a4 	bl	8000d10 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019cc:	f7ff f9a0 	bl	8000d10 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e15a      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019de:	4b0d      	ldr	r3, [pc, #52]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019ea:	2001      	movs	r0, #1
 80019ec:	f000 fad8 	bl	8001fa0 <RCC_Delay>
 80019f0:	e01c      	b.n	8001a2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019f2:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f8:	f7ff f98a 	bl	8000d10 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019fe:	e00f      	b.n	8001a20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a00:	f7ff f986 	bl	8000d10 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d908      	bls.n	8001a20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e140      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>
 8001a12:	bf00      	nop
 8001a14:	40021000 	.word	0x40021000
 8001a18:	42420000 	.word	0x42420000
 8001a1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a20:	4b9e      	ldr	r3, [pc, #632]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1e9      	bne.n	8001a00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 80a6 	beq.w	8001b86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a3e:	4b97      	ldr	r3, [pc, #604]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10d      	bne.n	8001a66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a4a:	4b94      	ldr	r3, [pc, #592]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	4a93      	ldr	r2, [pc, #588]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a54:	61d3      	str	r3, [r2, #28]
 8001a56:	4b91      	ldr	r3, [pc, #580]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a62:	2301      	movs	r3, #1
 8001a64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a66:	4b8e      	ldr	r3, [pc, #568]	; (8001ca0 <HAL_RCC_OscConfig+0x4f8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d118      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a72:	4b8b      	ldr	r3, [pc, #556]	; (8001ca0 <HAL_RCC_OscConfig+0x4f8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a8a      	ldr	r2, [pc, #552]	; (8001ca0 <HAL_RCC_OscConfig+0x4f8>)
 8001a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a7e:	f7ff f947 	bl	8000d10 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a86:	f7ff f943 	bl	8000d10 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b64      	cmp	r3, #100	; 0x64
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e0fd      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a98:	4b81      	ldr	r3, [pc, #516]	; (8001ca0 <HAL_RCC_OscConfig+0x4f8>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d106      	bne.n	8001aba <HAL_RCC_OscConfig+0x312>
 8001aac:	4b7b      	ldr	r3, [pc, #492]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	4a7a      	ldr	r2, [pc, #488]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6213      	str	r3, [r2, #32]
 8001ab8:	e02d      	b.n	8001b16 <HAL_RCC_OscConfig+0x36e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10c      	bne.n	8001adc <HAL_RCC_OscConfig+0x334>
 8001ac2:	4b76      	ldr	r3, [pc, #472]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	4a75      	ldr	r2, [pc, #468]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001ac8:	f023 0301 	bic.w	r3, r3, #1
 8001acc:	6213      	str	r3, [r2, #32]
 8001ace:	4b73      	ldr	r3, [pc, #460]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	4a72      	ldr	r2, [pc, #456]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001ad4:	f023 0304 	bic.w	r3, r3, #4
 8001ad8:	6213      	str	r3, [r2, #32]
 8001ada:	e01c      	b.n	8001b16 <HAL_RCC_OscConfig+0x36e>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	2b05      	cmp	r3, #5
 8001ae2:	d10c      	bne.n	8001afe <HAL_RCC_OscConfig+0x356>
 8001ae4:	4b6d      	ldr	r3, [pc, #436]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	4a6c      	ldr	r2, [pc, #432]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001aea:	f043 0304 	orr.w	r3, r3, #4
 8001aee:	6213      	str	r3, [r2, #32]
 8001af0:	4b6a      	ldr	r3, [pc, #424]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	4a69      	ldr	r2, [pc, #420]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6213      	str	r3, [r2, #32]
 8001afc:	e00b      	b.n	8001b16 <HAL_RCC_OscConfig+0x36e>
 8001afe:	4b67      	ldr	r3, [pc, #412]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	4a66      	ldr	r2, [pc, #408]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001b04:	f023 0301 	bic.w	r3, r3, #1
 8001b08:	6213      	str	r3, [r2, #32]
 8001b0a:	4b64      	ldr	r3, [pc, #400]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	4a63      	ldr	r2, [pc, #396]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001b10:	f023 0304 	bic.w	r3, r3, #4
 8001b14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d015      	beq.n	8001b4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1e:	f7ff f8f7 	bl	8000d10 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b24:	e00a      	b.n	8001b3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b26:	f7ff f8f3 	bl	8000d10 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e0ab      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b3c:	4b57      	ldr	r3, [pc, #348]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0ee      	beq.n	8001b26 <HAL_RCC_OscConfig+0x37e>
 8001b48:	e014      	b.n	8001b74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b4a:	f7ff f8e1 	bl	8000d10 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b50:	e00a      	b.n	8001b68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b52:	f7ff f8dd 	bl	8000d10 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e095      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b68:	4b4c      	ldr	r3, [pc, #304]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1ee      	bne.n	8001b52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b74:	7dfb      	ldrb	r3, [r7, #23]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d105      	bne.n	8001b86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b7a:	4b48      	ldr	r3, [pc, #288]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	4a47      	ldr	r2, [pc, #284]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001b80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 8081 	beq.w	8001c92 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b90:	4b42      	ldr	r3, [pc, #264]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 030c 	and.w	r3, r3, #12
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d061      	beq.n	8001c60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d146      	bne.n	8001c32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba4:	4b3f      	ldr	r3, [pc, #252]	; (8001ca4 <HAL_RCC_OscConfig+0x4fc>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001baa:	f7ff f8b1 	bl	8000d10 <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb2:	f7ff f8ad 	bl	8000d10 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e067      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc4:	4b35      	ldr	r3, [pc, #212]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1f0      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd8:	d108      	bne.n	8001bec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bda:	4b30      	ldr	r3, [pc, #192]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	492d      	ldr	r1, [pc, #180]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bec:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a19      	ldr	r1, [r3, #32]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	430b      	orrs	r3, r1
 8001bfe:	4927      	ldr	r1, [pc, #156]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c04:	4b27      	ldr	r3, [pc, #156]	; (8001ca4 <HAL_RCC_OscConfig+0x4fc>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0a:	f7ff f881 	bl	8000d10 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c12:	f7ff f87d 	bl	8000d10 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e037      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c24:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0f0      	beq.n	8001c12 <HAL_RCC_OscConfig+0x46a>
 8001c30:	e02f      	b.n	8001c92 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c32:	4b1c      	ldr	r3, [pc, #112]	; (8001ca4 <HAL_RCC_OscConfig+0x4fc>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c38:	f7ff f86a 	bl	8000d10 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c40:	f7ff f866 	bl	8000d10 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e020      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c52:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0x498>
 8001c5e:	e018      	b.n	8001c92 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d101      	bne.n	8001c6c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e013      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d106      	bne.n	8001c8e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d001      	beq.n	8001c92 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40007000 	.word	0x40007000
 8001ca4:	42420060 	.word	0x42420060

08001ca8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0d0      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cbc:	4b6a      	ldr	r3, [pc, #424]	; (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d910      	bls.n	8001cec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cca:	4b67      	ldr	r3, [pc, #412]	; (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f023 0207 	bic.w	r2, r3, #7
 8001cd2:	4965      	ldr	r1, [pc, #404]	; (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cda:	4b63      	ldr	r3, [pc, #396]	; (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d001      	beq.n	8001cec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0b8      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d020      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d04:	4b59      	ldr	r3, [pc, #356]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	4a58      	ldr	r2, [pc, #352]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d005      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d1c:	4b53      	ldr	r3, [pc, #332]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	4a52      	ldr	r2, [pc, #328]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d28:	4b50      	ldr	r3, [pc, #320]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	494d      	ldr	r1, [pc, #308]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d040      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d107      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4e:	4b47      	ldr	r3, [pc, #284]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d115      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e07f      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d107      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d66:	4b41      	ldr	r3, [pc, #260]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d109      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e073      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d76:	4b3d      	ldr	r3, [pc, #244]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e06b      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d86:	4b39      	ldr	r3, [pc, #228]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f023 0203 	bic.w	r2, r3, #3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	4936      	ldr	r1, [pc, #216]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d98:	f7fe ffba 	bl	8000d10 <HAL_GetTick>
 8001d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9e:	e00a      	b.n	8001db6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da0:	f7fe ffb6 	bl	8000d10 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e053      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db6:	4b2d      	ldr	r3, [pc, #180]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 020c 	and.w	r2, r3, #12
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d1eb      	bne.n	8001da0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc8:	4b27      	ldr	r3, [pc, #156]	; (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d210      	bcs.n	8001df8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd6:	4b24      	ldr	r3, [pc, #144]	; (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 0207 	bic.w	r2, r3, #7
 8001dde:	4922      	ldr	r1, [pc, #136]	; (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de6:	4b20      	ldr	r3, [pc, #128]	; (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d001      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e032      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d008      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e04:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	4916      	ldr	r1, [pc, #88]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d009      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e22:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	490e      	ldr	r1, [pc, #56]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e36:	f000 f821 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	490a      	ldr	r1, [pc, #40]	; (8001e70 <HAL_RCC_ClockConfig+0x1c8>)
 8001e48:	5ccb      	ldrb	r3, [r1, r3]
 8001e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4e:	4a09      	ldr	r2, [pc, #36]	; (8001e74 <HAL_RCC_ClockConfig+0x1cc>)
 8001e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <HAL_RCC_ClockConfig+0x1d0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe ff18 	bl	8000c8c <HAL_InitTick>

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40022000 	.word	0x40022000
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	0800356c 	.word	0x0800356c
 8001e74:	20000000 	.word	0x20000000
 8001e78:	20000004 	.word	0x20000004

08001e7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e7c:	b490      	push	{r4, r7}
 8001e7e:	b08a      	sub	sp, #40	; 0x28
 8001e80:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e82:	4b2a      	ldr	r3, [pc, #168]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e84:	1d3c      	adds	r4, r7, #4
 8001e86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e8c:	f240 2301 	movw	r3, #513	; 0x201
 8001e90:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]
 8001e96:	2300      	movs	r3, #0
 8001e98:	61bb      	str	r3, [r7, #24]
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ea6:	4b22      	ldr	r3, [pc, #136]	; (8001f30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f003 030c 	and.w	r3, r3, #12
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d002      	beq.n	8001ebc <HAL_RCC_GetSysClockFreq+0x40>
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d003      	beq.n	8001ec2 <HAL_RCC_GetSysClockFreq+0x46>
 8001eba:	e02d      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ebc:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ebe:	623b      	str	r3, [r7, #32]
      break;
 8001ec0:	e02d      	b.n	8001f1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	0c9b      	lsrs	r3, r3, #18
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ece:	4413      	add	r3, r2
 8001ed0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ed4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d013      	beq.n	8001f08 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ee0:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	0c5b      	lsrs	r3, r3, #17
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001eee:	4413      	add	r3, r2
 8001ef0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ef4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	4a0e      	ldr	r2, [pc, #56]	; (8001f34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001efa:	fb02 f203 	mul.w	r2, r2, r3
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
 8001f06:	e004      	b.n	8001f12 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	4a0b      	ldr	r2, [pc, #44]	; (8001f38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f0c:	fb02 f303 	mul.w	r3, r2, r3
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	623b      	str	r3, [r7, #32]
      break;
 8001f16:	e002      	b.n	8001f1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f1a:	623b      	str	r3, [r7, #32]
      break;
 8001f1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3728      	adds	r7, #40	; 0x28
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc90      	pop	{r4, r7}
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	0800355c 	.word	0x0800355c
 8001f30:	40021000 	.word	0x40021000
 8001f34:	007a1200 	.word	0x007a1200
 8001f38:	003d0900 	.word	0x003d0900

08001f3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f40:	4b02      	ldr	r3, [pc, #8]	; (8001f4c <HAL_RCC_GetHCLKFreq+0x10>)
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr
 8001f4c:	20000000 	.word	0x20000000

08001f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f54:	f7ff fff2 	bl	8001f3c <HAL_RCC_GetHCLKFreq>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	0a1b      	lsrs	r3, r3, #8
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	4903      	ldr	r1, [pc, #12]	; (8001f74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f66:	5ccb      	ldrb	r3, [r1, r3]
 8001f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40021000 	.word	0x40021000
 8001f74:	0800357c 	.word	0x0800357c

08001f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f7c:	f7ff ffde 	bl	8001f3c <HAL_RCC_GetHCLKFreq>
 8001f80:	4602      	mov	r2, r0
 8001f82:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	0adb      	lsrs	r3, r3, #11
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	4903      	ldr	r1, [pc, #12]	; (8001f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f8e:	5ccb      	ldrb	r3, [r1, r3]
 8001f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	0800357c 	.word	0x0800357c

08001fa0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fa8:	4b0a      	ldr	r3, [pc, #40]	; (8001fd4 <RCC_Delay+0x34>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <RCC_Delay+0x38>)
 8001fae:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb2:	0a5b      	lsrs	r3, r3, #9
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	fb02 f303 	mul.w	r3, r2, r3
 8001fba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fbc:	bf00      	nop
  }
  while (Delay --);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	1e5a      	subs	r2, r3, #1
 8001fc2:	60fa      	str	r2, [r7, #12]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1f9      	bne.n	8001fbc <RCC_Delay+0x1c>
}
 8001fc8:	bf00      	nop
 8001fca:	bf00      	nop
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	10624dd3 	.word	0x10624dd3

08001fdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e03f      	b.n	800206e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d106      	bne.n	8002008 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7fe fd44 	bl	8000a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2224      	movs	r2, #36	; 0x24
 800200c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68da      	ldr	r2, [r3, #12]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800201e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 fc25 	bl	8002870 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	691a      	ldr	r2, [r3, #16]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002034:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	695a      	ldr	r2, [r3, #20]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002044:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68da      	ldr	r2, [r3, #12]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002054:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2220      	movs	r2, #32
 8002060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2220      	movs	r2, #32
 8002068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b08a      	sub	sp, #40	; 0x28
 800207a:	af02      	add	r7, sp, #8
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	603b      	str	r3, [r7, #0]
 8002082:	4613      	mov	r3, r2
 8002084:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b20      	cmp	r3, #32
 8002094:	d17c      	bne.n	8002190 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d002      	beq.n	80020a2 <HAL_UART_Transmit+0x2c>
 800209c:	88fb      	ldrh	r3, [r7, #6]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e075      	b.n	8002192 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_UART_Transmit+0x3e>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e06e      	b.n	8002192 <HAL_UART_Transmit+0x11c>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2221      	movs	r2, #33	; 0x21
 80020c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020ca:	f7fe fe21 	bl	8000d10 <HAL_GetTick>
 80020ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	88fa      	ldrh	r2, [r7, #6]
 80020d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	88fa      	ldrh	r2, [r7, #6]
 80020da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020e4:	d108      	bne.n	80020f8 <HAL_UART_Transmit+0x82>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d104      	bne.n	80020f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	61bb      	str	r3, [r7, #24]
 80020f6:	e003      	b.n	8002100 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002108:	e02a      	b.n	8002160 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	2200      	movs	r2, #0
 8002112:	2180      	movs	r1, #128	; 0x80
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 fa11 	bl	800253c <UART_WaitOnFlagUntilTimeout>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e036      	b.n	8002192 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10b      	bne.n	8002142 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	461a      	mov	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002138:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	3302      	adds	r3, #2
 800213e:	61bb      	str	r3, [r7, #24]
 8002140:	e007      	b.n	8002152 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	781a      	ldrb	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	3301      	adds	r3, #1
 8002150:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002156:	b29b      	uxth	r3, r3
 8002158:	3b01      	subs	r3, #1
 800215a:	b29a      	uxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002164:	b29b      	uxth	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1cf      	bne.n	800210a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2200      	movs	r2, #0
 8002172:	2140      	movs	r1, #64	; 0x40
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 f9e1 	bl	800253c <UART_WaitOnFlagUntilTimeout>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e006      	b.n	8002192 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2220      	movs	r2, #32
 8002188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	e000      	b.n	8002192 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002190:	2302      	movs	r3, #2
  }
}
 8002192:	4618      	mov	r0, r3
 8002194:	3720      	adds	r7, #32
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
	...

0800219c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08a      	sub	sp, #40	; 0x28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80021bc:	2300      	movs	r3, #0
 80021be:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10d      	bne.n	80021ee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	f003 0320 	and.w	r3, r3, #32
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d008      	beq.n	80021ee <HAL_UART_IRQHandler+0x52>
 80021dc:	6a3b      	ldr	r3, [r7, #32]
 80021de:	f003 0320 	and.w	r3, r3, #32
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 fa99 	bl	800271e <UART_Receive_IT>
      return;
 80021ec:	e17b      	b.n	80024e6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 80b1 	beq.w	8002358 <HAL_UART_IRQHandler+0x1bc>
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d105      	bne.n	800220c <HAL_UART_IRQHandler+0x70>
 8002200:	6a3b      	ldr	r3, [r7, #32]
 8002202:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 80a6 	beq.w	8002358 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00a      	beq.n	800222c <HAL_UART_IRQHandler+0x90>
 8002216:	6a3b      	ldr	r3, [r7, #32]
 8002218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	f043 0201 	orr.w	r2, r3, #1
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HAL_UART_IRQHandler+0xb0>
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	f043 0202 	orr.w	r2, r3, #2
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00a      	beq.n	800226c <HAL_UART_IRQHandler+0xd0>
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	f043 0204 	orr.w	r2, r3, #4
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00f      	beq.n	8002296 <HAL_UART_IRQHandler+0xfa>
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	f003 0320 	and.w	r3, r3, #32
 800227c:	2b00      	cmp	r3, #0
 800227e:	d104      	bne.n	800228a <HAL_UART_IRQHandler+0xee>
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d005      	beq.n	8002296 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f043 0208 	orr.w	r2, r3, #8
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 811e 	beq.w	80024dc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	f003 0320 	and.w	r3, r3, #32
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d007      	beq.n	80022ba <HAL_UART_IRQHandler+0x11e>
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	f003 0320 	and.w	r3, r3, #32
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 fa32 	bl	800271e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	bf14      	ite	ne
 80022c8:	2301      	movne	r3, #1
 80022ca:	2300      	moveq	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d102      	bne.n	80022e2 <HAL_UART_IRQHandler+0x146>
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d031      	beq.n	8002346 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f974 	bl	80025d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d023      	beq.n	800233e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002304:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230a:	2b00      	cmp	r3, #0
 800230c:	d013      	beq.n	8002336 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002312:	4a76      	ldr	r2, [pc, #472]	; (80024ec <HAL_UART_IRQHandler+0x350>)
 8002314:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe fe4a 	bl	8000fb4 <HAL_DMA_Abort_IT>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d016      	beq.n	8002354 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002330:	4610      	mov	r0, r2
 8002332:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002334:	e00e      	b.n	8002354 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f8ec 	bl	8002514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800233c:	e00a      	b.n	8002354 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f8e8 	bl	8002514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002344:	e006      	b.n	8002354 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f8e4 	bl	8002514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002352:	e0c3      	b.n	80024dc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002354:	bf00      	nop
    return;
 8002356:	e0c1      	b.n	80024dc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235c:	2b01      	cmp	r3, #1
 800235e:	f040 80a1 	bne.w	80024a4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	f003 0310 	and.w	r3, r3, #16
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 809b 	beq.w	80024a4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	f003 0310 	and.w	r3, r3, #16
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 8095 	beq.w	80024a4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800239a:	2b00      	cmp	r3, #0
 800239c:	d04e      	beq.n	800243c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80023a8:	8a3b      	ldrh	r3, [r7, #16]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 8098 	beq.w	80024e0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80023b4:	8a3a      	ldrh	r2, [r7, #16]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	f080 8092 	bcs.w	80024e0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	8a3a      	ldrh	r2, [r7, #16]
 80023c0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	2b20      	cmp	r3, #32
 80023ca:	d02b      	beq.n	8002424 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023da:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	695a      	ldr	r2, [r3, #20]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 0201 	bic.w	r2, r2, #1
 80023ea:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	695a      	ldr	r2, [r3, #20]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023fa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68da      	ldr	r2, [r3, #12]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 0210 	bic.w	r2, r2, #16
 8002418:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe fd8d 	bl	8000f3e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800242c:	b29b      	uxth	r3, r3
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	b29b      	uxth	r3, r3
 8002432:	4619      	mov	r1, r3
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f876 	bl	8002526 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800243a:	e051      	b.n	80024e0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002444:	b29b      	uxth	r3, r3
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800244e:	b29b      	uxth	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d047      	beq.n	80024e4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002454:	8a7b      	ldrh	r3, [r7, #18]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d044      	beq.n	80024e4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68da      	ldr	r2, [r3, #12]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002468:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	695a      	ldr	r2, [r3, #20]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0201 	bic.w	r2, r2, #1
 8002478:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2220      	movs	r2, #32
 800247e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0210 	bic.w	r2, r2, #16
 8002496:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002498:	8a7b      	ldrh	r3, [r7, #18]
 800249a:	4619      	mov	r1, r3
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 f842 	bl	8002526 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80024a2:	e01f      	b.n	80024e4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d008      	beq.n	80024c0 <HAL_UART_IRQHandler+0x324>
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 f8c9 	bl	8002650 <UART_Transmit_IT>
    return;
 80024be:	e012      	b.n	80024e6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00d      	beq.n	80024e6 <HAL_UART_IRQHandler+0x34a>
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d008      	beq.n	80024e6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f90a 	bl	80026ee <UART_EndTransmit_IT>
    return;
 80024da:	e004      	b.n	80024e6 <HAL_UART_IRQHandler+0x34a>
    return;
 80024dc:	bf00      	nop
 80024de:	e002      	b.n	80024e6 <HAL_UART_IRQHandler+0x34a>
      return;
 80024e0:	bf00      	nop
 80024e2:	e000      	b.n	80024e6 <HAL_UART_IRQHandler+0x34a>
      return;
 80024e4:	bf00      	nop
  }
}
 80024e6:	3728      	adds	r7, #40	; 0x28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	08002629 	.word	0x08002629

080024f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr

08002502 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr

08002526 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	460b      	mov	r3, r1
 8002530:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	4613      	mov	r3, r2
 800254a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800254c:	e02c      	b.n	80025a8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002554:	d028      	beq.n	80025a8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d007      	beq.n	800256c <UART_WaitOnFlagUntilTimeout+0x30>
 800255c:	f7fe fbd8 	bl	8000d10 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	429a      	cmp	r2, r3
 800256a:	d21d      	bcs.n	80025a8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800257a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	695a      	ldr	r2, [r3, #20]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0201 	bic.w	r2, r2, #1
 800258a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2220      	movs	r2, #32
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2220      	movs	r2, #32
 8002598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e00f      	b.n	80025c8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	4013      	ands	r3, r2
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	bf0c      	ite	eq
 80025b8:	2301      	moveq	r3, #1
 80025ba:	2300      	movne	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	461a      	mov	r2, r3
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d0c3      	beq.n	800254e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80025e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695a      	ldr	r2, [r3, #20]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0201 	bic.w	r2, r2, #1
 80025f6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d107      	bne.n	8002610 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68da      	ldr	r2, [r3, #12]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0210 	bic.w	r2, r2, #16
 800260e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr

08002628 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f7ff ff66 	bl	8002514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002648:	bf00      	nop
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b21      	cmp	r3, #33	; 0x21
 8002662:	d13e      	bne.n	80026e2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800266c:	d114      	bne.n	8002698 <UART_Transmit_IT+0x48>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d110      	bne.n	8002698 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	461a      	mov	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800268a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	1c9a      	adds	r2, r3, #2
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	621a      	str	r2, [r3, #32]
 8002696:	e008      	b.n	80026aa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	1c59      	adds	r1, r3, #1
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6211      	str	r1, [r2, #32]
 80026a2:	781a      	ldrb	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	3b01      	subs	r3, #1
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	4619      	mov	r1, r3
 80026b8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10f      	bne.n	80026de <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68da      	ldr	r2, [r3, #12]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	e000      	b.n	80026e4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80026e2:	2302      	movs	r3, #2
  }
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr

080026ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002704:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2220      	movs	r2, #32
 800270a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7ff feee 	bl	80024f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b086      	sub	sp, #24
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b22      	cmp	r3, #34	; 0x22
 8002730:	f040 8099 	bne.w	8002866 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800273c:	d117      	bne.n	800276e <UART_Receive_IT+0x50>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d113      	bne.n	800276e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	b29b      	uxth	r3, r3
 8002758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800275c:	b29a      	uxth	r2, r3
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002766:	1c9a      	adds	r2, r3, #2
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	629a      	str	r2, [r3, #40]	; 0x28
 800276c:	e026      	b.n	80027bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002772:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002774:	2300      	movs	r3, #0
 8002776:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002780:	d007      	beq.n	8002792 <UART_Receive_IT+0x74>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10a      	bne.n	80027a0 <UART_Receive_IT+0x82>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d106      	bne.n	80027a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	b2da      	uxtb	r2, r3
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	701a      	strb	r2, [r3, #0]
 800279e:	e008      	b.n	80027b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	3b01      	subs	r3, #1
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	4619      	mov	r1, r3
 80027ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d148      	bne.n	8002862 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0220 	bic.w	r2, r2, #32
 80027de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695a      	ldr	r2, [r3, #20]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0201 	bic.w	r2, r2, #1
 80027fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	2b01      	cmp	r3, #1
 800280e:	d123      	bne.n	8002858 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0210 	bic.w	r2, r2, #16
 8002824:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0310 	and.w	r3, r3, #16
 8002830:	2b10      	cmp	r3, #16
 8002832:	d10a      	bne.n	800284a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002834:	2300      	movs	r3, #0
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800284e:	4619      	mov	r1, r3
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7ff fe68 	bl	8002526 <HAL_UARTEx_RxEventCallback>
 8002856:	e002      	b.n	800285e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7ff fe52 	bl	8002502 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	e002      	b.n	8002868 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	e000      	b.n	8002868 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002866:	2302      	movs	r3, #2
  }
}
 8002868:	4618      	mov	r0, r3
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	4313      	orrs	r3, r2
 800289e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80028aa:	f023 030c 	bic.w	r3, r3, #12
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6812      	ldr	r2, [r2, #0]
 80028b2:	68b9      	ldr	r1, [r7, #8]
 80028b4:	430b      	orrs	r3, r1
 80028b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699a      	ldr	r2, [r3, #24]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a2c      	ldr	r2, [pc, #176]	; (8002984 <UART_SetConfig+0x114>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d103      	bne.n	80028e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80028d8:	f7ff fb4e 	bl	8001f78 <HAL_RCC_GetPCLK2Freq>
 80028dc:	60f8      	str	r0, [r7, #12]
 80028de:	e002      	b.n	80028e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80028e0:	f7ff fb36 	bl	8001f50 <HAL_RCC_GetPCLK1Freq>
 80028e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	009a      	lsls	r2, r3, #2
 80028f0:	441a      	add	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fc:	4a22      	ldr	r2, [pc, #136]	; (8002988 <UART_SetConfig+0x118>)
 80028fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002902:	095b      	lsrs	r3, r3, #5
 8002904:	0119      	lsls	r1, r3, #4
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	009a      	lsls	r2, r3, #2
 8002910:	441a      	add	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	fbb2 f2f3 	udiv	r2, r2, r3
 800291c:	4b1a      	ldr	r3, [pc, #104]	; (8002988 <UART_SetConfig+0x118>)
 800291e:	fba3 0302 	umull	r0, r3, r3, r2
 8002922:	095b      	lsrs	r3, r3, #5
 8002924:	2064      	movs	r0, #100	; 0x64
 8002926:	fb00 f303 	mul.w	r3, r0, r3
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	3332      	adds	r3, #50	; 0x32
 8002930:	4a15      	ldr	r2, [pc, #84]	; (8002988 <UART_SetConfig+0x118>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	095b      	lsrs	r3, r3, #5
 8002938:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800293c:	4419      	add	r1, r3
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	009a      	lsls	r2, r3, #2
 8002948:	441a      	add	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	fbb2 f2f3 	udiv	r2, r2, r3
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <UART_SetConfig+0x118>)
 8002956:	fba3 0302 	umull	r0, r3, r3, r2
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	2064      	movs	r0, #100	; 0x64
 800295e:	fb00 f303 	mul.w	r3, r0, r3
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	3332      	adds	r3, #50	; 0x32
 8002968:	4a07      	ldr	r2, [pc, #28]	; (8002988 <UART_SetConfig+0x118>)
 800296a:	fba2 2303 	umull	r2, r3, r2, r3
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	f003 020f 	and.w	r2, r3, #15
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	440a      	add	r2, r1
 800297a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800297c:	bf00      	nop
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40013800 	.word	0x40013800
 8002988:	51eb851f 	.word	0x51eb851f

0800298c <__errno>:
 800298c:	4b01      	ldr	r3, [pc, #4]	; (8002994 <__errno+0x8>)
 800298e:	6818      	ldr	r0, [r3, #0]
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	2000000c 	.word	0x2000000c

08002998 <__libc_init_array>:
 8002998:	b570      	push	{r4, r5, r6, lr}
 800299a:	2600      	movs	r6, #0
 800299c:	4d0c      	ldr	r5, [pc, #48]	; (80029d0 <__libc_init_array+0x38>)
 800299e:	4c0d      	ldr	r4, [pc, #52]	; (80029d4 <__libc_init_array+0x3c>)
 80029a0:	1b64      	subs	r4, r4, r5
 80029a2:	10a4      	asrs	r4, r4, #2
 80029a4:	42a6      	cmp	r6, r4
 80029a6:	d109      	bne.n	80029bc <__libc_init_array+0x24>
 80029a8:	f000 fc90 	bl	80032cc <_init>
 80029ac:	2600      	movs	r6, #0
 80029ae:	4d0a      	ldr	r5, [pc, #40]	; (80029d8 <__libc_init_array+0x40>)
 80029b0:	4c0a      	ldr	r4, [pc, #40]	; (80029dc <__libc_init_array+0x44>)
 80029b2:	1b64      	subs	r4, r4, r5
 80029b4:	10a4      	asrs	r4, r4, #2
 80029b6:	42a6      	cmp	r6, r4
 80029b8:	d105      	bne.n	80029c6 <__libc_init_array+0x2e>
 80029ba:	bd70      	pop	{r4, r5, r6, pc}
 80029bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80029c0:	4798      	blx	r3
 80029c2:	3601      	adds	r6, #1
 80029c4:	e7ee      	b.n	80029a4 <__libc_init_array+0xc>
 80029c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ca:	4798      	blx	r3
 80029cc:	3601      	adds	r6, #1
 80029ce:	e7f2      	b.n	80029b6 <__libc_init_array+0x1e>
 80029d0:	080035b8 	.word	0x080035b8
 80029d4:	080035b8 	.word	0x080035b8
 80029d8:	080035b8 	.word	0x080035b8
 80029dc:	080035bc 	.word	0x080035bc

080029e0 <memset>:
 80029e0:	4603      	mov	r3, r0
 80029e2:	4402      	add	r2, r0
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d100      	bne.n	80029ea <memset+0xa>
 80029e8:	4770      	bx	lr
 80029ea:	f803 1b01 	strb.w	r1, [r3], #1
 80029ee:	e7f9      	b.n	80029e4 <memset+0x4>

080029f0 <sniprintf>:
 80029f0:	b40c      	push	{r2, r3}
 80029f2:	b530      	push	{r4, r5, lr}
 80029f4:	4b17      	ldr	r3, [pc, #92]	; (8002a54 <sniprintf+0x64>)
 80029f6:	1e0c      	subs	r4, r1, #0
 80029f8:	681d      	ldr	r5, [r3, #0]
 80029fa:	b09d      	sub	sp, #116	; 0x74
 80029fc:	da08      	bge.n	8002a10 <sniprintf+0x20>
 80029fe:	238b      	movs	r3, #139	; 0x8b
 8002a00:	f04f 30ff 	mov.w	r0, #4294967295
 8002a04:	602b      	str	r3, [r5, #0]
 8002a06:	b01d      	add	sp, #116	; 0x74
 8002a08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002a0c:	b002      	add	sp, #8
 8002a0e:	4770      	bx	lr
 8002a10:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002a14:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002a18:	bf0c      	ite	eq
 8002a1a:	4623      	moveq	r3, r4
 8002a1c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002a20:	9304      	str	r3, [sp, #16]
 8002a22:	9307      	str	r3, [sp, #28]
 8002a24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a28:	9002      	str	r0, [sp, #8]
 8002a2a:	9006      	str	r0, [sp, #24]
 8002a2c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002a30:	4628      	mov	r0, r5
 8002a32:	ab21      	add	r3, sp, #132	; 0x84
 8002a34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002a36:	a902      	add	r1, sp, #8
 8002a38:	9301      	str	r3, [sp, #4]
 8002a3a:	f000 f889 	bl	8002b50 <_svfiprintf_r>
 8002a3e:	1c43      	adds	r3, r0, #1
 8002a40:	bfbc      	itt	lt
 8002a42:	238b      	movlt	r3, #139	; 0x8b
 8002a44:	602b      	strlt	r3, [r5, #0]
 8002a46:	2c00      	cmp	r4, #0
 8002a48:	d0dd      	beq.n	8002a06 <sniprintf+0x16>
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	9b02      	ldr	r3, [sp, #8]
 8002a4e:	701a      	strb	r2, [r3, #0]
 8002a50:	e7d9      	b.n	8002a06 <sniprintf+0x16>
 8002a52:	bf00      	nop
 8002a54:	2000000c 	.word	0x2000000c

08002a58 <siprintf>:
 8002a58:	b40e      	push	{r1, r2, r3}
 8002a5a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002a5e:	b500      	push	{lr}
 8002a60:	b09c      	sub	sp, #112	; 0x70
 8002a62:	ab1d      	add	r3, sp, #116	; 0x74
 8002a64:	9002      	str	r0, [sp, #8]
 8002a66:	9006      	str	r0, [sp, #24]
 8002a68:	9107      	str	r1, [sp, #28]
 8002a6a:	9104      	str	r1, [sp, #16]
 8002a6c:	4808      	ldr	r0, [pc, #32]	; (8002a90 <siprintf+0x38>)
 8002a6e:	4909      	ldr	r1, [pc, #36]	; (8002a94 <siprintf+0x3c>)
 8002a70:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a74:	9105      	str	r1, [sp, #20]
 8002a76:	6800      	ldr	r0, [r0, #0]
 8002a78:	a902      	add	r1, sp, #8
 8002a7a:	9301      	str	r3, [sp, #4]
 8002a7c:	f000 f868 	bl	8002b50 <_svfiprintf_r>
 8002a80:	2200      	movs	r2, #0
 8002a82:	9b02      	ldr	r3, [sp, #8]
 8002a84:	701a      	strb	r2, [r3, #0]
 8002a86:	b01c      	add	sp, #112	; 0x70
 8002a88:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a8c:	b003      	add	sp, #12
 8002a8e:	4770      	bx	lr
 8002a90:	2000000c 	.word	0x2000000c
 8002a94:	ffff0208 	.word	0xffff0208

08002a98 <__ssputs_r>:
 8002a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a9c:	688e      	ldr	r6, [r1, #8]
 8002a9e:	4682      	mov	sl, r0
 8002aa0:	429e      	cmp	r6, r3
 8002aa2:	460c      	mov	r4, r1
 8002aa4:	4690      	mov	r8, r2
 8002aa6:	461f      	mov	r7, r3
 8002aa8:	d838      	bhi.n	8002b1c <__ssputs_r+0x84>
 8002aaa:	898a      	ldrh	r2, [r1, #12]
 8002aac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002ab0:	d032      	beq.n	8002b18 <__ssputs_r+0x80>
 8002ab2:	6825      	ldr	r5, [r4, #0]
 8002ab4:	6909      	ldr	r1, [r1, #16]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	eba5 0901 	sub.w	r9, r5, r1
 8002abc:	6965      	ldr	r5, [r4, #20]
 8002abe:	444b      	add	r3, r9
 8002ac0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ac4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002ac8:	106d      	asrs	r5, r5, #1
 8002aca:	429d      	cmp	r5, r3
 8002acc:	bf38      	it	cc
 8002ace:	461d      	movcc	r5, r3
 8002ad0:	0553      	lsls	r3, r2, #21
 8002ad2:	d531      	bpl.n	8002b38 <__ssputs_r+0xa0>
 8002ad4:	4629      	mov	r1, r5
 8002ad6:	f000 fb53 	bl	8003180 <_malloc_r>
 8002ada:	4606      	mov	r6, r0
 8002adc:	b950      	cbnz	r0, 8002af4 <__ssputs_r+0x5c>
 8002ade:	230c      	movs	r3, #12
 8002ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae4:	f8ca 3000 	str.w	r3, [sl]
 8002ae8:	89a3      	ldrh	r3, [r4, #12]
 8002aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aee:	81a3      	strh	r3, [r4, #12]
 8002af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002af4:	464a      	mov	r2, r9
 8002af6:	6921      	ldr	r1, [r4, #16]
 8002af8:	f000 face 	bl	8003098 <memcpy>
 8002afc:	89a3      	ldrh	r3, [r4, #12]
 8002afe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b06:	81a3      	strh	r3, [r4, #12]
 8002b08:	6126      	str	r6, [r4, #16]
 8002b0a:	444e      	add	r6, r9
 8002b0c:	6026      	str	r6, [r4, #0]
 8002b0e:	463e      	mov	r6, r7
 8002b10:	6165      	str	r5, [r4, #20]
 8002b12:	eba5 0509 	sub.w	r5, r5, r9
 8002b16:	60a5      	str	r5, [r4, #8]
 8002b18:	42be      	cmp	r6, r7
 8002b1a:	d900      	bls.n	8002b1e <__ssputs_r+0x86>
 8002b1c:	463e      	mov	r6, r7
 8002b1e:	4632      	mov	r2, r6
 8002b20:	4641      	mov	r1, r8
 8002b22:	6820      	ldr	r0, [r4, #0]
 8002b24:	f000 fac6 	bl	80030b4 <memmove>
 8002b28:	68a3      	ldr	r3, [r4, #8]
 8002b2a:	6822      	ldr	r2, [r4, #0]
 8002b2c:	1b9b      	subs	r3, r3, r6
 8002b2e:	4432      	add	r2, r6
 8002b30:	2000      	movs	r0, #0
 8002b32:	60a3      	str	r3, [r4, #8]
 8002b34:	6022      	str	r2, [r4, #0]
 8002b36:	e7db      	b.n	8002af0 <__ssputs_r+0x58>
 8002b38:	462a      	mov	r2, r5
 8002b3a:	f000 fb7b 	bl	8003234 <_realloc_r>
 8002b3e:	4606      	mov	r6, r0
 8002b40:	2800      	cmp	r0, #0
 8002b42:	d1e1      	bne.n	8002b08 <__ssputs_r+0x70>
 8002b44:	4650      	mov	r0, sl
 8002b46:	6921      	ldr	r1, [r4, #16]
 8002b48:	f000 face 	bl	80030e8 <_free_r>
 8002b4c:	e7c7      	b.n	8002ade <__ssputs_r+0x46>
	...

08002b50 <_svfiprintf_r>:
 8002b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b54:	4698      	mov	r8, r3
 8002b56:	898b      	ldrh	r3, [r1, #12]
 8002b58:	4607      	mov	r7, r0
 8002b5a:	061b      	lsls	r3, r3, #24
 8002b5c:	460d      	mov	r5, r1
 8002b5e:	4614      	mov	r4, r2
 8002b60:	b09d      	sub	sp, #116	; 0x74
 8002b62:	d50e      	bpl.n	8002b82 <_svfiprintf_r+0x32>
 8002b64:	690b      	ldr	r3, [r1, #16]
 8002b66:	b963      	cbnz	r3, 8002b82 <_svfiprintf_r+0x32>
 8002b68:	2140      	movs	r1, #64	; 0x40
 8002b6a:	f000 fb09 	bl	8003180 <_malloc_r>
 8002b6e:	6028      	str	r0, [r5, #0]
 8002b70:	6128      	str	r0, [r5, #16]
 8002b72:	b920      	cbnz	r0, 8002b7e <_svfiprintf_r+0x2e>
 8002b74:	230c      	movs	r3, #12
 8002b76:	603b      	str	r3, [r7, #0]
 8002b78:	f04f 30ff 	mov.w	r0, #4294967295
 8002b7c:	e0d1      	b.n	8002d22 <_svfiprintf_r+0x1d2>
 8002b7e:	2340      	movs	r3, #64	; 0x40
 8002b80:	616b      	str	r3, [r5, #20]
 8002b82:	2300      	movs	r3, #0
 8002b84:	9309      	str	r3, [sp, #36]	; 0x24
 8002b86:	2320      	movs	r3, #32
 8002b88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002b8c:	2330      	movs	r3, #48	; 0x30
 8002b8e:	f04f 0901 	mov.w	r9, #1
 8002b92:	f8cd 800c 	str.w	r8, [sp, #12]
 8002b96:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002d3c <_svfiprintf_r+0x1ec>
 8002b9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b9e:	4623      	mov	r3, r4
 8002ba0:	469a      	mov	sl, r3
 8002ba2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ba6:	b10a      	cbz	r2, 8002bac <_svfiprintf_r+0x5c>
 8002ba8:	2a25      	cmp	r2, #37	; 0x25
 8002baa:	d1f9      	bne.n	8002ba0 <_svfiprintf_r+0x50>
 8002bac:	ebba 0b04 	subs.w	fp, sl, r4
 8002bb0:	d00b      	beq.n	8002bca <_svfiprintf_r+0x7a>
 8002bb2:	465b      	mov	r3, fp
 8002bb4:	4622      	mov	r2, r4
 8002bb6:	4629      	mov	r1, r5
 8002bb8:	4638      	mov	r0, r7
 8002bba:	f7ff ff6d 	bl	8002a98 <__ssputs_r>
 8002bbe:	3001      	adds	r0, #1
 8002bc0:	f000 80aa 	beq.w	8002d18 <_svfiprintf_r+0x1c8>
 8002bc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002bc6:	445a      	add	r2, fp
 8002bc8:	9209      	str	r2, [sp, #36]	; 0x24
 8002bca:	f89a 3000 	ldrb.w	r3, [sl]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 80a2 	beq.w	8002d18 <_svfiprintf_r+0x1c8>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8002bda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002bde:	f10a 0a01 	add.w	sl, sl, #1
 8002be2:	9304      	str	r3, [sp, #16]
 8002be4:	9307      	str	r3, [sp, #28]
 8002be6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002bea:	931a      	str	r3, [sp, #104]	; 0x68
 8002bec:	4654      	mov	r4, sl
 8002bee:	2205      	movs	r2, #5
 8002bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bf4:	4851      	ldr	r0, [pc, #324]	; (8002d3c <_svfiprintf_r+0x1ec>)
 8002bf6:	f000 fa41 	bl	800307c <memchr>
 8002bfa:	9a04      	ldr	r2, [sp, #16]
 8002bfc:	b9d8      	cbnz	r0, 8002c36 <_svfiprintf_r+0xe6>
 8002bfe:	06d0      	lsls	r0, r2, #27
 8002c00:	bf44      	itt	mi
 8002c02:	2320      	movmi	r3, #32
 8002c04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c08:	0711      	lsls	r1, r2, #28
 8002c0a:	bf44      	itt	mi
 8002c0c:	232b      	movmi	r3, #43	; 0x2b
 8002c0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c12:	f89a 3000 	ldrb.w	r3, [sl]
 8002c16:	2b2a      	cmp	r3, #42	; 0x2a
 8002c18:	d015      	beq.n	8002c46 <_svfiprintf_r+0xf6>
 8002c1a:	4654      	mov	r4, sl
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	f04f 0c0a 	mov.w	ip, #10
 8002c22:	9a07      	ldr	r2, [sp, #28]
 8002c24:	4621      	mov	r1, r4
 8002c26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c2a:	3b30      	subs	r3, #48	; 0x30
 8002c2c:	2b09      	cmp	r3, #9
 8002c2e:	d94e      	bls.n	8002cce <_svfiprintf_r+0x17e>
 8002c30:	b1b0      	cbz	r0, 8002c60 <_svfiprintf_r+0x110>
 8002c32:	9207      	str	r2, [sp, #28]
 8002c34:	e014      	b.n	8002c60 <_svfiprintf_r+0x110>
 8002c36:	eba0 0308 	sub.w	r3, r0, r8
 8002c3a:	fa09 f303 	lsl.w	r3, r9, r3
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	46a2      	mov	sl, r4
 8002c42:	9304      	str	r3, [sp, #16]
 8002c44:	e7d2      	b.n	8002bec <_svfiprintf_r+0x9c>
 8002c46:	9b03      	ldr	r3, [sp, #12]
 8002c48:	1d19      	adds	r1, r3, #4
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	9103      	str	r1, [sp, #12]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	bfbb      	ittet	lt
 8002c52:	425b      	neglt	r3, r3
 8002c54:	f042 0202 	orrlt.w	r2, r2, #2
 8002c58:	9307      	strge	r3, [sp, #28]
 8002c5a:	9307      	strlt	r3, [sp, #28]
 8002c5c:	bfb8      	it	lt
 8002c5e:	9204      	strlt	r2, [sp, #16]
 8002c60:	7823      	ldrb	r3, [r4, #0]
 8002c62:	2b2e      	cmp	r3, #46	; 0x2e
 8002c64:	d10c      	bne.n	8002c80 <_svfiprintf_r+0x130>
 8002c66:	7863      	ldrb	r3, [r4, #1]
 8002c68:	2b2a      	cmp	r3, #42	; 0x2a
 8002c6a:	d135      	bne.n	8002cd8 <_svfiprintf_r+0x188>
 8002c6c:	9b03      	ldr	r3, [sp, #12]
 8002c6e:	3402      	adds	r4, #2
 8002c70:	1d1a      	adds	r2, r3, #4
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	9203      	str	r2, [sp, #12]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	bfb8      	it	lt
 8002c7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8002c7e:	9305      	str	r3, [sp, #20]
 8002c80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002d4c <_svfiprintf_r+0x1fc>
 8002c84:	2203      	movs	r2, #3
 8002c86:	4650      	mov	r0, sl
 8002c88:	7821      	ldrb	r1, [r4, #0]
 8002c8a:	f000 f9f7 	bl	800307c <memchr>
 8002c8e:	b140      	cbz	r0, 8002ca2 <_svfiprintf_r+0x152>
 8002c90:	2340      	movs	r3, #64	; 0x40
 8002c92:	eba0 000a 	sub.w	r0, r0, sl
 8002c96:	fa03 f000 	lsl.w	r0, r3, r0
 8002c9a:	9b04      	ldr	r3, [sp, #16]
 8002c9c:	3401      	adds	r4, #1
 8002c9e:	4303      	orrs	r3, r0
 8002ca0:	9304      	str	r3, [sp, #16]
 8002ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ca6:	2206      	movs	r2, #6
 8002ca8:	4825      	ldr	r0, [pc, #148]	; (8002d40 <_svfiprintf_r+0x1f0>)
 8002caa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002cae:	f000 f9e5 	bl	800307c <memchr>
 8002cb2:	2800      	cmp	r0, #0
 8002cb4:	d038      	beq.n	8002d28 <_svfiprintf_r+0x1d8>
 8002cb6:	4b23      	ldr	r3, [pc, #140]	; (8002d44 <_svfiprintf_r+0x1f4>)
 8002cb8:	bb1b      	cbnz	r3, 8002d02 <_svfiprintf_r+0x1b2>
 8002cba:	9b03      	ldr	r3, [sp, #12]
 8002cbc:	3307      	adds	r3, #7
 8002cbe:	f023 0307 	bic.w	r3, r3, #7
 8002cc2:	3308      	adds	r3, #8
 8002cc4:	9303      	str	r3, [sp, #12]
 8002cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cc8:	4433      	add	r3, r6
 8002cca:	9309      	str	r3, [sp, #36]	; 0x24
 8002ccc:	e767      	b.n	8002b9e <_svfiprintf_r+0x4e>
 8002cce:	460c      	mov	r4, r1
 8002cd0:	2001      	movs	r0, #1
 8002cd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8002cd6:	e7a5      	b.n	8002c24 <_svfiprintf_r+0xd4>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f04f 0c0a 	mov.w	ip, #10
 8002cde:	4619      	mov	r1, r3
 8002ce0:	3401      	adds	r4, #1
 8002ce2:	9305      	str	r3, [sp, #20]
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002cea:	3a30      	subs	r2, #48	; 0x30
 8002cec:	2a09      	cmp	r2, #9
 8002cee:	d903      	bls.n	8002cf8 <_svfiprintf_r+0x1a8>
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0c5      	beq.n	8002c80 <_svfiprintf_r+0x130>
 8002cf4:	9105      	str	r1, [sp, #20]
 8002cf6:	e7c3      	b.n	8002c80 <_svfiprintf_r+0x130>
 8002cf8:	4604      	mov	r4, r0
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d00:	e7f0      	b.n	8002ce4 <_svfiprintf_r+0x194>
 8002d02:	ab03      	add	r3, sp, #12
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	462a      	mov	r2, r5
 8002d08:	4638      	mov	r0, r7
 8002d0a:	4b0f      	ldr	r3, [pc, #60]	; (8002d48 <_svfiprintf_r+0x1f8>)
 8002d0c:	a904      	add	r1, sp, #16
 8002d0e:	f3af 8000 	nop.w
 8002d12:	1c42      	adds	r2, r0, #1
 8002d14:	4606      	mov	r6, r0
 8002d16:	d1d6      	bne.n	8002cc6 <_svfiprintf_r+0x176>
 8002d18:	89ab      	ldrh	r3, [r5, #12]
 8002d1a:	065b      	lsls	r3, r3, #25
 8002d1c:	f53f af2c 	bmi.w	8002b78 <_svfiprintf_r+0x28>
 8002d20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d22:	b01d      	add	sp, #116	; 0x74
 8002d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d28:	ab03      	add	r3, sp, #12
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	462a      	mov	r2, r5
 8002d2e:	4638      	mov	r0, r7
 8002d30:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <_svfiprintf_r+0x1f8>)
 8002d32:	a904      	add	r1, sp, #16
 8002d34:	f000 f87c 	bl	8002e30 <_printf_i>
 8002d38:	e7eb      	b.n	8002d12 <_svfiprintf_r+0x1c2>
 8002d3a:	bf00      	nop
 8002d3c:	08003584 	.word	0x08003584
 8002d40:	0800358e 	.word	0x0800358e
 8002d44:	00000000 	.word	0x00000000
 8002d48:	08002a99 	.word	0x08002a99
 8002d4c:	0800358a 	.word	0x0800358a

08002d50 <_printf_common>:
 8002d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d54:	4616      	mov	r6, r2
 8002d56:	4699      	mov	r9, r3
 8002d58:	688a      	ldr	r2, [r1, #8]
 8002d5a:	690b      	ldr	r3, [r1, #16]
 8002d5c:	4607      	mov	r7, r0
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	bfb8      	it	lt
 8002d62:	4613      	movlt	r3, r2
 8002d64:	6033      	str	r3, [r6, #0]
 8002d66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d6a:	460c      	mov	r4, r1
 8002d6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d70:	b10a      	cbz	r2, 8002d76 <_printf_common+0x26>
 8002d72:	3301      	adds	r3, #1
 8002d74:	6033      	str	r3, [r6, #0]
 8002d76:	6823      	ldr	r3, [r4, #0]
 8002d78:	0699      	lsls	r1, r3, #26
 8002d7a:	bf42      	ittt	mi
 8002d7c:	6833      	ldrmi	r3, [r6, #0]
 8002d7e:	3302      	addmi	r3, #2
 8002d80:	6033      	strmi	r3, [r6, #0]
 8002d82:	6825      	ldr	r5, [r4, #0]
 8002d84:	f015 0506 	ands.w	r5, r5, #6
 8002d88:	d106      	bne.n	8002d98 <_printf_common+0x48>
 8002d8a:	f104 0a19 	add.w	sl, r4, #25
 8002d8e:	68e3      	ldr	r3, [r4, #12]
 8002d90:	6832      	ldr	r2, [r6, #0]
 8002d92:	1a9b      	subs	r3, r3, r2
 8002d94:	42ab      	cmp	r3, r5
 8002d96:	dc28      	bgt.n	8002dea <_printf_common+0x9a>
 8002d98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002d9c:	1e13      	subs	r3, r2, #0
 8002d9e:	6822      	ldr	r2, [r4, #0]
 8002da0:	bf18      	it	ne
 8002da2:	2301      	movne	r3, #1
 8002da4:	0692      	lsls	r2, r2, #26
 8002da6:	d42d      	bmi.n	8002e04 <_printf_common+0xb4>
 8002da8:	4649      	mov	r1, r9
 8002daa:	4638      	mov	r0, r7
 8002dac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002db0:	47c0      	blx	r8
 8002db2:	3001      	adds	r0, #1
 8002db4:	d020      	beq.n	8002df8 <_printf_common+0xa8>
 8002db6:	6823      	ldr	r3, [r4, #0]
 8002db8:	68e5      	ldr	r5, [r4, #12]
 8002dba:	f003 0306 	and.w	r3, r3, #6
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	bf18      	it	ne
 8002dc2:	2500      	movne	r5, #0
 8002dc4:	6832      	ldr	r2, [r6, #0]
 8002dc6:	f04f 0600 	mov.w	r6, #0
 8002dca:	68a3      	ldr	r3, [r4, #8]
 8002dcc:	bf08      	it	eq
 8002dce:	1aad      	subeq	r5, r5, r2
 8002dd0:	6922      	ldr	r2, [r4, #16]
 8002dd2:	bf08      	it	eq
 8002dd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	bfc4      	itt	gt
 8002ddc:	1a9b      	subgt	r3, r3, r2
 8002dde:	18ed      	addgt	r5, r5, r3
 8002de0:	341a      	adds	r4, #26
 8002de2:	42b5      	cmp	r5, r6
 8002de4:	d11a      	bne.n	8002e1c <_printf_common+0xcc>
 8002de6:	2000      	movs	r0, #0
 8002de8:	e008      	b.n	8002dfc <_printf_common+0xac>
 8002dea:	2301      	movs	r3, #1
 8002dec:	4652      	mov	r2, sl
 8002dee:	4649      	mov	r1, r9
 8002df0:	4638      	mov	r0, r7
 8002df2:	47c0      	blx	r8
 8002df4:	3001      	adds	r0, #1
 8002df6:	d103      	bne.n	8002e00 <_printf_common+0xb0>
 8002df8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e00:	3501      	adds	r5, #1
 8002e02:	e7c4      	b.n	8002d8e <_printf_common+0x3e>
 8002e04:	2030      	movs	r0, #48	; 0x30
 8002e06:	18e1      	adds	r1, r4, r3
 8002e08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e0c:	1c5a      	adds	r2, r3, #1
 8002e0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e12:	4422      	add	r2, r4
 8002e14:	3302      	adds	r3, #2
 8002e16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e1a:	e7c5      	b.n	8002da8 <_printf_common+0x58>
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	4622      	mov	r2, r4
 8002e20:	4649      	mov	r1, r9
 8002e22:	4638      	mov	r0, r7
 8002e24:	47c0      	blx	r8
 8002e26:	3001      	adds	r0, #1
 8002e28:	d0e6      	beq.n	8002df8 <_printf_common+0xa8>
 8002e2a:	3601      	adds	r6, #1
 8002e2c:	e7d9      	b.n	8002de2 <_printf_common+0x92>
	...

08002e30 <_printf_i>:
 8002e30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e34:	460c      	mov	r4, r1
 8002e36:	7e27      	ldrb	r7, [r4, #24]
 8002e38:	4691      	mov	r9, r2
 8002e3a:	2f78      	cmp	r7, #120	; 0x78
 8002e3c:	4680      	mov	r8, r0
 8002e3e:	469a      	mov	sl, r3
 8002e40:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002e42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e46:	d807      	bhi.n	8002e58 <_printf_i+0x28>
 8002e48:	2f62      	cmp	r7, #98	; 0x62
 8002e4a:	d80a      	bhi.n	8002e62 <_printf_i+0x32>
 8002e4c:	2f00      	cmp	r7, #0
 8002e4e:	f000 80d9 	beq.w	8003004 <_printf_i+0x1d4>
 8002e52:	2f58      	cmp	r7, #88	; 0x58
 8002e54:	f000 80a4 	beq.w	8002fa0 <_printf_i+0x170>
 8002e58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002e5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002e60:	e03a      	b.n	8002ed8 <_printf_i+0xa8>
 8002e62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002e66:	2b15      	cmp	r3, #21
 8002e68:	d8f6      	bhi.n	8002e58 <_printf_i+0x28>
 8002e6a:	a001      	add	r0, pc, #4	; (adr r0, 8002e70 <_printf_i+0x40>)
 8002e6c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002e70:	08002ec9 	.word	0x08002ec9
 8002e74:	08002edd 	.word	0x08002edd
 8002e78:	08002e59 	.word	0x08002e59
 8002e7c:	08002e59 	.word	0x08002e59
 8002e80:	08002e59 	.word	0x08002e59
 8002e84:	08002e59 	.word	0x08002e59
 8002e88:	08002edd 	.word	0x08002edd
 8002e8c:	08002e59 	.word	0x08002e59
 8002e90:	08002e59 	.word	0x08002e59
 8002e94:	08002e59 	.word	0x08002e59
 8002e98:	08002e59 	.word	0x08002e59
 8002e9c:	08002feb 	.word	0x08002feb
 8002ea0:	08002f0d 	.word	0x08002f0d
 8002ea4:	08002fcd 	.word	0x08002fcd
 8002ea8:	08002e59 	.word	0x08002e59
 8002eac:	08002e59 	.word	0x08002e59
 8002eb0:	0800300d 	.word	0x0800300d
 8002eb4:	08002e59 	.word	0x08002e59
 8002eb8:	08002f0d 	.word	0x08002f0d
 8002ebc:	08002e59 	.word	0x08002e59
 8002ec0:	08002e59 	.word	0x08002e59
 8002ec4:	08002fd5 	.word	0x08002fd5
 8002ec8:	680b      	ldr	r3, [r1, #0]
 8002eca:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002ece:	1d1a      	adds	r2, r3, #4
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	600a      	str	r2, [r1, #0]
 8002ed4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0a4      	b.n	8003026 <_printf_i+0x1f6>
 8002edc:	6825      	ldr	r5, [r4, #0]
 8002ede:	6808      	ldr	r0, [r1, #0]
 8002ee0:	062e      	lsls	r6, r5, #24
 8002ee2:	f100 0304 	add.w	r3, r0, #4
 8002ee6:	d50a      	bpl.n	8002efe <_printf_i+0xce>
 8002ee8:	6805      	ldr	r5, [r0, #0]
 8002eea:	600b      	str	r3, [r1, #0]
 8002eec:	2d00      	cmp	r5, #0
 8002eee:	da03      	bge.n	8002ef8 <_printf_i+0xc8>
 8002ef0:	232d      	movs	r3, #45	; 0x2d
 8002ef2:	426d      	negs	r5, r5
 8002ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ef8:	230a      	movs	r3, #10
 8002efa:	485e      	ldr	r0, [pc, #376]	; (8003074 <_printf_i+0x244>)
 8002efc:	e019      	b.n	8002f32 <_printf_i+0x102>
 8002efe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002f02:	6805      	ldr	r5, [r0, #0]
 8002f04:	600b      	str	r3, [r1, #0]
 8002f06:	bf18      	it	ne
 8002f08:	b22d      	sxthne	r5, r5
 8002f0a:	e7ef      	b.n	8002eec <_printf_i+0xbc>
 8002f0c:	680b      	ldr	r3, [r1, #0]
 8002f0e:	6825      	ldr	r5, [r4, #0]
 8002f10:	1d18      	adds	r0, r3, #4
 8002f12:	6008      	str	r0, [r1, #0]
 8002f14:	0628      	lsls	r0, r5, #24
 8002f16:	d501      	bpl.n	8002f1c <_printf_i+0xec>
 8002f18:	681d      	ldr	r5, [r3, #0]
 8002f1a:	e002      	b.n	8002f22 <_printf_i+0xf2>
 8002f1c:	0669      	lsls	r1, r5, #25
 8002f1e:	d5fb      	bpl.n	8002f18 <_printf_i+0xe8>
 8002f20:	881d      	ldrh	r5, [r3, #0]
 8002f22:	2f6f      	cmp	r7, #111	; 0x6f
 8002f24:	bf0c      	ite	eq
 8002f26:	2308      	moveq	r3, #8
 8002f28:	230a      	movne	r3, #10
 8002f2a:	4852      	ldr	r0, [pc, #328]	; (8003074 <_printf_i+0x244>)
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f32:	6866      	ldr	r6, [r4, #4]
 8002f34:	2e00      	cmp	r6, #0
 8002f36:	bfa8      	it	ge
 8002f38:	6821      	ldrge	r1, [r4, #0]
 8002f3a:	60a6      	str	r6, [r4, #8]
 8002f3c:	bfa4      	itt	ge
 8002f3e:	f021 0104 	bicge.w	r1, r1, #4
 8002f42:	6021      	strge	r1, [r4, #0]
 8002f44:	b90d      	cbnz	r5, 8002f4a <_printf_i+0x11a>
 8002f46:	2e00      	cmp	r6, #0
 8002f48:	d04d      	beq.n	8002fe6 <_printf_i+0x1b6>
 8002f4a:	4616      	mov	r6, r2
 8002f4c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002f50:	fb03 5711 	mls	r7, r3, r1, r5
 8002f54:	5dc7      	ldrb	r7, [r0, r7]
 8002f56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002f5a:	462f      	mov	r7, r5
 8002f5c:	42bb      	cmp	r3, r7
 8002f5e:	460d      	mov	r5, r1
 8002f60:	d9f4      	bls.n	8002f4c <_printf_i+0x11c>
 8002f62:	2b08      	cmp	r3, #8
 8002f64:	d10b      	bne.n	8002f7e <_printf_i+0x14e>
 8002f66:	6823      	ldr	r3, [r4, #0]
 8002f68:	07df      	lsls	r7, r3, #31
 8002f6a:	d508      	bpl.n	8002f7e <_printf_i+0x14e>
 8002f6c:	6923      	ldr	r3, [r4, #16]
 8002f6e:	6861      	ldr	r1, [r4, #4]
 8002f70:	4299      	cmp	r1, r3
 8002f72:	bfde      	ittt	le
 8002f74:	2330      	movle	r3, #48	; 0x30
 8002f76:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002f7a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002f7e:	1b92      	subs	r2, r2, r6
 8002f80:	6122      	str	r2, [r4, #16]
 8002f82:	464b      	mov	r3, r9
 8002f84:	4621      	mov	r1, r4
 8002f86:	4640      	mov	r0, r8
 8002f88:	f8cd a000 	str.w	sl, [sp]
 8002f8c:	aa03      	add	r2, sp, #12
 8002f8e:	f7ff fedf 	bl	8002d50 <_printf_common>
 8002f92:	3001      	adds	r0, #1
 8002f94:	d14c      	bne.n	8003030 <_printf_i+0x200>
 8002f96:	f04f 30ff 	mov.w	r0, #4294967295
 8002f9a:	b004      	add	sp, #16
 8002f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fa0:	4834      	ldr	r0, [pc, #208]	; (8003074 <_printf_i+0x244>)
 8002fa2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002fa6:	680e      	ldr	r6, [r1, #0]
 8002fa8:	6823      	ldr	r3, [r4, #0]
 8002faa:	f856 5b04 	ldr.w	r5, [r6], #4
 8002fae:	061f      	lsls	r7, r3, #24
 8002fb0:	600e      	str	r6, [r1, #0]
 8002fb2:	d514      	bpl.n	8002fde <_printf_i+0x1ae>
 8002fb4:	07d9      	lsls	r1, r3, #31
 8002fb6:	bf44      	itt	mi
 8002fb8:	f043 0320 	orrmi.w	r3, r3, #32
 8002fbc:	6023      	strmi	r3, [r4, #0]
 8002fbe:	b91d      	cbnz	r5, 8002fc8 <_printf_i+0x198>
 8002fc0:	6823      	ldr	r3, [r4, #0]
 8002fc2:	f023 0320 	bic.w	r3, r3, #32
 8002fc6:	6023      	str	r3, [r4, #0]
 8002fc8:	2310      	movs	r3, #16
 8002fca:	e7af      	b.n	8002f2c <_printf_i+0xfc>
 8002fcc:	6823      	ldr	r3, [r4, #0]
 8002fce:	f043 0320 	orr.w	r3, r3, #32
 8002fd2:	6023      	str	r3, [r4, #0]
 8002fd4:	2378      	movs	r3, #120	; 0x78
 8002fd6:	4828      	ldr	r0, [pc, #160]	; (8003078 <_printf_i+0x248>)
 8002fd8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002fdc:	e7e3      	b.n	8002fa6 <_printf_i+0x176>
 8002fde:	065e      	lsls	r6, r3, #25
 8002fe0:	bf48      	it	mi
 8002fe2:	b2ad      	uxthmi	r5, r5
 8002fe4:	e7e6      	b.n	8002fb4 <_printf_i+0x184>
 8002fe6:	4616      	mov	r6, r2
 8002fe8:	e7bb      	b.n	8002f62 <_printf_i+0x132>
 8002fea:	680b      	ldr	r3, [r1, #0]
 8002fec:	6826      	ldr	r6, [r4, #0]
 8002fee:	1d1d      	adds	r5, r3, #4
 8002ff0:	6960      	ldr	r0, [r4, #20]
 8002ff2:	600d      	str	r5, [r1, #0]
 8002ff4:	0635      	lsls	r5, r6, #24
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	d501      	bpl.n	8002ffe <_printf_i+0x1ce>
 8002ffa:	6018      	str	r0, [r3, #0]
 8002ffc:	e002      	b.n	8003004 <_printf_i+0x1d4>
 8002ffe:	0671      	lsls	r1, r6, #25
 8003000:	d5fb      	bpl.n	8002ffa <_printf_i+0x1ca>
 8003002:	8018      	strh	r0, [r3, #0]
 8003004:	2300      	movs	r3, #0
 8003006:	4616      	mov	r6, r2
 8003008:	6123      	str	r3, [r4, #16]
 800300a:	e7ba      	b.n	8002f82 <_printf_i+0x152>
 800300c:	680b      	ldr	r3, [r1, #0]
 800300e:	1d1a      	adds	r2, r3, #4
 8003010:	600a      	str	r2, [r1, #0]
 8003012:	681e      	ldr	r6, [r3, #0]
 8003014:	2100      	movs	r1, #0
 8003016:	4630      	mov	r0, r6
 8003018:	6862      	ldr	r2, [r4, #4]
 800301a:	f000 f82f 	bl	800307c <memchr>
 800301e:	b108      	cbz	r0, 8003024 <_printf_i+0x1f4>
 8003020:	1b80      	subs	r0, r0, r6
 8003022:	6060      	str	r0, [r4, #4]
 8003024:	6863      	ldr	r3, [r4, #4]
 8003026:	6123      	str	r3, [r4, #16]
 8003028:	2300      	movs	r3, #0
 800302a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800302e:	e7a8      	b.n	8002f82 <_printf_i+0x152>
 8003030:	4632      	mov	r2, r6
 8003032:	4649      	mov	r1, r9
 8003034:	4640      	mov	r0, r8
 8003036:	6923      	ldr	r3, [r4, #16]
 8003038:	47d0      	blx	sl
 800303a:	3001      	adds	r0, #1
 800303c:	d0ab      	beq.n	8002f96 <_printf_i+0x166>
 800303e:	6823      	ldr	r3, [r4, #0]
 8003040:	079b      	lsls	r3, r3, #30
 8003042:	d413      	bmi.n	800306c <_printf_i+0x23c>
 8003044:	68e0      	ldr	r0, [r4, #12]
 8003046:	9b03      	ldr	r3, [sp, #12]
 8003048:	4298      	cmp	r0, r3
 800304a:	bfb8      	it	lt
 800304c:	4618      	movlt	r0, r3
 800304e:	e7a4      	b.n	8002f9a <_printf_i+0x16a>
 8003050:	2301      	movs	r3, #1
 8003052:	4632      	mov	r2, r6
 8003054:	4649      	mov	r1, r9
 8003056:	4640      	mov	r0, r8
 8003058:	47d0      	blx	sl
 800305a:	3001      	adds	r0, #1
 800305c:	d09b      	beq.n	8002f96 <_printf_i+0x166>
 800305e:	3501      	adds	r5, #1
 8003060:	68e3      	ldr	r3, [r4, #12]
 8003062:	9903      	ldr	r1, [sp, #12]
 8003064:	1a5b      	subs	r3, r3, r1
 8003066:	42ab      	cmp	r3, r5
 8003068:	dcf2      	bgt.n	8003050 <_printf_i+0x220>
 800306a:	e7eb      	b.n	8003044 <_printf_i+0x214>
 800306c:	2500      	movs	r5, #0
 800306e:	f104 0619 	add.w	r6, r4, #25
 8003072:	e7f5      	b.n	8003060 <_printf_i+0x230>
 8003074:	08003595 	.word	0x08003595
 8003078:	080035a6 	.word	0x080035a6

0800307c <memchr>:
 800307c:	4603      	mov	r3, r0
 800307e:	b510      	push	{r4, lr}
 8003080:	b2c9      	uxtb	r1, r1
 8003082:	4402      	add	r2, r0
 8003084:	4293      	cmp	r3, r2
 8003086:	4618      	mov	r0, r3
 8003088:	d101      	bne.n	800308e <memchr+0x12>
 800308a:	2000      	movs	r0, #0
 800308c:	e003      	b.n	8003096 <memchr+0x1a>
 800308e:	7804      	ldrb	r4, [r0, #0]
 8003090:	3301      	adds	r3, #1
 8003092:	428c      	cmp	r4, r1
 8003094:	d1f6      	bne.n	8003084 <memchr+0x8>
 8003096:	bd10      	pop	{r4, pc}

08003098 <memcpy>:
 8003098:	440a      	add	r2, r1
 800309a:	4291      	cmp	r1, r2
 800309c:	f100 33ff 	add.w	r3, r0, #4294967295
 80030a0:	d100      	bne.n	80030a4 <memcpy+0xc>
 80030a2:	4770      	bx	lr
 80030a4:	b510      	push	{r4, lr}
 80030a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030aa:	4291      	cmp	r1, r2
 80030ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80030b0:	d1f9      	bne.n	80030a6 <memcpy+0xe>
 80030b2:	bd10      	pop	{r4, pc}

080030b4 <memmove>:
 80030b4:	4288      	cmp	r0, r1
 80030b6:	b510      	push	{r4, lr}
 80030b8:	eb01 0402 	add.w	r4, r1, r2
 80030bc:	d902      	bls.n	80030c4 <memmove+0x10>
 80030be:	4284      	cmp	r4, r0
 80030c0:	4623      	mov	r3, r4
 80030c2:	d807      	bhi.n	80030d4 <memmove+0x20>
 80030c4:	1e43      	subs	r3, r0, #1
 80030c6:	42a1      	cmp	r1, r4
 80030c8:	d008      	beq.n	80030dc <memmove+0x28>
 80030ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80030ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80030d2:	e7f8      	b.n	80030c6 <memmove+0x12>
 80030d4:	4601      	mov	r1, r0
 80030d6:	4402      	add	r2, r0
 80030d8:	428a      	cmp	r2, r1
 80030da:	d100      	bne.n	80030de <memmove+0x2a>
 80030dc:	bd10      	pop	{r4, pc}
 80030de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80030e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80030e6:	e7f7      	b.n	80030d8 <memmove+0x24>

080030e8 <_free_r>:
 80030e8:	b538      	push	{r3, r4, r5, lr}
 80030ea:	4605      	mov	r5, r0
 80030ec:	2900      	cmp	r1, #0
 80030ee:	d043      	beq.n	8003178 <_free_r+0x90>
 80030f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030f4:	1f0c      	subs	r4, r1, #4
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	bfb8      	it	lt
 80030fa:	18e4      	addlt	r4, r4, r3
 80030fc:	f000 f8d0 	bl	80032a0 <__malloc_lock>
 8003100:	4a1e      	ldr	r2, [pc, #120]	; (800317c <_free_r+0x94>)
 8003102:	6813      	ldr	r3, [r2, #0]
 8003104:	4610      	mov	r0, r2
 8003106:	b933      	cbnz	r3, 8003116 <_free_r+0x2e>
 8003108:	6063      	str	r3, [r4, #4]
 800310a:	6014      	str	r4, [r2, #0]
 800310c:	4628      	mov	r0, r5
 800310e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003112:	f000 b8cb 	b.w	80032ac <__malloc_unlock>
 8003116:	42a3      	cmp	r3, r4
 8003118:	d90a      	bls.n	8003130 <_free_r+0x48>
 800311a:	6821      	ldr	r1, [r4, #0]
 800311c:	1862      	adds	r2, r4, r1
 800311e:	4293      	cmp	r3, r2
 8003120:	bf01      	itttt	eq
 8003122:	681a      	ldreq	r2, [r3, #0]
 8003124:	685b      	ldreq	r3, [r3, #4]
 8003126:	1852      	addeq	r2, r2, r1
 8003128:	6022      	streq	r2, [r4, #0]
 800312a:	6063      	str	r3, [r4, #4]
 800312c:	6004      	str	r4, [r0, #0]
 800312e:	e7ed      	b.n	800310c <_free_r+0x24>
 8003130:	461a      	mov	r2, r3
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	b10b      	cbz	r3, 800313a <_free_r+0x52>
 8003136:	42a3      	cmp	r3, r4
 8003138:	d9fa      	bls.n	8003130 <_free_r+0x48>
 800313a:	6811      	ldr	r1, [r2, #0]
 800313c:	1850      	adds	r0, r2, r1
 800313e:	42a0      	cmp	r0, r4
 8003140:	d10b      	bne.n	800315a <_free_r+0x72>
 8003142:	6820      	ldr	r0, [r4, #0]
 8003144:	4401      	add	r1, r0
 8003146:	1850      	adds	r0, r2, r1
 8003148:	4283      	cmp	r3, r0
 800314a:	6011      	str	r1, [r2, #0]
 800314c:	d1de      	bne.n	800310c <_free_r+0x24>
 800314e:	6818      	ldr	r0, [r3, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	4401      	add	r1, r0
 8003154:	6011      	str	r1, [r2, #0]
 8003156:	6053      	str	r3, [r2, #4]
 8003158:	e7d8      	b.n	800310c <_free_r+0x24>
 800315a:	d902      	bls.n	8003162 <_free_r+0x7a>
 800315c:	230c      	movs	r3, #12
 800315e:	602b      	str	r3, [r5, #0]
 8003160:	e7d4      	b.n	800310c <_free_r+0x24>
 8003162:	6820      	ldr	r0, [r4, #0]
 8003164:	1821      	adds	r1, r4, r0
 8003166:	428b      	cmp	r3, r1
 8003168:	bf01      	itttt	eq
 800316a:	6819      	ldreq	r1, [r3, #0]
 800316c:	685b      	ldreq	r3, [r3, #4]
 800316e:	1809      	addeq	r1, r1, r0
 8003170:	6021      	streq	r1, [r4, #0]
 8003172:	6063      	str	r3, [r4, #4]
 8003174:	6054      	str	r4, [r2, #4]
 8003176:	e7c9      	b.n	800310c <_free_r+0x24>
 8003178:	bd38      	pop	{r3, r4, r5, pc}
 800317a:	bf00      	nop
 800317c:	20000090 	.word	0x20000090

08003180 <_malloc_r>:
 8003180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003182:	1ccd      	adds	r5, r1, #3
 8003184:	f025 0503 	bic.w	r5, r5, #3
 8003188:	3508      	adds	r5, #8
 800318a:	2d0c      	cmp	r5, #12
 800318c:	bf38      	it	cc
 800318e:	250c      	movcc	r5, #12
 8003190:	2d00      	cmp	r5, #0
 8003192:	4606      	mov	r6, r0
 8003194:	db01      	blt.n	800319a <_malloc_r+0x1a>
 8003196:	42a9      	cmp	r1, r5
 8003198:	d903      	bls.n	80031a2 <_malloc_r+0x22>
 800319a:	230c      	movs	r3, #12
 800319c:	6033      	str	r3, [r6, #0]
 800319e:	2000      	movs	r0, #0
 80031a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031a2:	f000 f87d 	bl	80032a0 <__malloc_lock>
 80031a6:	4921      	ldr	r1, [pc, #132]	; (800322c <_malloc_r+0xac>)
 80031a8:	680a      	ldr	r2, [r1, #0]
 80031aa:	4614      	mov	r4, r2
 80031ac:	b99c      	cbnz	r4, 80031d6 <_malloc_r+0x56>
 80031ae:	4f20      	ldr	r7, [pc, #128]	; (8003230 <_malloc_r+0xb0>)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	b923      	cbnz	r3, 80031be <_malloc_r+0x3e>
 80031b4:	4621      	mov	r1, r4
 80031b6:	4630      	mov	r0, r6
 80031b8:	f000 f862 	bl	8003280 <_sbrk_r>
 80031bc:	6038      	str	r0, [r7, #0]
 80031be:	4629      	mov	r1, r5
 80031c0:	4630      	mov	r0, r6
 80031c2:	f000 f85d 	bl	8003280 <_sbrk_r>
 80031c6:	1c43      	adds	r3, r0, #1
 80031c8:	d123      	bne.n	8003212 <_malloc_r+0x92>
 80031ca:	230c      	movs	r3, #12
 80031cc:	4630      	mov	r0, r6
 80031ce:	6033      	str	r3, [r6, #0]
 80031d0:	f000 f86c 	bl	80032ac <__malloc_unlock>
 80031d4:	e7e3      	b.n	800319e <_malloc_r+0x1e>
 80031d6:	6823      	ldr	r3, [r4, #0]
 80031d8:	1b5b      	subs	r3, r3, r5
 80031da:	d417      	bmi.n	800320c <_malloc_r+0x8c>
 80031dc:	2b0b      	cmp	r3, #11
 80031de:	d903      	bls.n	80031e8 <_malloc_r+0x68>
 80031e0:	6023      	str	r3, [r4, #0]
 80031e2:	441c      	add	r4, r3
 80031e4:	6025      	str	r5, [r4, #0]
 80031e6:	e004      	b.n	80031f2 <_malloc_r+0x72>
 80031e8:	6863      	ldr	r3, [r4, #4]
 80031ea:	42a2      	cmp	r2, r4
 80031ec:	bf0c      	ite	eq
 80031ee:	600b      	streq	r3, [r1, #0]
 80031f0:	6053      	strne	r3, [r2, #4]
 80031f2:	4630      	mov	r0, r6
 80031f4:	f000 f85a 	bl	80032ac <__malloc_unlock>
 80031f8:	f104 000b 	add.w	r0, r4, #11
 80031fc:	1d23      	adds	r3, r4, #4
 80031fe:	f020 0007 	bic.w	r0, r0, #7
 8003202:	1ac2      	subs	r2, r0, r3
 8003204:	d0cc      	beq.n	80031a0 <_malloc_r+0x20>
 8003206:	1a1b      	subs	r3, r3, r0
 8003208:	50a3      	str	r3, [r4, r2]
 800320a:	e7c9      	b.n	80031a0 <_malloc_r+0x20>
 800320c:	4622      	mov	r2, r4
 800320e:	6864      	ldr	r4, [r4, #4]
 8003210:	e7cc      	b.n	80031ac <_malloc_r+0x2c>
 8003212:	1cc4      	adds	r4, r0, #3
 8003214:	f024 0403 	bic.w	r4, r4, #3
 8003218:	42a0      	cmp	r0, r4
 800321a:	d0e3      	beq.n	80031e4 <_malloc_r+0x64>
 800321c:	1a21      	subs	r1, r4, r0
 800321e:	4630      	mov	r0, r6
 8003220:	f000 f82e 	bl	8003280 <_sbrk_r>
 8003224:	3001      	adds	r0, #1
 8003226:	d1dd      	bne.n	80031e4 <_malloc_r+0x64>
 8003228:	e7cf      	b.n	80031ca <_malloc_r+0x4a>
 800322a:	bf00      	nop
 800322c:	20000090 	.word	0x20000090
 8003230:	20000094 	.word	0x20000094

08003234 <_realloc_r>:
 8003234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003236:	4607      	mov	r7, r0
 8003238:	4614      	mov	r4, r2
 800323a:	460e      	mov	r6, r1
 800323c:	b921      	cbnz	r1, 8003248 <_realloc_r+0x14>
 800323e:	4611      	mov	r1, r2
 8003240:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003244:	f7ff bf9c 	b.w	8003180 <_malloc_r>
 8003248:	b922      	cbnz	r2, 8003254 <_realloc_r+0x20>
 800324a:	f7ff ff4d 	bl	80030e8 <_free_r>
 800324e:	4625      	mov	r5, r4
 8003250:	4628      	mov	r0, r5
 8003252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003254:	f000 f830 	bl	80032b8 <_malloc_usable_size_r>
 8003258:	42a0      	cmp	r0, r4
 800325a:	d20f      	bcs.n	800327c <_realloc_r+0x48>
 800325c:	4621      	mov	r1, r4
 800325e:	4638      	mov	r0, r7
 8003260:	f7ff ff8e 	bl	8003180 <_malloc_r>
 8003264:	4605      	mov	r5, r0
 8003266:	2800      	cmp	r0, #0
 8003268:	d0f2      	beq.n	8003250 <_realloc_r+0x1c>
 800326a:	4631      	mov	r1, r6
 800326c:	4622      	mov	r2, r4
 800326e:	f7ff ff13 	bl	8003098 <memcpy>
 8003272:	4631      	mov	r1, r6
 8003274:	4638      	mov	r0, r7
 8003276:	f7ff ff37 	bl	80030e8 <_free_r>
 800327a:	e7e9      	b.n	8003250 <_realloc_r+0x1c>
 800327c:	4635      	mov	r5, r6
 800327e:	e7e7      	b.n	8003250 <_realloc_r+0x1c>

08003280 <_sbrk_r>:
 8003280:	b538      	push	{r3, r4, r5, lr}
 8003282:	2300      	movs	r3, #0
 8003284:	4d05      	ldr	r5, [pc, #20]	; (800329c <_sbrk_r+0x1c>)
 8003286:	4604      	mov	r4, r0
 8003288:	4608      	mov	r0, r1
 800328a:	602b      	str	r3, [r5, #0]
 800328c:	f7fd fc86 	bl	8000b9c <_sbrk>
 8003290:	1c43      	adds	r3, r0, #1
 8003292:	d102      	bne.n	800329a <_sbrk_r+0x1a>
 8003294:	682b      	ldr	r3, [r5, #0]
 8003296:	b103      	cbz	r3, 800329a <_sbrk_r+0x1a>
 8003298:	6023      	str	r3, [r4, #0]
 800329a:	bd38      	pop	{r3, r4, r5, pc}
 800329c:	20000100 	.word	0x20000100

080032a0 <__malloc_lock>:
 80032a0:	4801      	ldr	r0, [pc, #4]	; (80032a8 <__malloc_lock+0x8>)
 80032a2:	f000 b811 	b.w	80032c8 <__retarget_lock_acquire_recursive>
 80032a6:	bf00      	nop
 80032a8:	20000108 	.word	0x20000108

080032ac <__malloc_unlock>:
 80032ac:	4801      	ldr	r0, [pc, #4]	; (80032b4 <__malloc_unlock+0x8>)
 80032ae:	f000 b80c 	b.w	80032ca <__retarget_lock_release_recursive>
 80032b2:	bf00      	nop
 80032b4:	20000108 	.word	0x20000108

080032b8 <_malloc_usable_size_r>:
 80032b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032bc:	1f18      	subs	r0, r3, #4
 80032be:	2b00      	cmp	r3, #0
 80032c0:	bfbc      	itt	lt
 80032c2:	580b      	ldrlt	r3, [r1, r0]
 80032c4:	18c0      	addlt	r0, r0, r3
 80032c6:	4770      	bx	lr

080032c8 <__retarget_lock_acquire_recursive>:
 80032c8:	4770      	bx	lr

080032ca <__retarget_lock_release_recursive>:
 80032ca:	4770      	bx	lr

080032cc <_init>:
 80032cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ce:	bf00      	nop
 80032d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032d2:	bc08      	pop	{r3}
 80032d4:	469e      	mov	lr, r3
 80032d6:	4770      	bx	lr

080032d8 <_fini>:
 80032d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032da:	bf00      	nop
 80032dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032de:	bc08      	pop	{r3}
 80032e0:	469e      	mov	lr, r3
 80032e2:	4770      	bx	lr
